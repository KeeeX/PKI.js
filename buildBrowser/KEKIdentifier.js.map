{"version":3,"sources":["../src/KEKIdentifier.js"],"names":["KEKIdentifier","parameters","keyIdentifier","defaultValues","date","other","fromSchema","schema","asn1","asn1js","compareSchema","names","blockName","verified","Error","result","OtherKeyAttribute","outputArray","push","toSchema","Sequence","value","_object","toJSON","memberName","OctetString","GeneralizedTime","memberValue","isEqual","year","month","day","hour","minute","second","millisecond","compareWithDefault","keyAttrId","name","optional"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport OtherKeyAttribute from \"./OtherKeyAttribute.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class KEKIdentifier\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for KEKIdentifier class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc keyIdentifier\r\n\t\t */\r\n\t\tthis.keyIdentifier = getParametersValue(parameters, \"keyIdentifier\", KEKIdentifier.defaultValues(\"keyIdentifier\"));\r\n\r\n\t\tif(\"date\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {GeneralizedTime}\r\n\t\t\t * @desc date\r\n\t\t\t */\r\n\t\t\tthis.date = getParametersValue(parameters, \"date\", KEKIdentifier.defaultValues(\"date\"));\r\n\t\tif(\"other\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {OtherKeyAttribute}\r\n\t\t\t * @desc other\r\n\t\t\t */\r\n\t\t\tthis.other = getParametersValue(parameters, \"other\", KEKIdentifier.defaultValues(\"other\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"keyIdentifier\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"date\":\r\n\t\t\t\treturn new asn1js.GeneralizedTime();\r\n\t\t\tcase \"other\":\r\n\t\t\t\treturn new OtherKeyAttribute();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for KEKIdentifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"keyIdentifier\":\r\n\t\t\t\treturn (memberValue.isEqual(KEKIdentifier.defaultValues(\"keyIdentifier\")));\r\n\t\t\tcase \"date\":\r\n\t\t\t\t// noinspection OverlyComplexBooleanExpressionJS\r\n\t\t\t\treturn ((memberValue.year === 0) &&\r\n\t\t\t\t\t\t(memberValue.month === 0) &&\r\n\t\t\t\t\t\t(memberValue.day === 0) &&\r\n\t\t\t\t\t\t(memberValue.hour === 0) &&\r\n\t\t\t\t\t\t(memberValue.minute === 0) &&\r\n\t\t\t\t\t\t(memberValue.second === 0) &&\r\n\t\t\t\t\t\t(memberValue.millisecond === 0));\r\n\t\t\tcase \"other\":\r\n\t\t\t\treturn ((memberValue.compareWithDefault(\"keyAttrId\", memberValue.keyAttrId)) &&\r\n\t\t\t\t\t\t((\"keyAttr\" in memberValue) === false));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for KEKIdentifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * KEKIdentifier ::= SEQUENCE {\r\n\t *    keyIdentifier OCTET STRING,\r\n\t *    date GeneralizedTime OPTIONAL,\r\n\t *    other OtherKeyAttribute OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [keyIdentifier]\r\n\t\t * @property {string} [date]\r\n\t\t * @property {string} [other]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.keyIdentifier || \"\") }),\r\n\t\t\t\tnew asn1js.GeneralizedTime({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.date || \"\")\r\n\t\t\t\t}),\r\n\t\t\t\tOtherKeyAttribute.schema(names.other || {})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"keyIdentifier\",\r\n\t\t\t\"date\",\r\n\t\t\t\"other\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tKEKIdentifier.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tkeyIdentifier: \"keyIdentifier\",\r\n\t\t\t\t\tdate: \"date\",\r\n\t\t\t\t\tother: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"other\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for KEKIdentifier\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.keyIdentifier = asn1.result.keyIdentifier;\r\n\r\n\t\tif(\"date\" in asn1.result)\r\n\t\t\tthis.date = asn1.result.date;\r\n\r\n\t\tif(\"other\" in asn1.result)\r\n\t\t\tthis.other = new OtherKeyAttribute({ schema: asn1.result.other });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(this.keyIdentifier);\r\n\r\n\t\tif(\"date\" in this)\r\n\t\t\toutputArray.push(this.date);\r\n\r\n\t\tif(\"other\" in this)\r\n\t\t\toutputArray.push(this.other.toSchema());\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tkeyIdentifier: this.keyIdentifier.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"date\" in this)\r\n\t\t\t_object.date = this.date;\r\n\r\n\t\tif(\"other\" in this)\r\n\t\t\t_object.other = this.other.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"KEKIdentifier.js"}