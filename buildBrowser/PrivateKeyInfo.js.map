{"version":3,"sources":["../src/PrivateKeyInfo.js"],"names":["PrivateKeyInfo","parameters","version","defaultValues","privateKeyAlgorithm","privateKey","attributes","parsedKey","fromSchema","schema","fromJSON","json","asn1","asn1js","compareSchema","names","blockName","verified","Error","result","valueBlock","valueDec","AlgorithmIdentifier","Array","from","element","Attribute","algorithmId","privateKeyASN1","fromBER","valueHex","offset","RSAPrivateKey","algorithmParams","ObjectIdentifier","ECPrivateKey","namedCurve","toString","outputArray","Integer","value","toSchema","push","Constructed","optional","idBlock","tagClass","tagNumber","Sequence","object","toJSON","jwk","kty","publicKeyJWK","Object","keys","key","toUpperCase","Null","OctetString","toBER","memberName","name","Repeated"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport Attribute from \"./Attribute.js\";\r\nimport ECPrivateKey from \"./ECPrivateKey.js\";\r\nimport RSAPrivateKey from \"./RSAPrivateKey.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5208\r\n */\r\nexport default class PrivateKeyInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PrivateKeyInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", PrivateKeyInfo.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc privateKeyAlgorithm\r\n\t\t */\r\n\t\tthis.privateKeyAlgorithm = getParametersValue(parameters, \"privateKeyAlgorithm\", PrivateKeyInfo.defaultValues(\"privateKeyAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc privateKey\r\n\t\t */\r\n\t\tthis.privateKey = getParametersValue(parameters, \"privateKey\", PrivateKeyInfo.defaultValues(\"privateKey\"));\r\n\r\n\t\tif(\"attributes\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Attribute>}\r\n\t\t\t * @desc attributes\r\n\t\t\t */\r\n\t\t\tthis.attributes = getParametersValue(parameters, \"attributes\", PrivateKeyInfo.defaultValues(\"attributes\"));\r\n\r\n\t\tif(\"parsedKey\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ECPrivateKey|RSAPrivateKey}\r\n\t\t\t * @desc Parsed public key value\r\n\t\t\t */\r\n\t\t\tthis.parsedKey = getParametersValue(parameters, \"parsedKey\", PrivateKeyInfo.defaultValues(\"parsedKey\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"privateKeyAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"privateKey\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"attributes\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"parsedKey\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PrivateKeyInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PrivateKeyInfo ::= SEQUENCE {\r\n\t *    version Version,\r\n\t *    privateKeyAlgorithm AlgorithmIdentifier {{PrivateKeyAlgorithms}},\r\n\t *    privateKey PrivateKey,\r\n\t *    attributes [0] Attributes OPTIONAL }\r\n\t *\r\n\t * Version ::= INTEGER {v1(0)} (v1,...)\r\n\t *\r\n\t * PrivateKey ::= OCTET STRING\r\n\t *\r\n\t * Attributes ::= SET OF Attribute\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [privateKeyAlgorithm]\r\n\t\t * @property {string} [privateKey]\r\n\t\t * @property {string} [attributes]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.privateKeyAlgorithm || {}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.privateKey || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.attributes || \"\"),\r\n\t\t\t\t\t\t\tvalue: Attribute.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"privateKeyAlgorithm\",\r\n\t\t\t\"privateKey\",\r\n\t\t\t\"attributes\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPrivateKeyInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tprivateKeyAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"privateKeyAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tprivateKey: \"privateKey\",\r\n\t\t\t\t\tattributes: \"attributes\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PrivateKeyInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.privateKeyAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.privateKeyAlgorithm });\r\n\t\tthis.privateKey = asn1.result.privateKey;\r\n\r\n\t\tif(\"attributes\" in asn1.result)\r\n\t\t\tthis.attributes = Array.from(asn1.result.attributes, element => new Attribute({ schema: element }));\r\n\r\n\t\tswitch(this.privateKeyAlgorithm.algorithmId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.113549.1.1.1\": // RSA\r\n\t\t\t\t{\r\n\t\t\t\t\tconst privateKeyASN1 = asn1js.fromBER(this.privateKey.valueBlock.valueHex);\r\n\t\t\t\t\tif(privateKeyASN1.offset !== (-1))\r\n\t\t\t\t\t\tthis.parsedKey = new RSAPrivateKey({ schema: privateKeyASN1.result });\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.10045.2.1\": // ECDSA\r\n\t\t\t\tif(\"algorithmParams\" in this.privateKeyAlgorithm)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this.privateKeyAlgorithm.algorithmParams instanceof asn1js.ObjectIdentifier)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst privateKeyASN1 = asn1js.fromBER(this.privateKey.valueBlock.valueHex);\r\n\t\t\t\t\t\tif(privateKeyASN1.offset !== (-1))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.parsedKey = new ECPrivateKey({\r\n\t\t\t\t\t\t\t\tnamedCurve: this.privateKeyAlgorithm.algorithmParams.valueBlock.toString(),\r\n\t\t\t\t\t\t\t\tschema: privateKeyASN1.result\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [\r\n\t\t\tnew asn1js.Integer({ value: this.version }),\r\n\t\t\tthis.privateKeyAlgorithm.toSchema(),\r\n\t\t\tthis.privateKey\r\n\t\t];\r\n\r\n\t\tif(\"attributes\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.attributes, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\t//region Return common value in case we do not have enough info fo making JWK\r\n\t\tif((\"parsedKey\" in this) === false)\r\n\t\t{\r\n\t\t\tconst object = {\r\n\t\t\t\tversion: this.version,\r\n\t\t\t\tprivateKeyAlgorithm: this.privateKeyAlgorithm.toJSON(),\r\n\t\t\t\tprivateKey: this.privateKey.toJSON()\r\n\t\t\t};\r\n\r\n\t\t\tif(\"attributes\" in this)\r\n\t\t\t\tobject.attributes = Array.from(this.attributes, element => element.toJSON());\r\n\r\n\t\t\treturn object;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Making JWK\r\n\t\tconst jwk = {};\r\n\r\n\t\tswitch(this.privateKeyAlgorithm.algorithmId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.2.1\": // ECDSA\r\n\t\t\t\tjwk.kty = \"EC\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.1.1\": // RSA\r\n\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\r\n\t\tconst publicKeyJWK = this.parsedKey.toJSON();\r\n\r\n\t\tfor(const key of Object.keys(publicKeyJWK))\r\n\t\t\tjwk[key] = publicKeyJWK[key];\r\n\r\n\t\treturn jwk;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tif(\"kty\" in json)\r\n\t\t{\r\n\t\t\tswitch(json.kty.toUpperCase())\r\n\t\t\t{\r\n\t\t\t\tcase \"EC\":\r\n\t\t\t\t\tthis.parsedKey = new ECPrivateKey({ json });\r\n\r\n\t\t\t\t\tthis.privateKeyAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: \"1.2.840.10045.2.1\",\r\n\t\t\t\t\t\talgorithmParams: new asn1js.ObjectIdentifier({ value: this.parsedKey.namedCurve })\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"RSA\":\r\n\t\t\t\t\tthis.parsedKey = new RSAPrivateKey({ json });\r\n\r\n\t\t\t\t\tthis.privateKeyAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.1\",\r\n\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(`Invalid value for \"kty\" parameter: ${json.kty}`);\r\n\t\t\t}\r\n\r\n\t\t\tthis.privateKey = new asn1js.OctetString({ valueHex: this.parsedKey.toSchema().toBER(false) });\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"PrivateKeyInfo.js"}