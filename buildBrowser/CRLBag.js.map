{"version":3,"sources":["../src/CRLBag.js"],"names":["CRLBag","parameters","crlId","defaultValues","crlValue","parsedValue","fromSchema","schema","asn1","asn1js","compareSchema","names","id","value","verified","Error","result","valueBlock","toString","asn1Inner","fromBER","certValue","valueHex","CertificateRevocationList","certId","OctetString","toSchema","toBER","Sequence","ObjectIdentifier","Constructed","idBlock","tagClass","tagNumber","toJSON","memberName","Any","memberValue","Object","keys","length","name","blockName"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport CertificateRevocationList from \"./CertificateRevocationList.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC7292\r\n */\r\nexport default class CRLBag\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CRLBag class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc crlId\r\n\t\t */\r\n\t\tthis.crlId = getParametersValue(parameters, \"crlId\", CRLBag.defaultValues(\"crlId\"));\r\n\t\t/**\r\n\t\t * @type {*}\r\n\t\t * @desc crlValue\r\n\t\t */\r\n\t\tthis.crlValue = getParametersValue(parameters, \"crlValue\", CRLBag.defaultValues(\"crlValue\"));\r\n\t\t\r\n\t\tif(\"parsedValue\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {*}\r\n\t\t\t * @desc parsedValue\r\n\t\t\t */\r\n\t\t\tthis.parsedValue = getParametersValue(parameters, \"parsedValue\", CRLBag.defaultValues(\"parsedValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"crlId\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"crlValue\":\r\n\t\t\t\treturn (new asn1js.Any());\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CRLBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"crlId\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"crlValue\":\r\n\t\t\t\treturn (memberValue instanceof asn1js.Any);\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CRLBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * CRLBag ::= SEQUENCE {\r\n\t *    crlId     \tBAG-TYPE.&id ({CRLTypes}),\r\n\t *    crlValue \t[0] EXPLICIT BAG-TYPE.&Type ({CRLTypes}{@crlId})\r\n\t *}\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [id]\r\n\t\t * @property {string} [value]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.id || \"id\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Any({ name: (names.value || \"value\") })] // EXPLICIT ANY value\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"crlId\",\r\n\t\t\t\"crlValue\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCRLBag.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tid: \"crlId\",\r\n\t\t\t\t\tvalue: \"crlValue\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CRLBag\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.crlId = asn1.result.crlId.valueBlock.toString();\r\n\t\tthis.crlValue = asn1.result.crlValue;\r\n\t\t\r\n\t\tswitch(this.crlId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.113549.1.9.23.1\": // x509CRL\r\n\t\t\t\t{\r\n\t\t\t\t\tconst asn1Inner = asn1js.fromBER(this.certValue.valueBlock.valueHex);\r\n\t\t\t\t\tthis.parsedValue = new CertificateRevocationList({ schema: asn1Inner.result });\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Incorrect \"crlId\" value in CRLBag: ${this.crlId}`);\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\tif(\"parsedValue\" in this)\r\n\t\t{\r\n\t\t\tthis.certId = \"1.2.840.113549.1.9.23.1\";\r\n\t\t\tthis.certValue = new asn1js.OctetString({ valueHex: this.parsedValue.toSchema().toBER(false) });\r\n\t\t}\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.crlId }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [this.crlValue.toSchema()]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tcrlId: this.crlId,\r\n\t\t\tcrlValue: this.crlValue.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"CRLBag.js"}