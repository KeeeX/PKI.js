{"version":3,"sources":["../src/Request.js"],"names":["Request","parameters","reqCert","defaultValues","singleRequestExtensions","fromSchema","schema","asn1","asn1js","compareSchema","names","blockName","verified","Error","CertID","result","Array","from","valueBlock","value","element","Extension","outputArray","push","toSchema","Constructed","optional","idBlock","tagClass","tagNumber","Sequence","_object","toJSON","memberName","memberValue","isEqual","length","name","extensions"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport CertID from \"./CertID.js\";\r\nimport Extension from \"./Extension.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class Request\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Request class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {CertID}\r\n\t\t * @desc reqCert\r\n\t\t */\r\n\t\tthis.reqCert = getParametersValue(parameters, \"reqCert\", Request.defaultValues(\"reqCert\"));\r\n\r\n\t\tif(\"singleRequestExtensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Extension>}\r\n\t\t\t * @desc singleRequestExtensions\r\n\t\t\t */\r\n\t\t\tthis.singleRequestExtensions = getParametersValue(parameters, \"singleRequestExtensions\", Request.defaultValues(\"singleRequestExtensions\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"reqCert\":\r\n\t\t\t\treturn new CertID();\r\n\t\t\tcase \"singleRequestExtensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Request class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"reqCert\":\r\n\t\t\t\treturn (memberValue.isEqual(Request.defaultValues(memberName)));\r\n\t\t\tcase \"singleRequestExtensions\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Request class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * Request         ::=     SEQUENCE {\r\n\t *    reqCert                     CertID,\r\n\t *    singleRequestExtensions     [0] EXPLICIT Extensions OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [reqCert]\r\n\t\t * @property {string} [extensions]\r\n\t\t * @property {string} [singleRequestExtensions]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tCertID.schema(names.reqCert || {}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [Extension.schema(names.extensions || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: (names.singleRequestExtensions || \"\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"reqCert\",\r\n\t\t\t\"singleRequestExtensions\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRequest.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\treqCert: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"reqCert\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsingleRequestExtensions: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"singleRequestExtensions\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for Request\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.reqCert = new CertID({ schema: asn1.result.reqCert });\r\n\r\n\t\tif(\"singleRequestExtensions\" in asn1.result)\r\n\t\t\tthis.singleRequestExtensions = Array.from(asn1.result.singleRequestExtensions.valueBlock.value, element => new Extension({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(this.reqCert.toSchema());\r\n\r\n\t\tif(\"singleRequestExtensions\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\tvalue: Array.from(this.singleRequestExtensions, element => element.toSchema())\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\treqCert: this.reqCert.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"singleRequestExtensions\" in this)\r\n\t\t\t_object.singleRequestExtensions = Array.from(this.singleRequestExtensions, element => element.toJSON());\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"Request.js"}