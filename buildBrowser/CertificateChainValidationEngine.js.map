{"version":3,"sources":["../src/CertificateChainValidationEngine.js"],"names":["CertificateChainValidationEngine","parameters","trustedCerts","defaultValues","certs","crls","ocsps","checkDate","findOrigin","findIssuer","certificate","validationEngine","checkCertificate","possibleIssuer","keyIdentifier","extensionFound","extensions","extension","extnID","parsedValue","valueBlock","valueHex","result","push","authorityCertSerialNumberEqual","authorityCertSerialNumber","serialNumber","isEqual","authorityCertIssuer","subject","issuer","verify","verificationResult","trustedCert","intermediateCert","i","length","splice","memberName","Date","defaultFindOrigin","defaultFindIssuer","Error","buildPath","findCRL","findOCSP","checkForCA","basicCheck","path","notBefore","value","notAfter","resultCode","resultMessage","_this","ocspResult","crlResult","status","statusMessage","j","isCertificateRevoked","crl","isCertificateCA","passedWhenNotRevValues","issuerCertificate","needToCheckCRL","isCA","mustBeCA","keyUsagePresent","cRLSign","critical","view","Uint8Array","cA","hashAlgorithm","signatureAlgorithm","algorithmId","getCertificateStatus","isForCertificate","issuerCertificates","crlsAndCertificates","localCerts","filter","element","nextUpdate","checkUnique","array","unique","findIssuerResult","tbs","buildPathResult","copy","slice","certificatePath","found","k","shortestLength","shortestIndex","compareDNSName","compareRFC822Name","compareUniformResourceIdentifier","compareIPAddress","compareDirectoryName","name","constraint","typesAndValues","nameStart","localResult","type","nameView","constraintView","namePrepared","constraintPrepared","ns","split","cs","charAt","nsPort","nameSplitted","constraintSplitted","localeCompare","nameLen","constrLen","initialPolicySet","initialExplicitPolicy","initialPolicyMappingInhibit","initialInhibitPolicy","initialPermittedSubtreesSet","initialExcludedSubtreesSet","initialRequiredNameForms","explicitPolicyIndicator","policyMappingInhibitIndicator","inhibitAnyPolicyIndicator","pendingConstraints","Array","explicitPolicyPending","policyMappingInhibitPending","inhibitAnyPolicyPending","permittedSubtrees","excludedSubtrees","requiredNameForms","pathDepth","sort","allPolicies","policiesAndCerts","anyPolicyArray","ii","policyMappings","certPolicies","explicitPolicyStart","s","certificatePolicies","policyIndex","policyIdentifier","certArray","requireExplicitPolicy","inhibitPolicyMapping","valueDec","searchAnyPolicy","mappings","issuerDomainPolicy","subjectDomainPolicy","issuerDomainPolicyIndex","subjectDomainPolicyIndex","n","m","authConstrPolicies","anyPolicyFound","userConstrPolicies","policyResult","subjectAltNames","certPermittedSubtrees","certExcludedSubtrees","concat","altNames","formFound","base","constrGroups","p","groupPermitted","valueExists","group","excluded","Object","message","byteLength","encodeTBS","localCert"],"mappings":"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","sourcesContent":["import { getParametersValue, isEqualBuffer } from \"pvutils\";\r\nimport { getAlgorithmByOID, stringPrep } from \"./common.js\";\r\n//**************************************************************************************\r\nexport default class CertificateChainValidationEngine\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CertificateChainValidationEngine class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<Certificate>}\r\n\t\t * @desc Array of pre-defined trusted (by user) certificates\r\n\t\t */\r\n\t\tthis.trustedCerts = getParametersValue(parameters, \"trustedCerts\", this.defaultValues(\"trustedCerts\"));\r\n\t\t/**\r\n\t\t * @type {Array.<Certificate>}\r\n\t\t * @desc Array with certificate chain. Could be only one end-user certificate in there!\r\n\t\t */\r\n\t\tthis.certs = getParametersValue(parameters, \"certs\", this.defaultValues(\"certs\"));\r\n\t\t/**\r\n\t\t * @type {Array.<CertificateRevocationList>}\r\n\t\t * @desc Array of all CRLs for all certificates from certificate chain\r\n\t\t */\r\n\t\tthis.crls = getParametersValue(parameters, \"crls\", this.defaultValues(\"crls\"));\r\n\t\t/**\r\n\t\t * @type {Array}\r\n\t\t * @desc Array of all OCSP responses\r\n\t\t */\r\n\t\tthis.ocsps = getParametersValue(parameters, \"ocsps\", this.defaultValues(\"ocsps\"));\r\n\t\t/**\r\n\t\t * @type {Date}\r\n\t\t * @desc The date at which the check would be\r\n\t\t */\r\n\t\tthis.checkDate = getParametersValue(parameters, \"checkDate\", this.defaultValues(\"checkDate\"));\r\n\t\t/**\r\n\t\t * @type {Function}\r\n\t\t * @desc The date at which the check would be\r\n\t\t */\r\n\t\tthis.findOrigin = getParametersValue(parameters, \"findOrigin\", this.defaultValues(\"findOrigin\"));\r\n\t\t/**\r\n\t\t * @type {Function}\r\n\t\t * @desc The date at which the check would be\r\n\t\t */\r\n\t\tthis.findIssuer = getParametersValue(parameters, \"findIssuer\", this.defaultValues(\"findIssuer\"));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\tstatic defaultFindOrigin(certificate, validationEngine)\r\n\t{\r\n\t\t//region Firstly encode TBS for certificate\r\n\t\tif(certificate.tbs.byteLength === 0)\r\n\t\t\tcertificate.tbs = certificate.encodeTBS();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Search in Intermediate Certificates\r\n\t\tfor(const localCert of validationEngine.certs)\r\n\t\t{\r\n\t\t\t//region Firstly encode TBS for certificate\r\n\t\t\tif(localCert.tbs.byteLength === 0)\r\n\t\t\t\tlocalCert.tbs = localCert.encodeTBS();\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(isEqualBuffer(certificate.tbs, localCert.tbs))\r\n\t\t\t\treturn \"Intermediate Certificates\";\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Search in Trusted Certificates\r\n\t\tfor(const trustedCert of validationEngine.trustedCerts)\r\n\t\t{\r\n\t\t\t//region Firstly encode TBS for certificate\r\n\t\t\tif(trustedCert.tbs.byteLength === 0)\r\n\t\t\t\ttrustedCert.tbs = trustedCert.encodeTBS();\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(isEqualBuffer(certificate.tbs, trustedCert.tbs))\r\n\t\t\t\treturn \"Trusted Certificates\";\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn \"Unknown\";\r\n\t}\r\n\t//**********************************************************************************\r\n\tasync defaultFindIssuer(certificate, validationEngine)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet result = [];\r\n\t\t\r\n\t\tlet keyIdentifier = null;\r\n\t\t\r\n\t\tlet authorityCertIssuer = null;\r\n\t\tlet authorityCertSerialNumber = null;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Speed-up searching in case of self-signed certificates\r\n\t\tif(certificate.subject.isEqual(certificate.issuer))\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tconst verificationResult = await certificate.verify();\r\n\t\t\t\tif(verificationResult === true)\r\n\t\t\t\t\treturn [certificate];\r\n\t\t\t}\r\n\t\t\tcatch(ex)\r\n\t\t\t{\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find values to speed-up search\r\n\t\tif(\"extensions\" in certificate)\r\n\t\t{\r\n\t\t\tfor(const extension of certificate.extensions)\r\n\t\t\t{\r\n\t\t\t\tif(extension.extnID === \"2.5.29.35\") // AuthorityKeyIdentifier\r\n\t\t\t\t{\r\n\t\t\t\t\tif(\"keyIdentifier\" in extension.parsedValue)\r\n\t\t\t\t\t\tkeyIdentifier = extension.parsedValue.keyIdentifier;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(\"authorityCertIssuer\" in extension.parsedValue)\r\n\t\t\t\t\t\t\tauthorityCertIssuer = extension.parsedValue.authorityCertIssuer;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(\"authorityCertSerialNumber\" in extension.parsedValue)\r\n\t\t\t\t\t\t\tauthorityCertSerialNumber = extension.parsedValue.authorityCertSerialNumber;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Aux function\r\n\t\tfunction checkCertificate(possibleIssuer)\r\n\t\t{\r\n\t\t\t//region Firstly search for appropriate extensions\r\n\t\t\tif(keyIdentifier !== null)\r\n\t\t\t{\r\n\t\t\t\tif(\"extensions\" in possibleIssuer)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet extensionFound = false;\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor(const extension of possibleIssuer.extensions)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(extension.extnID === \"2.5.29.14\") // SubjectKeyIdentifier\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\textensionFound = true;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(isEqualBuffer(extension.parsedValue.valueBlock.valueHex, keyIdentifier.valueBlock.valueHex))\r\n\t\t\t\t\t\t\t\tresult.push(possibleIssuer);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(extensionFound)\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Now search for authorityCertSerialNumber\r\n\t\t\tlet authorityCertSerialNumberEqual = false;\r\n\t\t\t\r\n\t\t\tif(authorityCertSerialNumber !== null)\r\n\t\t\t\tauthorityCertSerialNumberEqual = possibleIssuer.serialNumber.isEqual(authorityCertSerialNumber);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region And at least search for Issuer data\r\n\t\t\tif(authorityCertIssuer !== null)\r\n\t\t\t{\r\n\t\t\t\tif(possibleIssuer.subject.isEqual(authorityCertIssuer))\r\n\t\t\t\t{\r\n\t\t\t\t\tif(authorityCertSerialNumberEqual)\r\n\t\t\t\t\t\tresult.push(possibleIssuer);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif(certificate.issuer.isEqual(possibleIssuer.subject))\r\n\t\t\t\t\tresult.push(possibleIssuer);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Search in Trusted Certificates\r\n\t\tfor(const trustedCert of validationEngine.trustedCerts)\r\n\t\t\tcheckCertificate(trustedCert);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Search in Intermediate Certificates\r\n\t\tfor(const intermediateCert of validationEngine.certs)\r\n\t\t\tcheckCertificate(intermediateCert);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Now perform certificate verification checking\r\n\t\tfor(let i = 0; i < result.length; i++)\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tconst verificationResult = await certificate.verify(result[i]);\r\n\t\t\t\tif(verificationResult === false)\r\n\t\t\t\t\tresult.splice(i, 1);\r\n\t\t\t}\r\n\t\t\tcatch(ex)\r\n\t\t\t{\r\n\t\t\t\tresult.splice(i, 1); // Something wrong, remove the certificate\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tdefaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"trustedCerts\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"crls\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"ocsps\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"checkDate\":\r\n\t\t\t\treturn new Date();\r\n\t\t\tcase \"findOrigin\":\r\n\t\t\t\treturn CertificateChainValidationEngine.defaultFindOrigin;\r\n\t\t\tcase \"findIssuer\":\r\n\t\t\t\treturn this.defaultFindIssuer;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertificateChainValidationEngine class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\tasync sort(passedWhenNotRevValues = false)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tconst localCerts = [];\r\n\t\tconst _this = this;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Building certificate path\r\n\t\tasync function buildPath(certificate)\r\n\t\t{\r\n\t\t\tconst result = [];\r\n\t\t\t\r\n\t\t\t//region Aux function checking array for unique elements\r\n\t\t\tfunction checkUnique(array)\r\n\t\t\t{\r\n\t\t\t\tlet unique = true;\r\n\t\t\t\t\r\n\t\t\t\tfor(let i = 0; i < array.length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let j = 0; j < array.length; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(j === i)\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(array[i] === array[j])\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tunique = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(!unique)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn unique;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tconst findIssuerResult = await _this.findIssuer(certificate, _this);\r\n\t\t\tif(findIssuerResult.length === 0)\r\n\t\t\t\tthrow new Error(\"No valid certificate paths found\");\r\n\t\t\t\r\n\t\t\tfor(let i = 0; i < findIssuerResult.length; i++)\r\n\t\t\t{\r\n\t\t\t\tif(isEqualBuffer(findIssuerResult[i].tbs, certificate.tbs))\r\n\t\t\t\t{\r\n\t\t\t\t\tresult.push([findIssuerResult[i]]);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tconst buildPathResult = await buildPath(findIssuerResult[i]);\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < buildPathResult.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst copy = buildPathResult[j].slice();\r\n\t\t\t\t\tcopy.splice(0, 0, findIssuerResult[i]);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(checkUnique(copy))\r\n\t\t\t\t\t\tresult.push(copy);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tresult.push(buildPathResult[j]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find CRL for specific certificate\r\n\t\tasync function findCRL(certificate)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tconst issuerCertificates = [];\r\n\t\t\tconst crls = [];\r\n\t\t\tconst crlsAndCertificates = [];\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Find all possible CRL issuers\r\n\t\t\tissuerCertificates.push(...localCerts.filter(element => certificate.issuer.isEqual(element.subject)));\r\n\t\t\tif(issuerCertificates.length === 0)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tstatus: 1,\r\n\t\t\t\t\tstatusMessage: \"No certificate's issuers\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Find all CRLs for certificate's issuer\r\n\t\t\tcrls.push(..._this.crls.filter(element => element.issuer.isEqual(certificate.issuer)));\r\n\t\t\tif(crls.length === 0)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tstatus: 2,\r\n\t\t\t\t\tstatusMessage: \"No CRLs for specific certificate issuer\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Find specific certificate of issuer for each CRL\r\n\t\t\tfor(let i = 0; i < crls.length; i++)\r\n\t\t\t{\r\n\t\t\t\t//region Check \"nextUpdate\" for the CRL\r\n\t\t\t\t// The \"nextUpdate\" is older than \"checkDate\".\r\n\t\t\t\t// Thus we should do have another, updated CRL.\r\n\t\t\t\t// Thus the CRL assumed to be invalid.\r\n\t\t\t\tif(crls[i].nextUpdate.value < _this.checkDate)\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < issuerCertificates.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst result = await crls[i].verify({ issuerCertificate: issuerCertificates[j] });\r\n\t\t\t\t\t\tif(result)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcrlsAndCertificates.push({\r\n\t\t\t\t\t\t\t\tcrl: crls[i],\r\n\t\t\t\t\t\t\t\tcertificate: issuerCertificates[j]\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(crlsAndCertificates.length)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tstatus: 0,\r\n\t\t\t\t\tstatusMessage: \"\",\r\n\t\t\t\t\tresult: crlsAndCertificates\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn {\r\n\t\t\t\tstatus: 3,\r\n\t\t\t\tstatusMessage: \"No valid CRLs found\"\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find OCSP for specific certificate\r\n\t\tasync function findOCSP(certificate, issuerCertificate)\r\n\t\t{\r\n\t\t\t//region Get hash algorithm from certificate\r\n\t\t\tconst hashAlgorithm = getAlgorithmByOID(certificate.signatureAlgorithm.algorithmId);\r\n\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\treturn 1;\r\n\t\t\tif((\"hash\" in hashAlgorithm) === false)\r\n\t\t\t\treturn 1;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Search for OCSP response for the certificate\r\n\t\t\tfor(let i = 0; i < _this.ocsps.length; i++)\r\n\t\t\t{\r\n\t\t\t\tconst result = await _this.ocsps[i].getCertificateStatus(certificate, issuerCertificate);\r\n\t\t\t\tif(result.isForCertificate)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(result.status === 0)\r\n\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn 2;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check for certificate to be CA\r\n\t\tasync function checkForCA(certificate, needToCheckCRL = false)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet isCA = false;\r\n\t\t\tlet mustBeCA = false;\r\n\t\t\tlet keyUsagePresent = false;\r\n\t\t\tlet cRLSign = false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(\"extensions\" in certificate)\r\n\t\t\t{\r\n\t\t\t\tfor(let j = 0; j < certificate.extensions.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((certificate.extensions[j].critical === true) &&\r\n\t\t\t\t\t\t((\"parsedValue\" in certificate.extensions[j]) === false))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\tresultCode: 6,\r\n\t\t\t\t\t\t\tresultMessage: `Unable to parse critical certificate extension: ${certificate.extensions[j].extnID}`\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(certificate.extensions[j].extnID === \"2.5.29.15\") // KeyUsage\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tkeyUsagePresent = true;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconst view = new Uint8Array(certificate.extensions[j].parsedValue.valueBlock.valueHex);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif((view[0] & 0x04) === 0x04) // Set flag \"keyCertSign\"\r\n\t\t\t\t\t\t\tmustBeCA = true;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif((view[0] & 0x02) === 0x02) // Set flag \"cRLSign\"\r\n\t\t\t\t\t\t\tcRLSign = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(certificate.extensions[j].extnID === \"2.5.29.19\") // BasicConstraints\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(\"cA\" in certificate.extensions[j].parsedValue)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(certificate.extensions[j].parsedValue.cA === true)\r\n\t\t\t\t\t\t\t\tisCA = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif((mustBeCA === true) && (isCA === false))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: 3,\r\n\t\t\t\t\t\tresultMessage: \"Unable to build certificate chain - using \\\"keyCertSign\\\" flag set without BasicConstaints\"\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif((keyUsagePresent === true) && (isCA === true) && (mustBeCA === false))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: 4,\r\n\t\t\t\t\t\tresultMessage: \"Unable to build certificate chain - \\\"keyCertSign\\\" flag was not set\"\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// noinspection OverlyComplexBooleanExpressionJS\r\n\t\t\t\tif((isCA === true) && (keyUsagePresent === true) && ((needToCheckCRL) && (cRLSign === false)))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: 5,\r\n\t\t\t\t\t\tresultMessage: \"Unable to build certificate chain - intermediate certificate must have \\\"cRLSign\\\" key usage flag\"\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(isCA === false)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tresult: false,\r\n\t\t\t\t\tresultCode: 7,\r\n\t\t\t\t\tresultMessage: \"Unable to build certificate chain - more than one possible end-user certificate\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn {\r\n\t\t\t\tresult: true,\r\n\t\t\t\tresultCode: 0,\r\n\t\t\t\tresultMessage: \"\"\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Basic check for certificate path\r\n\t\tasync function basicCheck(path, checkDate)\r\n\t\t{\r\n\t\t\t//region Check that all dates are valid\r\n\t\t\tfor(let i = 0; i < path.length; i++)\r\n\t\t\t{\r\n\t\t\t\tif((path[i].notBefore.value > checkDate) ||\r\n\t\t\t\t\t(path[i].notAfter.value < checkDate))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: 8,\r\n\t\t\t\t\t\tresultMessage: \"The certificate is either not yet valid or expired\"\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check certificate name chain\r\n\t\t\t\r\n\t\t\t// We should have at least two certificates: end entity and trusted root\r\n\t\t\tif(path.length < 2)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tresult: false,\r\n\t\t\t\t\tresultCode: 9,\r\n\t\t\t\t\tresultMessage: \"Too short certificate path\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor(let i = (path.length - 2); i >= 0; i--)\r\n\t\t\t{\r\n\t\t\t\t//region Check that we do not have a \"self-signed\" certificate\r\n\t\t\t\tif(path[i].issuer.isEqual(path[i].subject) === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(path[i].issuer.isEqual(path[i + 1].subject) === false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\tresultCode: 10,\r\n\t\t\t\t\t\t\tresultMessage: \"Incorrect name chaining\"\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check each certificate (except \"trusted root\") to be non-revoked\r\n\t\t\tif((_this.crls.length !== 0) || (_this.ocsps.length !== 0)) // If CRLs and OCSPs are empty then we consider all certificates to be valid\r\n\t\t\t{\r\n\t\t\t\tfor(let i = 0; i < (path.length - 1); i++)\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\tlet ocspResult = 2;\r\n\t\t\t\t\tlet crlResult = {\r\n\t\t\t\t\t\tstatus: 0,\r\n\t\t\t\t\t\tstatusMessage: \"\"\r\n\t\t\t\t\t};\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Check OCSPs first\r\n\t\t\t\t\tif(_this.ocsps.length !== 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tocspResult = await findOCSP(path[i], path[i + 1]);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tswitch(ocspResult)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\t\tresultCode: 12,\r\n\t\t\t\t\t\t\t\t\tresultMessage: \"One of certificates was revoked via OCSP response\"\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tcase 2: // continue to check the certificate with CRL\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Check CRLs\r\n\t\t\t\t\tif(_this.crls.length !== 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcrlResult = await findCRL(path[i]);\r\n\r\n\t\t\t\t\t\tif(crlResult.status === 0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfor(let j = 0; j < crlResult.result.length; j++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Check that the CRL issuer certificate have not been revoked\r\n\t\t\t\t\t\t\t\tconst isCertificateRevoked = crlResult.result[j].crl.isCertificateRevoked(path[i]);\r\n\t\t\t\t\t\t\t\tif(isCertificateRevoked)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\t\t\tresultCode: 12,\r\n\t\t\t\t\t\t\t\t\t\tresultMessage: \"One of certificates had been revoked\"\r\n\t\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Check that the CRL issuer certificate is a CA certificate\r\n\t\t\t\t\t\t\t\tconst isCertificateCA = await checkForCA(crlResult.result[j].certificate, true);\r\n\t\t\t\t\t\t\t\tif(isCertificateCA.result === false)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\t\t\tresultCode: 13,\r\n\t\t\t\t\t\t\t\t\t\tresultMessage: \"CRL issuer certificate is not a CA certificate or does not have crlSign flag\"\r\n\t\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(passedWhenNotRevValues === false)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthrow {\r\n\t\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\t\tresultCode: 11,\r\n\t\t\t\t\t\t\t\t\tresultMessage: `No revocation values found for one of certificates: ${crlResult.statusMessage}`\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(ocspResult === 2)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\tresultCode: 11,\r\n\t\t\t\t\t\t\t\tresultMessage: \"No revocation values found for one of certificates\"\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Check we do have links to revocation values inside issuer's certificate\r\n\t\t\t\t\tif((ocspResult === 2) && (crlResult.status === 2) && passedWhenNotRevValues)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst issuerCertificate = path[i + 1];\r\n\t\t\t\t\t\tlet extensionFound = false;\r\n\r\n\t\t\t\t\t\tif(\"extensions\" in issuerCertificate)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfor(const extension of issuerCertificate.extensions)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tswitch(extension.extnID)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tcase \"2.5.29.31\": // CRLDistributionPoints\r\n\t\t\t\t\t\t\t\t\tcase \"2.5.29.46\": // FreshestCRL\r\n\t\t\t\t\t\t\t\t\tcase \"1.3.6.1.5.5.7.1.1\": // AuthorityInfoAccess\r\n\t\t\t\t\t\t\t\t\t\textensionFound = true;\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif(extensionFound)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthrow {\r\n\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\tresultCode: 11,\r\n\t\t\t\t\t\t\t\tresultMessage: `No revocation values found for one of certificates: ${crlResult.statusMessage}`\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check each certificate (except \"end entity\") in the path to be a CA certificate\r\n\t\t\tfor(let i = 1; i < path.length; i++)\r\n\t\t\t{\r\n\t\t\t\tconst result = await checkForCA(path[i]);\r\n\t\t\t\tif(result.result === false)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: 14,\r\n\t\t\t\t\t\tresultMessage: \"One of intermediate certificates is not a CA certificate\"\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn {\r\n\t\t\t\tresult: true\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Do main work\r\n\t\t//region Initialize \"localCerts\" by value of \"_this.certs\" + \"_this.trustedCerts\" arrays\r\n\t\tlocalCerts.push(..._this.trustedCerts);\r\n\t\tlocalCerts.push(..._this.certs);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check all certificates for been unique\r\n\t\tfor(let i = 0; i < localCerts.length; i++)\r\n\t\t{\r\n\t\t\tfor(let j = 0; j < localCerts.length; j++)\r\n\t\t\t{\r\n\t\t\t\tif(i === j)\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t\r\n\t\t\t\tif(isEqualBuffer(localCerts[i].tbs, localCerts[j].tbs))\r\n\t\t\t\t{\r\n\t\t\t\t\tlocalCerts.splice(j, 1);\r\n\t\t\t\t\ti = 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet result;\r\n\t\tconst certificatePath = [localCerts[localCerts.length - 1]]; // The \"end entity\" certificate must be the least in \"certs\" array\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Build path for \"end entity\" certificate\r\n\t\tresult = await buildPath(localCerts[localCerts.length - 1]);\r\n\t\tif(result.length === 0)\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tresult: false,\r\n\t\t\t\tresultCode: 60,\r\n\t\t\t\tresultMessage: \"Unable to find certificate path\"\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Exclude certificate paths not ended with \"trusted roots\"\r\n\t\tfor(let i = 0; i < result.length; i++)\r\n\t\t{\r\n\t\t\tlet found = false;\r\n\t\t\t\r\n\t\t\tfor(let j = 0; j < (result[i]).length; j++)\r\n\t\t\t{\r\n\t\t\t\tconst certificate = (result[i])[j];\r\n\t\t\t\t\r\n\t\t\t\tfor(let k = 0; k < _this.trustedCerts.length; k++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(isEqualBuffer(certificate.tbs, _this.trustedCerts[k].tbs))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfound = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(found)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(!found)\r\n\t\t\t{\r\n\t\t\t\tresult.splice(i, 1);\r\n\t\t\t\ti = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif(result.length === 0)\r\n\t\t{\r\n\t\t\tthrow {\r\n\t\t\t\tresult: false,\r\n\t\t\t\tresultCode: 97,\r\n\t\t\t\tresultMessage: \"No valid certificate paths found\"\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find shortest certificate path (for the moment it is the only criteria)\r\n\t\tlet shortestLength = result[0].length;\r\n\t\tlet shortestIndex = 0;\r\n\t\t\r\n\t\tfor(let i = 0; i < result.length; i++)\r\n\t\t{\r\n\t\t\tif(result[i].length < shortestLength)\r\n\t\t\t{\r\n\t\t\t\tshortestLength = result[i].length;\r\n\t\t\t\tshortestIndex = i;\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create certificate path for basic check\r\n\t\tfor(let i = 0; i < result[shortestIndex].length; i++)\r\n\t\t\tcertificatePath.push((result[shortestIndex])[i]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Perform basic checking for all certificates in the path\r\n\t\tresult = await basicCheck(certificatePath, _this.checkDate);\r\n\t\tif(result.result === false)\r\n\t\t\tthrow result;\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn certificatePath;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Major verification function for certificate chain.\r\n\t * @param {{initialPolicySet, initialExplicitPolicy, initialPolicyMappingInhibit, initialInhibitPolicy, initialPermittedSubtreesSet, initialExcludedSubtreesSet, initialRequiredNameForms}} [parameters]\r\n\t * @returns {Promise}\r\n\t */\r\n\tasync verify(parameters = {})\r\n\t{\r\n\t\t//region Auxiliary functions for name constraints checking\r\n\t\tfunction compareDNSName(name, constraint)\r\n\t\t{\r\n\t\t\t/// <summary>Compare two dNSName values</summary>\r\n\t\t\t/// <param name=\"name\" type=\"String\">DNS from name</param>\r\n\t\t\t/// <param name=\"constraint\" type=\"String\">Constraint for DNS from name</param>\r\n\t\t\t/// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\t\t\t\r\n\t\t\t//region Make a \"string preparation\" for both name and constrain\r\n\t\t\tconst namePrepared = stringPrep(name);\r\n\t\t\tconst constraintPrepared = stringPrep(constraint);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Make a \"splitted\" versions of \"constraint\" and \"name\"\r\n\t\t\tconst nameSplitted = namePrepared.split(\".\");\r\n\t\t\tconst constraintSplitted = constraintPrepared.split(\".\");\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Length calculation and additional check\r\n\t\t\tconst nameLen = nameSplitted.length;\r\n\t\t\tconst constrLen = constraintSplitted.length;\r\n\t\t\t\r\n\t\t\tif((nameLen === 0) || (constrLen === 0) || (nameLen < constrLen))\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check that no part of \"name\" has zero length\r\n\t\t\tfor(let i = 0; i < nameLen; i++)\r\n\t\t\t{\r\n\t\t\t\tif(nameSplitted[i].length === 0)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check that no part of \"constraint\" has zero length\r\n\t\t\tfor(let i = 0; i < constrLen; i++)\r\n\t\t\t{\r\n\t\t\t\tif(constraintSplitted[i].length === 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(i === 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(constrLen === 1)\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check that \"name\" has a tail as \"constraint\"\r\n\t\t\t\r\n\t\t\tfor(let i = 0; i < constrLen; i++)\r\n\t\t\t{\r\n\t\t\t\tif(constraintSplitted[constrLen - 1 - i].length === 0)\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t\r\n\t\t\t\tif(nameSplitted[nameLen - 1 - i].localeCompare(constraintSplitted[constrLen - 1 - i]) !== 0)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\tfunction compareRFC822Name(name, constraint)\r\n\t\t{\r\n\t\t\t/// <summary>Compare two rfc822Name values</summary>\r\n\t\t\t/// <param name=\"name\" type=\"String\">E-mail address from name</param>\r\n\t\t\t/// <param name=\"constraint\" type=\"String\">Constraint for e-mail address from name</param>\r\n\t\t\t/// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\t\t\t\r\n\t\t\t//region Make a \"string preparation\" for both name and constrain\r\n\t\t\tconst namePrepared = stringPrep(name);\r\n\t\t\tconst constraintPrepared = stringPrep(constraint);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Make a \"splitted\" versions of \"constraint\" and \"name\"\r\n\t\t\tconst nameSplitted = namePrepared.split(\"@\");\r\n\t\t\tconst constraintSplitted = constraintPrepared.split(\"@\");\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Splitted array length checking\r\n\t\t\tif((nameSplitted.length === 0) || (constraintSplitted.length === 0) || (nameSplitted.length < constraintSplitted.length))\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(constraintSplitted.length === 1)\r\n\t\t\t{\r\n\t\t\t\tconst result = compareDNSName(nameSplitted[1], constraintSplitted[0]);\r\n\t\t\t\t\r\n\t\t\t\tif(result)\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Make a \"splitted\" versions of domain name from \"constraint\" and \"name\"\r\n\t\t\t\t\tconst ns = nameSplitted[1].split(\".\");\r\n\t\t\t\t\tconst cs = constraintSplitted[0].split(\".\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(cs[0].length === 0)\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn ns.length === cs.length;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn (namePrepared.localeCompare(constraintPrepared) === 0);\r\n\t\t}\r\n\t\t\r\n\t\tfunction compareUniformResourceIdentifier(name, constraint)\r\n\t\t{\r\n\t\t\t/// <summary>Compare two uniformResourceIdentifier values</summary>\r\n\t\t\t/// <param name=\"name\" type=\"String\">uniformResourceIdentifier from name</param>\r\n\t\t\t/// <param name=\"constraint\" type=\"String\">Constraint for uniformResourceIdentifier from name</param>\r\n\t\t\t/// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\t\t\t\r\n\t\t\t//region Make a \"string preparation\" for both name and constrain\r\n\t\t\tlet namePrepared = stringPrep(name);\r\n\t\t\tconst constraintPrepared = stringPrep(constraint);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Find out a major URI part to compare with\r\n\t\t\tconst ns = namePrepared.split(\"/\");\r\n\t\t\tconst cs = constraintPrepared.split(\"/\");\r\n\t\t\t\r\n\t\t\tif(cs.length > 1) // Malformed constraint\r\n\t\t\t\treturn false;\r\n\t\t\t\r\n\t\t\tif(ns.length > 1) // Full URI string\r\n\t\t\t{\r\n\t\t\t\tfor(let i = 0; i < ns.length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((ns[i].length > 0) && (ns[i].charAt(ns[i].length - 1) !== \":\"))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst nsPort = ns[i].split(\":\");\r\n\t\t\t\t\t\tnamePrepared = nsPort[0];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tconst result = compareDNSName(namePrepared, constraintPrepared);\r\n\t\t\t\r\n\t\t\tif(result)\r\n\t\t\t{\r\n\t\t\t\t//region Make a \"splitted\" versions of \"constraint\" and \"name\"\r\n\t\t\t\tconst nameSplitted = namePrepared.split(\".\");\r\n\t\t\t\tconst constraintSplitted = constraintPrepared.split(\".\");\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tif(constraintSplitted[0].length === 0)\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t\r\n\t\t\t\treturn nameSplitted.length === constraintSplitted.length;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tfunction compareIPAddress(name, constraint)\r\n\t\t{\r\n\t\t\t/// <summary>Compare two iPAddress values</summary>\r\n\t\t\t/// <param name=\"name\" type=\"in_window.org.pkijs.asn1.OCTETSTRING\">iPAddress from name</param>\r\n\t\t\t/// <param name=\"constraint\" type=\"in_window.org.pkijs.asn1.OCTETSTRING\">Constraint for iPAddress from name</param>\r\n\t\t\t/// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\t\t\t\r\n\t\t\t//region Common variables\r\n\t\t\tconst nameView = new Uint8Array(name.valueBlock.valueHex);\r\n\t\t\tconst constraintView = new Uint8Array(constraint.valueBlock.valueHex);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Work with IPv4 addresses\r\n\t\t\tif((nameView.length === 4) && (constraintView.length === 8))\r\n\t\t\t{\r\n\t\t\t\tfor(let i = 0; i < 4; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((nameView[i] ^ constraintView[i]) & constraintView[i + 4])\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Work with IPv6 addresses\r\n\t\t\tif((nameView.length === 16) && (constraintView.length === 32))\r\n\t\t\t{\r\n\t\t\t\tfor(let i = 0; i < 16; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((nameView[i] ^ constraintView[i]) & constraintView[i + 16])\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tfunction compareDirectoryName(name, constraint)\r\n\t\t{\r\n\t\t\t/// <summary>Compare two directoryName values</summary>\r\n\t\t\t/// <param name=\"name\" type=\"in_window.org.pkijs.simpl.RDN\">directoryName from name</param>\r\n\t\t\t/// <param name=\"constraint\" type=\"in_window.org.pkijs.simpl.RDN\">Constraint for directoryName from name</param>\r\n\t\t\t/// <param name=\"any\" type=\"Boolean\">Boolean flag - should be comparision interrupted after first match or we need to match all \"constraints\" parts</param>\r\n\t\t\t/// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\t\t\t\r\n\t\t\t//region Initial check\r\n\t\t\tif((name.typesAndValues.length === 0) || (constraint.typesAndValues.length === 0))\r\n\t\t\t\treturn true;\r\n\t\t\t\r\n\t\t\tif(name.typesAndValues.length < constraint.typesAndValues.length)\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Initial variables\r\n\t\t\tlet result = true;\r\n\t\t\tlet nameStart = 0;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tfor(let i = 0; i < constraint.typesAndValues.length; i++)\r\n\t\t\t{\r\n\t\t\t\tlet localResult = false;\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = nameStart; j < name.typesAndValues.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tlocalResult = name.typesAndValues[j].isEqual(constraint.typesAndValues[i]);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(name.typesAndValues[j].type === constraint.typesAndValues[i].type)\r\n\t\t\t\t\t\tresult = result && localResult;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(localResult === true)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif((nameStart === 0) || (nameStart === j))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tnameStart = j + 1;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse // Structure of \"name\" must be the same with \"constraint\"\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(localResult === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn (nameStart === 0) ? false : result;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\t//region Initial checks\r\n\t\t\tif(this.certs.length === 0)\r\n\t\t\t\tthrow \"Empty certificate array\";\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Get input variables\r\n\t\t\tlet passedWhenNotRevValues = false;\r\n\r\n\t\t\tif(\"passedWhenNotRevValues\" in parameters)\r\n\t\t\t\tpassedWhenNotRevValues = parameters.passedWhenNotRevValues;\r\n\r\n\t\t\tlet initialPolicySet = [];\r\n\t\t\tinitialPolicySet.push(\"2.5.29.32.0\"); // \"anyPolicy\"\r\n\t\t\t\r\n\t\t\tlet initialExplicitPolicy = false;\r\n\t\t\tlet initialPolicyMappingInhibit = false;\r\n\t\t\tlet initialInhibitPolicy = false;\r\n\t\t\t\r\n\t\t\tlet initialPermittedSubtreesSet = []; // Array of \"simpl.x509.GeneralSubtree\"\r\n\t\t\tlet initialExcludedSubtreesSet = [];  // Array of \"simpl.x509.GeneralSubtree\"\r\n\t\t\tlet initialRequiredNameForms = [];    // Array of \"simpl.x509.GeneralSubtree\"\r\n\t\t\t\r\n\t\t\tif(\"initialPolicySet\" in parameters)\r\n\t\t\t\tinitialPolicySet = parameters.initialPolicySet;\r\n\t\t\t\r\n\t\t\tif(\"initialExplicitPolicy\" in parameters)\r\n\t\t\t\tinitialExplicitPolicy = parameters.initialExplicitPolicy;\r\n\t\t\t\r\n\t\t\tif(\"initialPolicyMappingInhibit\" in parameters)\r\n\t\t\t\tinitialPolicyMappingInhibit = parameters.initialPolicyMappingInhibit;\r\n\t\t\t\r\n\t\t\tif(\"initialInhibitPolicy\" in parameters)\r\n\t\t\t\tinitialInhibitPolicy = parameters.initialInhibitPolicy;\r\n\t\t\t\r\n\t\t\tif(\"initialPermittedSubtreesSet\" in parameters)\r\n\t\t\t\tinitialPermittedSubtreesSet = parameters.initialPermittedSubtreesSet;\r\n\t\t\t\r\n\t\t\tif(\"initialExcludedSubtreesSet\" in parameters)\r\n\t\t\t\tinitialExcludedSubtreesSet = parameters.initialExcludedSubtreesSet;\r\n\t\t\t\r\n\t\t\tif(\"initialRequiredNameForms\" in parameters)\r\n\t\t\t\tinitialRequiredNameForms = parameters.initialRequiredNameForms;\r\n\t\t\t\r\n\t\t\tlet explicitPolicyIndicator = initialExplicitPolicy;\r\n\t\t\tlet policyMappingInhibitIndicator = initialPolicyMappingInhibit;\r\n\t\t\tlet inhibitAnyPolicyIndicator = initialInhibitPolicy;\r\n\t\t\t\r\n\t\t\tconst pendingConstraints = new Array(3);\r\n\t\t\tpendingConstraints[0] = false; // For \"explicitPolicyPending\"\r\n\t\t\tpendingConstraints[1] = false; // For \"policyMappingInhibitPending\"\r\n\t\t\tpendingConstraints[2] = false; // For \"inhibitAnyPolicyPending\"\r\n\t\t\t\r\n\t\t\tlet explicitPolicyPending = 0;\r\n\t\t\tlet policyMappingInhibitPending = 0;\r\n\t\t\tlet inhibitAnyPolicyPending = 0;\r\n\t\t\t\r\n\t\t\tlet permittedSubtrees = initialPermittedSubtreesSet;\r\n\t\t\tlet excludedSubtrees = initialExcludedSubtreesSet;\r\n\t\t\tconst requiredNameForms = initialRequiredNameForms;\r\n\t\t\t\r\n\t\t\tlet pathDepth = 1;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Sorting certificates in the chain array\r\n\t\t\tthis.certs = await this.sort(passedWhenNotRevValues);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Work with policies\r\n\t\t\t//region Support variables\r\n\t\t\tconst allPolicies = []; // Array of all policies (string values)\r\n\t\t\tallPolicies.push(\"2.5.29.32.0\"); // Put \"anyPolicy\" at first place\r\n\t\t\t\r\n\t\t\tconst policiesAndCerts = []; // In fact \"array of array\" where rows are for each specific policy, column for each certificate and value is \"true/false\"\r\n\t\t\t\r\n\t\t\tconst anyPolicyArray = new Array(this.certs.length - 1); // Minus \"trusted anchor\"\r\n\t\t\tfor(let ii = 0; ii < (this.certs.length - 1); ii++)\r\n\t\t\t\tanyPolicyArray[ii] = true;\r\n\t\t\t\r\n\t\t\tpoliciesAndCerts.push(anyPolicyArray);\r\n\t\t\t\r\n\t\t\tconst policyMappings = new Array(this.certs.length - 1); // Array of \"PolicyMappings\" for each certificate\r\n\t\t\tconst certPolicies = new Array(this.certs.length - 1); // Array of \"CertificatePolicies\" for each certificate\r\n\t\t\t\r\n\t\t\tlet explicitPolicyStart = (explicitPolicyIndicator) ? (this.certs.length - 1) : (-1);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Gather all neccessary information from certificate chain\r\n\t\t\tfor(let i = (this.certs.length - 2); i >= 0; i--, pathDepth++)\r\n\t\t\t{\r\n\t\t\t\tif(\"extensions\" in this.certs[i])\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Get information about certificate extensions\r\n\t\t\t\t\tfor(let j = 0; j < this.certs[i].extensions.length; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region CertificatePolicies\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.32\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcertPolicies[i] = this.certs[i].extensions[j].parsedValue;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t//region Remove entry from \"anyPolicies\" for the certificate\r\n\t\t\t\t\t\t\tfor(let s = 0; s < allPolicies.length; s++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(allPolicies[s] === \"2.5.29.32.0\")\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tdelete (policiesAndCerts[s])[i];\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tfor(let k = 0; k < this.certs[i].extensions[j].parsedValue.certificatePolicies.length; k++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlet policyIndex = (-1);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t//region Try to find extension in \"allPolicies\" array\r\n\t\t\t\t\t\t\t\tfor(let s = 0; s < allPolicies.length; s++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(this.certs[i].extensions[j].parsedValue.certificatePolicies[k].policyIdentifier === allPolicies[s])\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tpolicyIndex = s;\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif(policyIndex === (-1))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tallPolicies.push(this.certs[i].extensions[j].parsedValue.certificatePolicies[k].policyIdentifier);\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tconst certArray = new Array(this.certs.length - 1);\r\n\t\t\t\t\t\t\t\t\tcertArray[i] = true;\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tpoliciesAndCerts.push(certArray);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t(policiesAndCerts[policyIndex])[i] = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region PolicyMappings\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.33\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(policyMappingInhibitIndicator)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\t\tresultCode: 98,\r\n\t\t\t\t\t\t\t\t\tresultMessage: \"Policy mapping prohibited\"\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tpolicyMappings[i] = this.certs[i].extensions[j].parsedValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region PolicyConstraints\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.36\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(explicitPolicyIndicator === false)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region requireExplicitPolicy\r\n\t\t\t\t\t\t\t\tif(this.certs[i].extensions[j].parsedValue.requireExplicitPolicy === 0)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\texplicitPolicyIndicator = true;\r\n\t\t\t\t\t\t\t\t\texplicitPolicyStart = i;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(pendingConstraints[0] === false)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tpendingConstraints[0] = true;\r\n\t\t\t\t\t\t\t\t\t\texplicitPolicyPending = this.certs[i].extensions[j].parsedValue.requireExplicitPolicy;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\texplicitPolicyPending = (explicitPolicyPending > this.certs[i].extensions[j].parsedValue.requireExplicitPolicy) ? this.certs[i].extensions[j].parsedValue.requireExplicitPolicy : explicitPolicyPending;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t//region inhibitPolicyMapping\r\n\t\t\t\t\t\t\t\tif(this.certs[i].extensions[j].parsedValue.inhibitPolicyMapping === 0)\r\n\t\t\t\t\t\t\t\t\tpolicyMappingInhibitIndicator = true;\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(pendingConstraints[1] === false)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tpendingConstraints[1] = true;\r\n\t\t\t\t\t\t\t\t\t\tpolicyMappingInhibitPending = this.certs[i].extensions[j].parsedValue.inhibitPolicyMapping + 1;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\tpolicyMappingInhibitPending = (policyMappingInhibitPending > (this.certs[i].extensions[j].parsedValue.inhibitPolicyMapping + 1)) ? (this.certs[i].extensions[j].parsedValue.inhibitPolicyMapping + 1) : policyMappingInhibitPending;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region InhibitAnyPolicy\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.54\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(inhibitAnyPolicyIndicator === false)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(this.certs[i].extensions[j].parsedValue.valueBlock.valueDec === 0)\r\n\t\t\t\t\t\t\t\t\tinhibitAnyPolicyIndicator = true;\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(pendingConstraints[2] === false)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tpendingConstraints[2] = true;\r\n\t\t\t\t\t\t\t\t\t\tinhibitAnyPolicyPending = this.certs[i].extensions[j].parsedValue.valueBlock.valueDec;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\tinhibitAnyPolicyPending = (inhibitAnyPolicyPending > this.certs[i].extensions[j].parsedValue.valueBlock.valueDec) ? this.certs[i].extensions[j].parsedValue.valueBlock.valueDec : inhibitAnyPolicyPending;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Check \"inhibitAnyPolicyIndicator\"\r\n\t\t\t\t\tif(inhibitAnyPolicyIndicator === true)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet policyIndex = (-1);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Find \"anyPolicy\" index\r\n\t\t\t\t\t\tfor(let searchAnyPolicy = 0; searchAnyPolicy < allPolicies.length; searchAnyPolicy++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(allPolicies[searchAnyPolicy] === \"2.5.29.32.0\")\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tpolicyIndex = searchAnyPolicy;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(policyIndex !== (-1))\r\n\t\t\t\t\t\t\tdelete (policiesAndCerts[0])[i]; // Unset value to \"undefined\" for \"anyPolicies\" value for current certificate\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Process with \"pending constraints\"\r\n\t\t\t\t\tif(explicitPolicyIndicator === false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(pendingConstraints[0] === true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\texplicitPolicyPending--;\r\n\t\t\t\t\t\t\tif(explicitPolicyPending === 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\texplicitPolicyIndicator = true;\r\n\t\t\t\t\t\t\t\texplicitPolicyStart = i;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tpendingConstraints[0] = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(policyMappingInhibitIndicator === false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(pendingConstraints[1] === true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpolicyMappingInhibitPending--;\r\n\t\t\t\t\t\t\tif(policyMappingInhibitPending === 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tpolicyMappingInhibitIndicator = true;\r\n\t\t\t\t\t\t\t\tpendingConstraints[1] = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(inhibitAnyPolicyIndicator === false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(pendingConstraints[2] === true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tinhibitAnyPolicyPending--;\r\n\t\t\t\t\t\t\tif(inhibitAnyPolicyPending === 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tinhibitAnyPolicyIndicator = true;\r\n\t\t\t\t\t\t\t\tpendingConstraints[2] = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Working with policy mappings\r\n\t\t\tfor(let i = 0; i < (this.certs.length - 1); i++)\r\n\t\t\t{\r\n\t\t\t\t//region Check that there is \"policy mapping\" for level \"i + 1\"\r\n\t\t\t\tif((i < (this.certs.length - 2)) && (typeof policyMappings[i + 1] !== \"undefined\"))\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let k = 0; k < policyMappings[i + 1].mappings.length; k++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region Check that we do not have \"anyPolicy\" in current mapping\r\n\t\t\t\t\t\tif((policyMappings[i + 1].mappings[k].issuerDomainPolicy === \"2.5.29.32.0\") || (policyMappings[i + 1].mappings[k].subjectDomainPolicy === \"2.5.29.32.0\"))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\tresultCode: 99,\r\n\t\t\t\t\t\t\t\tresultMessage: \"The \\\"anyPolicy\\\" should not be a part of policy mapping scheme\"\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\tlet issuerDomainPolicyIndex = (-1);\r\n\t\t\t\t\t\tlet subjectDomainPolicyIndex = (-1);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Search for index of policies indedes\r\n\t\t\t\t\t\tfor(let n = 0; n < allPolicies.length; n++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(allPolicies[n] === policyMappings[i + 1].mappings[k].issuerDomainPolicy)\r\n\t\t\t\t\t\t\t\tissuerDomainPolicyIndex = n;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(allPolicies[n] === policyMappings[i + 1].mappings[k].subjectDomainPolicy)\r\n\t\t\t\t\t\t\t\tsubjectDomainPolicyIndex = n;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Delete existing \"issuerDomainPolicy\" because on the level we mapped the policy to another one\r\n\t\t\t\t\t\tif(typeof (policiesAndCerts[issuerDomainPolicyIndex])[i] !== \"undefined\")\r\n\t\t\t\t\t\t\tdelete (policiesAndCerts[issuerDomainPolicyIndex])[i];\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Check all policies for the certificate\r\n\t\t\t\t\t\tfor(let j = 0; j < certPolicies[i].certificatePolicies.length; j++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(policyMappings[i + 1].mappings[k].subjectDomainPolicy === certPolicies[i].certificatePolicies[j].policyIdentifier)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Set mapped policy for current certificate\r\n\t\t\t\t\t\t\t\tif((issuerDomainPolicyIndex !== (-1)) && (subjectDomainPolicyIndex !== (-1)))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let m = 0; m <= i; m++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif(typeof (policiesAndCerts[subjectDomainPolicyIndex])[m] !== \"undefined\")\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t(policiesAndCerts[issuerDomainPolicyIndex])[m] = true;\r\n\t\t\t\t\t\t\t\t\t\t\tdelete (policiesAndCerts[subjectDomainPolicyIndex])[m];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Working with \"explicitPolicyIndicator\" and \"anyPolicy\"\r\n\t\t\tfor(let i = 0; i < allPolicies.length; i++)\r\n\t\t\t{\r\n\t\t\t\tif(allPolicies[i] === \"2.5.29.32.0\")\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let j = 0; j < explicitPolicyStart; j++)\r\n\t\t\t\t\t\tdelete (policiesAndCerts[i])[j];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Create \"set of authorities-constrained policies\"\r\n\t\t\tconst authConstrPolicies = [];\r\n\t\t\t\r\n\t\t\tfor(let i = 0; i < policiesAndCerts.length; i++)\r\n\t\t\t{\r\n\t\t\t\tlet found = true;\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < (this.certs.length - 1); j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet anyPolicyFound = false;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((j < explicitPolicyStart) && (allPolicies[i] === \"2.5.29.32.0\") && (allPolicies.length > 1))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfound = false;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(typeof (policiesAndCerts[i])[j] === \"undefined\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(j >= explicitPolicyStart)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//region Search for \"anyPolicy\" in the policy set\r\n\t\t\t\t\t\t\tfor(let k = 0; k < allPolicies.length; k++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(allPolicies[k] === \"2.5.29.32.0\")\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif((policiesAndCerts[k])[j] === true)\r\n\t\t\t\t\t\t\t\t\t\tanyPolicyFound = true;\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(!anyPolicyFound)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfound = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(found === true)\r\n\t\t\t\t\tauthConstrPolicies.push(allPolicies[i]);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Create \"set of user-constrained policies\"\r\n\t\t\tlet userConstrPolicies = [];\r\n\t\t\t\r\n\t\t\tif((initialPolicySet.length === 1) && (initialPolicySet[0] === \"2.5.29.32.0\") && (explicitPolicyIndicator === false))\r\n\t\t\t\tuserConstrPolicies = initialPolicySet;\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif((authConstrPolicies.length === 1) && (authConstrPolicies[0] === \"2.5.29.32.0\"))\r\n\t\t\t\t\tuserConstrPolicies = initialPolicySet;\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let i = 0; i < authConstrPolicies.length; i++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor(let j = 0; j < initialPolicySet.length; j++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif((initialPolicySet[j] === authConstrPolicies[i]) || (initialPolicySet[j] === \"2.5.29.32.0\"))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tuserConstrPolicies.push(authConstrPolicies[i]);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Combine output object\r\n\t\t\tconst policyResult = {\r\n\t\t\t\tresult: (userConstrPolicies.length > 0),\r\n\t\t\t\tresultCode: 0,\r\n\t\t\t\tresultMessage: (userConstrPolicies.length > 0) ? \"\" : \"Zero \\\"userConstrPolicies\\\" array, no intersections with \\\"authConstrPolicies\\\"\",\r\n\t\t\t\tauthConstrPolicies,\r\n\t\t\t\tuserConstrPolicies,\r\n\t\t\t\texplicitPolicyIndicator,\r\n\t\t\t\tpolicyMappings,\r\n\t\t\t\tcertificatePath: this.certs\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tif(userConstrPolicies.length === 0)\r\n\t\t\t\treturn policyResult;\r\n\t\t\t//endregion\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Work with name constraints\r\n\t\t\t//region Check a result from \"policy checking\" part\r\n\t\t\tif(policyResult.result === false)\r\n\t\t\t\treturn policyResult;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check all certificates, excluding \"trust anchor\"\r\n\t\t\tpathDepth = 1;\r\n\t\t\t\r\n\t\t\tfor(let i = (this.certs.length - 2); i >= 0; i--, pathDepth++)\r\n\t\t\t{\r\n\t\t\t\t//region Support variables\r\n\t\t\t\tlet subjectAltNames = [];\r\n\t\t\t\t\r\n\t\t\t\tlet certPermittedSubtrees = [];\r\n\t\t\t\tlet certExcludedSubtrees = [];\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tif(\"extensions\" in this.certs[i])\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let j = 0; j < this.certs[i].extensions.length; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region NameConstraints\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.30\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(\"permittedSubtrees\" in this.certs[i].extensions[j].parsedValue)\r\n\t\t\t\t\t\t\t\tcertPermittedSubtrees = certPermittedSubtrees.concat(this.certs[i].extensions[j].parsedValue.permittedSubtrees);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(\"excludedSubtrees\" in this.certs[i].extensions[j].parsedValue)\r\n\t\t\t\t\t\t\t\tcertExcludedSubtrees = certExcludedSubtrees.concat(this.certs[i].extensions[j].parsedValue.excludedSubtrees);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region SubjectAltName\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.17\")\r\n\t\t\t\t\t\t\tsubjectAltNames = subjectAltNames.concat(this.certs[i].extensions[j].parsedValue.altNames);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t//region Checking for \"required name forms\"\r\n\t\t\t\tlet formFound = (requiredNameForms.length <= 0);\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < requiredNameForms.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tswitch(requiredNameForms[j].base.type)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase 4: // directoryName\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(requiredNameForms[j].base.value.typesAndValues.length !== this.certs[i].subject.typesAndValues.length)\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tformFound = true;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tfor(let k = 0; k < this.certs[i].subject.typesAndValues.length; k++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(this.certs[i].subject.typesAndValues[k].type !== requiredNameForms[j].base.value.typesAndValues[k].type)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tformFound = false;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(formFound === true)\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault: // ??? Probably here we should reject the certificate ???\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(formFound === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tpolicyResult.result = false;\r\n\t\t\t\t\tpolicyResult.resultCode = 21;\r\n\t\t\t\t\tpolicyResult.resultMessage = \"No neccessary name form found\";\r\n\t\t\t\t\t\r\n\t\t\t\t\tthrow policyResult;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Checking for \"permited sub-trees\"\r\n\t\t\t\t//region Make groups for all types of constraints\r\n\t\t\t\tconst constrGroups = []; // Array of array for groupped constraints\r\n\t\t\t\tconstrGroups[0] = []; // rfc822Name\r\n\t\t\t\tconstrGroups[1] = []; // dNSName\r\n\t\t\t\tconstrGroups[2] = []; // directoryName\r\n\t\t\t\tconstrGroups[3] = []; // uniformResourceIdentifier\r\n\t\t\t\tconstrGroups[4] = []; // iPAddress\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < permittedSubtrees.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tswitch(permittedSubtrees[j].base.type)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region rfc822Name\r\n\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\tconstrGroups[0].push(permittedSubtrees[j]);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region dNSName\r\n\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\tconstrGroups[1].push(permittedSubtrees[j]);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region directoryName\r\n\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t\tconstrGroups[2].push(permittedSubtrees[j]);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region uniformResourceIdentifier\r\n\t\t\t\t\t\tcase 6:\r\n\t\t\t\t\t\t\tconstrGroups[3].push(permittedSubtrees[j]);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region iPAddress\r\n\t\t\t\t\t\tcase 7:\r\n\t\t\t\t\t\t\tconstrGroups[4].push(permittedSubtrees[j]);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region default\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Check name constraints groupped by type, one-by-one\r\n\t\t\t\tfor(let p = 0; p < 5; p++)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet groupPermitted = false;\r\n\t\t\t\t\tlet valueExists = false;\r\n\t\t\t\t\tconst group = constrGroups[p];\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor(let j = 0; j < group.length; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tswitch(p)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//region rfc822Name\r\n\t\t\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 1) // rfc822Name\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\t\t\t\tgroupPermitted = groupPermitted || compareRFC822Name(subjectAltNames[k].value, group[j].base.value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse // Try to find out \"emailAddress\" inside \"subject\"\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let k = 0; k < this.certs[i].subject.typesAndValues.length; k++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif((this.certs[i].subject.typesAndValues[k].type === \"1.2.840.113549.1.9.1\") ||    // PKCS#9 e-mail address\r\n\t\t\t\t\t\t\t\t\t\t\t(this.certs[i].subject.typesAndValues[k].type === \"0.9.2342.19200300.100.1.3\")) // RFC1274 \"rfc822Mailbox\" e-mail address\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\t\t\t\tgroupPermitted = groupPermitted || compareRFC822Name(this.certs[i].subject.typesAndValues[k].value.valueBlock.value, group[j].base.value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region dNSName\r\n\t\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 2) // dNSName\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\t\t\t\tgroupPermitted = groupPermitted || compareDNSName(subjectAltNames[k].value, group[j].base.value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region directoryName\r\n\t\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\tgroupPermitted = compareDirectoryName(this.certs[i].subject, group[j].base.value);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region uniformResourceIdentifier\r\n\t\t\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 6) // uniformResourceIdentifier\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\t\t\t\tgroupPermitted = groupPermitted || compareUniformResourceIdentifier(subjectAltNames[k].value, group[j].base.value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region iPAddress\r\n\t\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 7) // iPAddress\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\t\t\t\tgroupPermitted = groupPermitted || compareIPAddress(subjectAltNames[k].value, group[j].base.value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region default\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(groupPermitted)\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((groupPermitted === false) && (group.length > 0) && valueExists)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpolicyResult.result = false;\r\n\t\t\t\t\t\tpolicyResult.resultCode = 41;\r\n\t\t\t\t\t\tpolicyResult.resultMessage = \"Failed to meet \\\"permitted sub-trees\\\" name constraint\";\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tthrow policyResult;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Checking for \"excluded sub-trees\"\r\n\t\t\t\tlet excluded = false;\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < excludedSubtrees.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tswitch(excludedSubtrees[j].base.type)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region rfc822Name\r\n\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\tif(subjectAltNames.length >= 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 1) // rfc822Name\r\n\t\t\t\t\t\t\t\t\t\texcluded = excluded || compareRFC822Name(subjectAltNames[k].value, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse // Try to find out \"emailAddress\" inside \"subject\"\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor(let k = 0; k < this.certs[i].subject.typesAndValues.length; k++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif((this.certs[i].subject.typesAndValues[k].type === \"1.2.840.113549.1.9.1\") ||    // PKCS#9 e-mail address\r\n\t\t\t\t\t\t\t\t\t\t(this.certs[i].subject.typesAndValues[k].type === \"0.9.2342.19200300.100.1.3\")) // RFC1274 \"rfc822Mailbox\" e-mail address\r\n\t\t\t\t\t\t\t\t\t\texcluded = excluded || compareRFC822Name(this.certs[i].subject.typesAndValues[k].value.valueBlock.value, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region dNSName\r\n\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 2) // dNSName\r\n\t\t\t\t\t\t\t\t\t\texcluded = excluded || compareDNSName(subjectAltNames[k].value, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region directoryName\r\n\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t\texcluded = excluded || compareDirectoryName(this.certs[i].subject, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region uniformResourceIdentifier\r\n\t\t\t\t\t\tcase 6:\r\n\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 6) // uniformResourceIdentifier\r\n\t\t\t\t\t\t\t\t\t\texcluded = excluded || compareUniformResourceIdentifier(subjectAltNames[k].value, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region iPAddress\r\n\t\t\t\t\t\tcase 7:\r\n\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 7) // iPAddress\r\n\t\t\t\t\t\t\t\t\t\texcluded = excluded || compareIPAddress(subjectAltNames[k].value, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region default\r\n\t\t\t\t\t\tdefault: // No action, but probably here we need to create a warning for \"malformed constraint\"\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(excluded)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(excluded === true)\r\n\t\t\t\t{\r\n\t\t\t\t\tpolicyResult.result = false;\r\n\t\t\t\t\tpolicyResult.resultCode = 42;\r\n\t\t\t\t\tpolicyResult.resultMessage = \"Failed to meet \\\"excluded sub-trees\\\" name constraint\";\r\n\t\t\t\t\t\r\n\t\t\t\t\tthrow policyResult;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Append \"cert_..._subtrees\" to \"..._subtrees\"\r\n\t\t\t\tpermittedSubtrees = permittedSubtrees.concat(certPermittedSubtrees);\r\n\t\t\t\texcludedSubtrees = excludedSubtrees.concat(certExcludedSubtrees);\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn policyResult;\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\tcatch(error)\r\n\t\t{\r\n\t\t\tif(error instanceof Object)\r\n\t\t\t{\r\n\t\t\t\tif(\"resultMessage\" in error)\r\n\t\t\t\t\treturn error;\r\n\t\t\t\t\r\n\t\t\t\tif(\"message\" in error)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: -1,\r\n\t\t\t\t\t\tresultMessage: error.message\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn {\r\n\t\t\t\tresult: false,\r\n\t\t\t\tresultCode: -1,\r\n\t\t\t\tresultMessage: error\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"CertificateChainValidationEngine.js"}