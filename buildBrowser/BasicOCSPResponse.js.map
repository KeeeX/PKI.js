{"version":3,"sources":["../src/BasicOCSPResponse.js"],"names":["BasicOCSPResponse","parameters","tbsResponseData","defaultValues","signatureAlgorithm","signature","certs","fromSchema","schema","asn1","asn1js","compareSchema","verified","Error","ResponseData","result","AlgorithmIdentifier","Array","from","element","Certificate","outputArray","push","toSchema","Constructed","idBlock","tagClass","tagNumber","value","Sequence","_object","toJSON","certificate","issuerCertificate","sequence","Promise","resolve","isForCertificate","status","hashesObject","certIDs","certIDPromises","responses","response","hashAlgorithm","certID","algorithmId","reject","name","CertID","createForCertificate","then","all","id","isEqual","certStatus","isConstructed","ex","privateKey","engine","subtle","getSignatureParameters","tbs","toBER","signWithPrivateKey","BitString","valueHex","signerCert","certIndex","trustedCerts","_this","checkCA","cert","issuer","serialNumber","isCA","extensions","extension","extnID","parsedValue","cA","crypto","responderID","RelativeDistinguishedNames","entries","index","subject","OctetString","digest","Uint8Array","subjectPublicKeyInfo","subjectPublicKey","valueBlock","results","promiseResults","additionalCerts","promiseResult","certChain","CertificateChainValidationEngine","verify","verificationResult","error","Object","resultMessage","promiseError","verifyWithPublicKey","memberName","memberValue","comparisonResult","compareWithDefault","producedAt","responseExtensions","length","names","blockName","optional","Repeated"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, isEqualBuffer, clearProps } from \"pvutils\";\r\nimport { getAlgorithmByOID, getCrypto, getEngine } from \"./common.js\";\r\nimport ResponseData from \"./ResponseData.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport Certificate from \"./Certificate.js\";\r\nimport CertID from \"./CertID.js\";\r\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\";\r\nimport CertificateChainValidationEngine from \"./CertificateChainValidationEngine.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class BasicOCSPResponse\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for BasicOCSPResponse class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ResponseData}\r\n\t\t * @desc tbsResponseData\r\n\t\t */\r\n\t\tthis.tbsResponseData = getParametersValue(parameters, \"tbsResponseData\", BasicOCSPResponse.defaultValues(\"tbsResponseData\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", BasicOCSPResponse.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @desc signature\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", BasicOCSPResponse.defaultValues(\"signature\"));\r\n\t\t\r\n\t\tif(\"certs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Certificate>}\r\n\t\t\t * @desc certs\r\n\t\t\t */\r\n\t\t\tthis.certs = getParametersValue(parameters, \"certs\", BasicOCSPResponse.defaultValues(\"certs\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbsResponseData\":\r\n\t\t\t\treturn new ResponseData();\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for BasicOCSPResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"type\":\r\n\t\t\t\t{\r\n\t\t\t\t\t// noinspection OverlyComplexBooleanExpressionJS\r\n\t\t\t\t\tlet comparisonResult = ((ResponseData.compareWithDefault(\"tbs\", memberValue.tbs)) &&\r\n\t\t\t\t\t(ResponseData.compareWithDefault(\"responderID\", memberValue.responderID)) &&\r\n\t\t\t\t\t(ResponseData.compareWithDefault(\"producedAt\", memberValue.producedAt)) &&\r\n\t\t\t\t\t(ResponseData.compareWithDefault(\"responses\", memberValue.responses)));\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(\"responseExtensions\" in memberValue)\r\n\t\t\t\t\t\tcomparisonResult = comparisonResult && (ResponseData.compareWithDefault(\"responseExtensions\", memberValue.responseExtensions));\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn comparisonResult;\r\n\t\t\t\t}\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn (memberValue.isEqual(BasicOCSPResponse.defaultValues(memberName)));\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for BasicOCSPResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * BasicOCSPResponse       ::= SEQUENCE {\r\n\t *    tbsResponseData      ResponseData,\r\n\t *    signatureAlgorithm   AlgorithmIdentifier,\r\n\t *    signature            BIT STRING,\r\n\t *    certs            [0] EXPLICIT SEQUENCE OF Certificate OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [tbsResponseData]\r\n\t\t * @property {string} [signatureAlgorithm]\r\n\t\t * @property {string} [signature]\r\n\t\t * @property {string} [certs]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"BasicOCSPResponse\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tResponseData.schema(names.tbsResponseData || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"BasicOCSPResponse.tbsResponseData\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"BasicOCSPResponse.signatureAlgorithm\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.signature || \"BasicOCSPResponse.signature\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\t\tvalue: [new asn1js.Repeated({\r\n\t\t\t\t\t\t\t\tname: \"BasicOCSPResponse.certs\",\r\n\t\t\t\t\t\t\t\tvalue: Certificate.schema(names.certs || {})\r\n\t\t\t\t\t\t\t})]\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"BasicOCSPResponse.tbsResponseData\",\r\n\t\t\t\"BasicOCSPResponse.signatureAlgorithm\",\r\n\t\t\t\"BasicOCSPResponse.signature\",\r\n\t\t\t\"BasicOCSPResponse.certs\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tBasicOCSPResponse.schema()\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for BasicOCSPResponse\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.tbsResponseData = new ResponseData({ schema: asn1.result[\"BasicOCSPResponse.tbsResponseData\"] });\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result[\"BasicOCSPResponse.signatureAlgorithm\"] });\r\n\t\tthis.signature = asn1.result[\"BasicOCSPResponse.signature\"];\r\n\t\t\r\n\t\tif(\"BasicOCSPResponse.certs\" in asn1.result)\r\n\t\t\tthis.certs = Array.from(asn1.result[\"BasicOCSPResponse.certs\"], element => new Certificate({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(this.tbsResponseData.toSchema());\r\n\t\toutputArray.push(this.signatureAlgorithm.toSchema());\r\n\t\toutputArray.push(this.signature);\r\n\t\t\r\n\t\t//region Create array of certificates\r\n\t\tif(\"certs\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\tvalue: Array.from(this.certs, element => element.toSchema())\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\ttbsResponseData: this.tbsResponseData.toJSON(),\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n\t\t\tsignature: this.signature.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"certs\" in this)\r\n\t\t\t_object.certs = Array.from(this.certs, element => element.toJSON());\r\n\t\t\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get OCSP response status for specific certificate\r\n\t * @param {Certificate} certificate Certificate to be checked\r\n\t * @param {Certificate} issuerCertificate Certificate of issuer for certificate to be checked\r\n\t * @returns {Promise}\r\n\t */\r\n\tgetCertificateStatus(certificate, issuerCertificate)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst result = {\r\n\t\t\tisForCertificate: false,\r\n\t\t\tstatus: 2 // 0 = good, 1 = revoked, 2 = unknown\r\n\t\t};\r\n\t\t\r\n\t\tconst hashesObject = {};\r\n\t\t\r\n\t\tconst certIDs = [];\r\n\t\tconst certIDPromises = [];\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create all \"certIDs\" for input certificates\r\n\t\tfor(const response of this.tbsResponseData.responses)\r\n\t\t{\r\n\t\t\tconst hashAlgorithm = getAlgorithmByOID(response.certID.hashAlgorithm.algorithmId);\r\n\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\treturn Promise.reject(`Wrong CertID hashing algorithm: ${response.certID.hashAlgorithm.algorithmId}`);\r\n\t\t\t\r\n\t\t\tif((hashAlgorithm.name in hashesObject) === false)\r\n\t\t\t{\r\n\t\t\t\thashesObject[hashAlgorithm.name] = 1;\r\n\t\t\t\t\r\n\t\t\t\tconst certID = new CertID();\r\n\t\t\t\t\r\n\t\t\t\tcertIDs.push(certID);\r\n\t\t\t\tcertIDPromises.push(certID.createForCertificate(certificate, {\r\n\t\t\t\t\thashAlgorithm: hashAlgorithm.name,\r\n\t\t\t\t\tissuerCertificate\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tPromise.all(certIDPromises)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Compare all response's \"certIDs\" with identifiers for input certificate\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tfor(const response of this.tbsResponseData.responses)\r\n\t\t\t{\r\n\t\t\t\tfor(const id of certIDs)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(response.certID.isEqual(id))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresult.isForCertificate = true;\r\n\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tswitch(response.certStatus.idBlock.isConstructed)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcase true:\r\n\t\t\t\t\t\t\t\t\tif(response.certStatus.idBlock.tagNumber === 1)\r\n\t\t\t\t\t\t\t\t\t\tresult.status = 1; // revoked\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\tcase false:\r\n\t\t\t\t\t\t\t\t\tswitch(response.certStatus.idBlock.tagNumber)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase 0: // good\r\n\t\t\t\t\t\t\t\t\t\t\tresult.status = 0;\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase 2: // unknown\r\n\t\t\t\t\t\t\t\t\t\t\tresult.status = 2;\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn result;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Make signature for current OCSP Basic Response\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm=\"SHA-1\"] Hashing algorithm. Default SHA-1\r\n\t * @returns {Promise}\r\n\t */\r\n\tsign(privateKey, hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Initial checking\r\n\t\t//region Get a private key from function parameter\r\n\t\tif(typeof privateKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide a private key for signing\");\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tlet parameters;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"default parameters\" for current algorithm and set correct signature algorithm\r\n\t\tsequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tparameters = result.parameters;\r\n\t\t\tthis.signatureAlgorithm = result.signatureAlgorithm;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create TBS data for signing\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tthis.tbsResponseData.tbs = this.tbsResponseData.toSchema(true).toBER(false);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Signing TBS data on provided private key\r\n\t\tsequence = sequence.then(() => engine.subtle.signWithPrivateKey(this.tbsResponseData.tbs, privateKey, parameters));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.signature = new asn1js.BitString({ valueHex: result });\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify existing OCSP Basic Response\r\n\t * @param {Object} parameters Additional parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tverify(parameters = {})\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet signerCert = null;\r\n\t\t\r\n\t\tlet certIndex = -1;\r\n\t\t\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tlet trustedCerts = [];\r\n\t\t\r\n\t\tconst _this = this;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check amount of certificates\r\n\t\tif((\"certs\" in this) === false)\r\n\t\t\treturn Promise.reject(\"No certificates attached to the BasicOCSPResponce\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get input values\r\n\t\tif(\"trustedCerts\" in parameters)\r\n\t\t\ttrustedCerts = parameters.trustedCerts;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Aux functions\r\n\t\t/**\r\n\t\t * Check CA flag for the certificate\r\n\t\t * @param {Certificate} cert Certificate to find CA flag for\r\n\t\t * @returns {*}\r\n\t\t */\r\n\t\tfunction checkCA(cert)\r\n\t\t{\r\n\t\t\t//region Do not include signer's certificate\r\n\t\t\tif((cert.issuer.isEqual(signerCert.issuer) === true) && (cert.serialNumber.isEqual(signerCert.serialNumber) === true))\r\n\t\t\t\treturn null;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tlet isCA = false;\r\n\t\t\t\r\n\t\t\tfor(const extension of cert.extensions)\r\n\t\t\t{\r\n\t\t\t\tif(extension.extnID === \"2.5.29.19\") // BasicConstraints\r\n\t\t\t\t{\r\n\t\t\t\t\tif(\"cA\" in extension.parsedValue)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(extension.parsedValue.cA === true)\r\n\t\t\t\t\t\t\tisCA = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(isCA)\r\n\t\t\t\treturn cert;\r\n\t\t\t\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find correct value for \"responderID\"\r\n\t\tswitch(true)\r\n\t\t{\r\n\t\t\tcase (this.tbsResponseData.responderID instanceof RelativeDistinguishedNames): // [1] Name\r\n\t\t\t\tsequence = sequence.then(() =>\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(const [index, certificate] of _this.certs.entries())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(certificate.subject.isEqual(_this.tbsResponseData.responderID))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcertIndex = index;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\tcase (this.tbsResponseData.responderID instanceof asn1js.OctetString): // [2] KeyHash\r\n\t\t\t\tsequence = sequence.then(() => Promise.all(Array.from(_this.certs, element =>\r\n\t\t\t\t\tcrypto.digest({ name: \"sha-1\" }, new Uint8Array(element.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex)))).then(results =>\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(const [index, ] of _this.certs.entries())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(isEqualBuffer(results[index], _this.tbsResponseData.responderID.valueBlock.valueHex))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcertIndex = index;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}));\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(\"Wrong value for responderID\");\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Make additional verification for signer's certificate\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tif(certIndex === (-1))\r\n\t\t\t\treturn Promise.reject(\"Correct certificate was not found in OCSP response\");\r\n\t\t\t\r\n\t\t\tsignerCert = this.certs[certIndex];\r\n\t\t\t\r\n\t\t\treturn Promise.all(Array.from(_this.certs, element => checkCA(element))).then(promiseResults =>\r\n\t\t\t{\r\n\t\t\t\tconst additionalCerts = [];\r\n\t\t\t\tadditionalCerts.push(signerCert);\r\n\t\t\t\t\r\n\t\t\t\tfor(const promiseResult of promiseResults)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(promiseResult !== null)\r\n\t\t\t\t\t\tadditionalCerts.push(promiseResult);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tconst certChain = new CertificateChainValidationEngine({\r\n\t\t\t\t\tcerts: additionalCerts,\r\n\t\t\t\t\ttrustedCerts\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\treturn certChain.verify().then(verificationResult =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(verificationResult.result === true)\r\n\t\t\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Validation of signer's certificate failed\");\r\n\t\t\t\t}, error =>\r\n\t\t\t\t\tPromise.reject(`Validation of signer's certificate failed with error: ${((error instanceof Object) ? error.resultMessage : error)}`)\r\n\t\t\t\t);\r\n\t\t\t}, promiseError =>\r\n\t\t\t\tPromise.reject(`Error during checking certificates for CA flag: ${promiseError}`)\r\n\t\t\t);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\tsequence = sequence.then(() => engine.subtle.verifyWithPublicKey(this.tbsResponseData.tbs, this.signature, this.certs[certIndex].subjectPublicKeyInfo, this.signatureAlgorithm));\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"BasicOCSPResponse.js"}