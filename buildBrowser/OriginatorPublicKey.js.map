{"version":3,"sources":["../src/OriginatorPublicKey.js"],"names":["OriginatorPublicKey","parameters","algorithm","defaultValues","publicKey","fromSchema","schema","asn1","asn1js","compareSchema","names","blockName","verified","Error","AlgorithmIdentifier","result","Sequence","value","toSchema","toJSON","memberName","BitString","memberValue","isEqual","name"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class OriginatorPublicKey\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OriginatorPublicKey class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc algorithm\r\n\t\t */\r\n\t\tthis.algorithm = getParametersValue(parameters, \"algorithm\", OriginatorPublicKey.defaultValues(\"algorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @desc publicKey\r\n\t\t */\r\n\t\tthis.publicKey = getParametersValue(parameters, \"publicKey\", OriginatorPublicKey.defaultValues(\"publicKey\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"algorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"publicKey\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OriginatorPublicKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"algorithm\":\r\n\t\t\tcase \"publicKey\":\r\n\t\t\t\treturn (memberValue.isEqual(OriginatorPublicKey.defaultValues(memberName)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OriginatorPublicKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * OriginatorPublicKey ::= SEQUENCE {\r\n\t *    algorithm AlgorithmIdentifier,\r\n\t *    publicKey BIT STRING }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [algorithm]\r\n\t\t * @property {string} [publicKey]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.algorithm || {}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.publicKey || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"algorithm\",\r\n\t\t\t\"publicKey\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOriginatorPublicKey.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"algorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tpublicKey: \"publicKey\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OriginatorPublicKey\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.algorithm = new AlgorithmIdentifier({ schema: asn1.result.algorithm });\r\n\t\tthis.publicKey = asn1.result.publicKey;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.algorithm.toSchema(),\r\n\t\t\t\tthis.publicKey\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\talgorithm: this.algorithm.toJSON(),\r\n\t\t\tpublicKey: this.publicKey.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"OriginatorPublicKey.js"}