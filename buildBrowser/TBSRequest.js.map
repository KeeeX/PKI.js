{"version":3,"sources":["../src/TBSRequest.js"],"names":["TBSRequest","parameters","tbs","defaultValues","version","requestorName","requestList","requestExtensions","fromSchema","schema","asn1","asn1js","compareSchema","verified","Error","result","valueBeforeDecode","valueBlock","valueDec","GeneralName","Array","from","element","Request","value","Extension","encodeFlag","tbsSchema","byteLength","fromBER","outputArray","push","Constructed","idBlock","tagClass","tagNumber","Integer","toSchema","Sequence","_object","toJSON","memberName","ArrayBuffer","memberValue","type","Object","keys","length","names","name","blockName","optional","TBSRequestVersion","Repeated","requests","requestNames","Extensions","extensions"],"mappings":"2TAAA,sDACA,gCACA,qEACA,6DACA,iEACA,mE,umCACA;AACA;;MAGqBA,CAAAA,U,yBAEpB;AACA;;;;IAKA,qBACA,IADYC,CAAAA,UACZ,2DADyB,EACzB,kCACC;AACA;;;KAIA,KAAKC,GAAL,CAAW,gCAAmBD,UAAnB,CAA+B,KAA/B,CAAsCD,UAAU,CAACG,aAAX,CAAyB,KAAzB,CAAtC,CAAX,CAEA,GAAG,WAAaF,CAAAA,UAAhB,CACC;;;MAIA,KAAKG,OAAL,CAAe,gCAAmBH,UAAnB,CAA+B,SAA/B,CAA0CD,UAAU,CAACG,aAAX,CAAyB,SAAzB,CAA1C,CAAf,CAED,GAAG,iBAAmBF,CAAAA,UAAtB,CACC;;;MAIA,KAAKI,aAAL,CAAqB,gCAAmBJ,UAAnB,CAA+B,eAA/B,CAAgDD,UAAU,CAACG,aAAX,CAAyB,eAAzB,CAAhD,CAArB,CAED;;;KAIA,KAAKG,WAAL,CAAmB,gCAAmBL,UAAnB,CAA+B,aAA/B,CAA8CD,UAAU,CAACG,aAAX,CAAyB,aAAzB,CAA9C,CAAnB,CAEA,GAAG,qBAAuBF,CAAAA,UAA1B,CACC;;;MAIA,KAAKM,iBAAL,CAAyB,gCAAmBN,UAAnB,CAA+B,mBAA/B,CAAoDD,UAAU,CAACG,aAAX,CAAyB,mBAAzB,CAApD,CAAzB,CACD;AAEA;AACA,GAAG,UAAYF,CAAAA,UAAf,CACC,KAAKO,UAAL,CAAgBP,UAAU,CAACQ,MAA3B,EACD;AACA,CACD;AACA;;;+CA0HA;AACA;;;8BAIWA,M,CACX,CACC;AACA,wBAAWA,MAAX,CAAmB,CAClB,YADkB,CAElB,oBAFkB,CAGlB,0BAHkB,CAIlB,qBAJkB,CAKlB,8BALkB,CAAnB,EAOA;AAEA;AACA,GAAMC,CAAAA,IAAI,CAAGC,MAAM,CAACC,aAAP,CAAqBH,MAArB,CACZA,MADY,CAEZT,UAAU,CAACS,MAAX,EAFY,CAAb,CAKA,GAAGC,IAAI,CAACG,QAAL,GAAkB,KAArB,CACC,KAAM,IAAIC,CAAAA,KAAJ,CAAU,oEAAV,CAAN,CACD;AAEA;AACA,KAAKZ,GAAL,CAAWQ,IAAI,CAACK,MAAL,CAAYf,UAAZ,CAAuBgB,iBAAlC,CAEA,GAAG,sBAAwBN,CAAAA,IAAI,CAACK,MAAhC,CACC,KAAKX,OAAL,CAAeM,IAAI,CAACK,MAAL,CAAY,oBAAZ,EAAkCE,UAAlC,CAA6CC,QAA5D,CACD,GAAG,4BAA8BR,CAAAA,IAAI,CAACK,MAAtC,CACC,KAAKV,aAAL,CAAqB,GAAIc,qBAAJ,CAAgB,CAAEV,MAAM,CAAEC,IAAI,CAACK,MAAL,CAAY,0BAAZ,CAAV,CAAhB,CAArB,CAED,KAAKT,WAAL,CAAmBc,KAAK,CAACC,IAAN,CAAWX,IAAI,CAACK,MAAL,CAAY,qBAAZ,CAAX,CAA+C,SAAAO,OAAO,QAAI,IAAIC,iBAAJ,CAAY,CAAEd,MAAM,CAAEa,OAAV,CAAZ,CAAJ,EAAtD,CAAnB,CAEA,GAAG,gCAAkCZ,CAAAA,IAAI,CAACK,MAA1C,CACC,KAAKR,iBAAL,CAAyBa,KAAK,CAACC,IAAN,CAAWX,IAAI,CAACK,MAAL,CAAY,8BAAZ,EAA4CE,UAA5C,CAAuDO,KAAlE,CAAyE,SAAAF,OAAO,QAAI,IAAIG,mBAAJ,CAAc,CAAEhB,MAAM,CAAEa,OAAV,CAAd,CAAJ,EAAhF,CAAzB,CACD;AACA,CACD;AACA;;;;+CAMA,IADSI,CAAAA,UACT,2DADsB,KACtB,CACC;AACA,GAAIC,CAAAA,SAAJ,CAEA,GAAGD,UAAU,GAAK,KAAlB,CACA,CACC,GAAG,KAAKxB,GAAL,CAAS0B,UAAT,GAAwB,CAA3B,CAA8B;AAC7B,MAAO5B,CAAAA,UAAU,CAACS,MAAX,EAAP,CAEDkB,SAAS,CAAGhB,MAAM,CAACkB,OAAP,CAAe,KAAK3B,GAApB,EAAyBa,MAArC,CACA,CACD;AACA;AARA,IAUA,CACC,GAAMe,CAAAA,WAAW,CAAG,EAApB,CAEA,GAAG,WAAa,KAAhB,CACA,CACCA,WAAW,CAACC,IAAZ,CAAiB,GAAIpB,CAAAA,MAAM,CAACqB,WAAX,CAAuB,CACvCC,OAAO,CAAE,CACRC,QAAQ,CAAE,CADF,CACK;AACbC,SAAS,CAAE,CAAE;AAFL,CAD8B,CAKvCX,KAAK,CAAE,CAAC,GAAIb,CAAAA,MAAM,CAACyB,OAAX,CAAmB,CAAEZ,KAAK,CAAE,KAAKpB,OAAd,CAAnB,CAAD,CALgC,CAAvB,CAAjB,EAOA,CAED,GAAG,iBAAmB,KAAtB,CACA,CACC0B,WAAW,CAACC,IAAZ,CAAiB,GAAIpB,CAAAA,MAAM,CAACqB,WAAX,CAAuB,CACvCC,OAAO,CAAE,CACRC,QAAQ,CAAE,CADF,CACK;AACbC,SAAS,CAAE,CAAE;AAFL,CAD8B,CAKvCX,KAAK,CAAE,CAAC,KAAKnB,aAAL,CAAmBgC,QAAnB,EAAD,CALgC,CAAvB,CAAjB,EAOA,CAEDP,WAAW,CAACC,IAAZ,CAAiB,GAAIpB,CAAAA,MAAM,CAAC2B,QAAX,CAAoB,CACpCd,KAAK,CAAEJ,KAAK,CAACC,IAAN,CAAW,KAAKf,WAAhB,CAA6B,SAAAgB,OAAO,QAAIA,CAAAA,OAAO,CAACe,QAAR,EAAJ,EAApC,CAD6B,CAApB,CAAjB,EAIA,GAAG,qBAAuB,KAA1B,CACA,CACCP,WAAW,CAACC,IAAZ,CAAiB,GAAIpB,CAAAA,MAAM,CAACqB,WAAX,CAAuB,CACvCC,OAAO,CAAE,CACRC,QAAQ,CAAE,CADF,CACK;AACbC,SAAS,CAAE,CAAE;AAFL,CAD8B,CAKvCX,KAAK,CAAE,CACN,GAAIb,CAAAA,MAAM,CAAC2B,QAAX,CAAoB,CACnBd,KAAK,CAAEJ,KAAK,CAACC,IAAN,CAAW,KAAKd,iBAAhB,CAAmC,SAAAe,OAAO,QAAIA,CAAAA,OAAO,CAACe,QAAR,EAAJ,EAA1C,CADY,CAApB,CADM,CALgC,CAAvB,CAAjB,EAWA,CAEDV,SAAS,CAAG,GAAIhB,CAAAA,MAAM,CAAC2B,QAAX,CAAoB,CAC/Bd,KAAK,CAAEM,WADwB,CAApB,CAAZ,CAGA,CACD;AAEA;AACA,MAAOH,CAAAA,SAAP,CACA;AACA,CACD;AACA;;;2CAKA,CACC,GAAMY,CAAAA,OAAO,CAAG,EAAhB,CAEA,GAAG,WAAa,KAAhB,CACCA,OAAO,CAACnC,OAAR,CAAkB,KAAKA,OAAvB,CAED,GAAG,iBAAmB,KAAtB,CACCmC,OAAO,CAAClC,aAAR,CAAwB,KAAKA,aAAL,CAAmBmC,MAAnB,EAAxB,CAEDD,OAAO,CAACjC,WAAR,CAAsBc,KAAK,CAACC,IAAN,CAAW,KAAKf,WAAhB,CAA6B,SAAAgB,OAAO,QAAIA,CAAAA,OAAO,CAACkB,MAAR,EAAJ,EAApC,CAAtB,CAEA,GAAG,qBAAuB,KAA1B,CACCD,OAAO,CAAChC,iBAAR,CAA4Ba,KAAK,CAACC,IAAN,CAAW,KAAKd,iBAAhB,CAAmC,SAAAe,OAAO,QAAIA,CAAAA,OAAO,CAACkB,MAAR,EAAJ,EAA1C,CAA5B,CAED,MAAOD,CAAAA,OAAP,CACA,CACD;sDAhQqBE,U,CACrB,CACC,OAAOA,UAAP,EAEC,IAAK,KAAL,CACC,MAAO,IAAIC,CAAAA,WAAJ,CAAgB,CAAhB,CAAP,CACD,IAAK,SAAL,CACC,MAAO,EAAP,CACD,IAAK,eAAL,CACC,MAAO,IAAIvB,qBAAJ,EAAP,CACD,IAAK,aAAL,CACA,IAAK,mBAAL,CACC,MAAO,EAAP,CACD,QACC,KAAM,IAAIL,CAAAA,KAAJ,qDAAuD2B,UAAvD,EAAN,CAZF,CAcA,CACD;AACA;;;;kEAK0BA,U,CAAYE,W,CACtC,CACC,OAAOF,UAAP,EAEC,IAAK,KAAL,CACC,MAAQE,CAAAA,WAAW,CAACf,UAAZ,GAA2B,CAAnC,CACD,IAAK,SAAL,CACC,MAAQe,CAAAA,WAAW,GAAK3C,UAAU,CAACG,aAAX,CAAyBsC,UAAzB,CAAxB,CACD,IAAK,eAAL,CACC,MAASE,CAAAA,WAAW,CAACC,IAAZ,GAAqBzB,qBAAYhB,aAAZ,CAA0B,MAA1B,CAAtB,EAA6D0C,MAAM,CAACC,IAAP,CAAYH,WAAW,CAACnB,KAAxB,EAA+BuB,MAA/B,GAA0C,CAA/G,CACD,IAAK,aAAL,CACA,IAAK,mBAAL,CACC,MAAQJ,CAAAA,WAAW,CAACI,MAAZ,GAAuB,CAA/B,CACD,QACC,KAAM,IAAIjC,CAAAA,KAAJ,qDAAuD2B,UAAvD,EAAN,CAZF,CAcA,CACD;AACA;;;;;;;;;;;;;;2CAgBA,IADcxC,CAAAA,UACd,2DAD2B,EAC3B,CACC;;;;;;;;;;KAWA,GAAM+C,CAAAA,KAAK,CAAG,gCAAmB/C,UAAnB,CAA+B,OAA/B,CAAwC,EAAxC,CAAd,CAEA,MAAQ,IAAIU,CAAAA,MAAM,CAAC2B,QAAX,CAAoB,CAC3BW,IAAI,CAAGD,KAAK,CAACE,SAAN,EAAmB,YADC,CAE3B1B,KAAK,CAAE,CACN,GAAIb,CAAAA,MAAM,CAACqB,WAAX,CAAuB,CACtBmB,QAAQ,CAAE,IADY,CAEtBlB,OAAO,CAAE,CACRC,QAAQ,CAAE,CADF,CACK;AACbC,SAAS,CAAE,CAAE;AAFL,CAFa,CAMtBX,KAAK,CAAE,CAAC,GAAIb,CAAAA,MAAM,CAACyB,OAAX,CAAmB,CAAEa,IAAI,CAAGD,KAAK,CAACI,iBAAN,EAA2B,oBAApC,CAAnB,CAAD,CANe,CAAvB,CADM,CASN,GAAIzC,CAAAA,MAAM,CAACqB,WAAX,CAAuB,CACtBmB,QAAQ,CAAE,IADY,CAEtBlB,OAAO,CAAE,CACRC,QAAQ,CAAE,CADF,CACK;AACbC,SAAS,CAAE,CAAE;AAFL,CAFa,CAMtBX,KAAK,CAAE,CAACL,qBAAYV,MAAZ,CAAmBuC,KAAK,CAAC3C,aAAN,EAAuB,CACjD2C,KAAK,CAAE,CACNE,SAAS,CAAE,0BADL,CAD0C,CAA1C,CAAD,CANe,CAAvB,CATM,CAqBN,GAAIvC,CAAAA,MAAM,CAAC2B,QAAX,CAAoB,CACnBW,IAAI,CAAGD,KAAK,CAAC1C,WAAN,EAAqB,wBADT,CAEnBkB,KAAK,CAAE,CACN,GAAIb,CAAAA,MAAM,CAAC0C,QAAX,CAAoB,CACnBJ,IAAI,CAAGD,KAAK,CAACM,QAAN,EAAkB,qBADN,CAEnB9B,KAAK,CAAED,iBAAQd,MAAR,CAAeuC,KAAK,CAACO,YAAN,EAAsB,EAArC,CAFY,CAApB,CADM,CAFY,CAApB,CArBM,CA8BN,GAAI5C,CAAAA,MAAM,CAACqB,WAAX,CAAuB,CACtBmB,QAAQ,CAAE,IADY,CAEtBlB,OAAO,CAAE,CACRC,QAAQ,CAAE,CADF,CACK;AACbC,SAAS,CAAE,CAAE;AAFL,CAFa,CAMtBX,KAAK,CAAE,CAACgC,oBAAW/C,MAAX,CAAkBuC,KAAK,CAACS,UAAN,EAAoB,CAC7CT,KAAK,CAAE,CACNE,SAAS,CAAGF,KAAK,CAACzC,iBAAN,EAA2B,8BADjC,CADsC,CAAtC,CAAD,CANe,CAAvB,CA9BM,CAFoB,CAApB,CAAR,CA8CA,C,0BA6IF","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport GeneralName from \"./GeneralName.js\";\r\nimport Request from \"./Request.js\";\r\nimport Extension from \"./Extension.js\";\r\nimport Extensions from \"./Extensions.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class TBSRequest\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for TBSRequest class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc tbs\r\n\t\t */\r\n\t\tthis.tbs = getParametersValue(parameters, \"tbs\", TBSRequest.defaultValues(\"tbs\"));\r\n\r\n\t\tif(\"version\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {number}\r\n\t\t\t * @desc version\r\n\t\t\t */\r\n\t\t\tthis.version = getParametersValue(parameters, \"version\", TBSRequest.defaultValues(\"version\"));\r\n\r\n\t\tif(\"requestorName\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {GeneralName}\r\n\t\t\t * @desc requestorName\r\n\t\t\t */\r\n\t\t\tthis.requestorName = getParametersValue(parameters, \"requestorName\", TBSRequest.defaultValues(\"requestorName\"));\r\n\r\n\t\t/**\r\n\t\t * @type {Array.<Request>}\r\n\t\t * @desc requestList\r\n\t\t */\r\n\t\tthis.requestList = getParametersValue(parameters, \"requestList\", TBSRequest.defaultValues(\"requestList\"));\r\n\r\n\t\tif(\"requestExtensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Extension>}\r\n\t\t\t * @desc requestExtensions\r\n\t\t\t */\r\n\t\t\tthis.requestExtensions = getParametersValue(parameters, \"requestExtensions\", TBSRequest.defaultValues(\"requestExtensions\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbs\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"requestorName\":\r\n\t\t\t\treturn new GeneralName();\r\n\t\t\tcase \"requestList\":\r\n\t\t\tcase \"requestExtensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TBSRequest class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbs\":\r\n\t\t\t\treturn (memberValue.byteLength === 0);\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === TBSRequest.defaultValues(memberName));\r\n\t\t\tcase \"requestorName\":\r\n\t\t\t\treturn ((memberValue.type === GeneralName.defaultValues(\"type\")) && (Object.keys(memberValue.value).length === 0));\r\n\t\t\tcase \"requestList\":\r\n\t\t\tcase \"requestExtensions\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TBSRequest class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * TBSRequest      ::=     SEQUENCE {\r\n\t *    version             [0]     EXPLICIT Version DEFAULT v1,\r\n\t *    requestorName       [1]     EXPLICIT GeneralName OPTIONAL,\r\n\t *    requestList                 SEQUENCE OF Request,\r\n\t *    requestExtensions   [2]     EXPLICIT Extensions OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [TBSRequestVersion]\r\n\t\t * @property {string} [requestorName]\r\n\t\t * @property {string} [requestList]\r\n\t\t * @property {string} [requests]\r\n\t\t * @property {string} [requestNames]\r\n\t\t * @property {string} [extensions]\r\n\t\t * @property {string} [requestExtensions]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"TBSRequest\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Integer({ name: (names.TBSRequestVersion || \"TBSRequest.version\") })]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [GeneralName.schema(names.requestorName || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"TBSRequest.requestorName\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\tname: (names.requestList || \"TBSRequest.requestList\"),\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.requests || \"TBSRequest.requests\"),\r\n\t\t\t\t\t\t\tvalue: Request.schema(names.requestNames || {})\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [Extensions.schema(names.extensions || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: (names.requestExtensions || \"TBSRequest.requestExtensions\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"TBSRequest\",\r\n\t\t\t\"TBSRequest.version\",\r\n\t\t\t\"TBSRequest.requestorName\",\r\n\t\t\t\"TBSRequest.requests\",\r\n\t\t\t\"TBSRequest.requestExtensions\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tTBSRequest.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for TBSRequest\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.tbs = asn1.result.TBSRequest.valueBeforeDecode;\r\n\r\n\t\tif(\"TBSRequest.version\" in asn1.result)\r\n\t\t\tthis.version = asn1.result[\"TBSRequest.version\"].valueBlock.valueDec;\r\n\t\tif(\"TBSRequest.requestorName\" in asn1.result)\r\n\t\t\tthis.requestorName = new GeneralName({ schema: asn1.result[\"TBSRequest.requestorName\"] });\r\n\r\n\t\tthis.requestList = Array.from(asn1.result[\"TBSRequest.requests\"], element => new Request({ schema: element }));\r\n\r\n\t\tif(\"TBSRequest.requestExtensions\" in asn1.result)\r\n\t\t\tthis.requestExtensions = Array.from(asn1.result[\"TBSRequest.requestExtensions\"].valueBlock.value, element => new Extension({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @param {boolean} encodeFlag If param equal to false then create TBS schema via decoding stored value. In othe case create TBS schema via assembling from TBS parts.\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\t//region Decode stored TBS value\r\n\t\tlet tbsSchema;\r\n\r\n\t\tif(encodeFlag === false)\r\n\t\t{\r\n\t\t\tif(this.tbs.byteLength === 0) // No stored TBS part\r\n\t\t\t\treturn TBSRequest.schema();\r\n\r\n\t\t\ttbsSchema = asn1js.fromBER(this.tbs).result;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Create TBS schema via assembling from TBS parts\r\n\t\telse\r\n\t\t{\r\n\t\t\tconst outputArray = [];\r\n\r\n\t\t\tif(\"version\" in this)\r\n\t\t\t{\r\n\t\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Integer({ value: this.version })]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\r\n\t\t\tif(\"requestorName\" in this)\r\n\t\t\t{\r\n\t\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [this.requestorName.toSchema()]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\r\n\t\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\t\tvalue: Array.from(this.requestList, element => element.toSchema())\r\n\t\t\t}));\r\n\r\n\t\t\tif(\"requestExtensions\" in this)\r\n\t\t\t{\r\n\t\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\t\tvalue: Array.from(this.requestExtensions, element => element.toSchema())\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\r\n\t\t\ttbsSchema = new asn1js.Sequence({\r\n\t\t\t\tvalue: outputArray\r\n\t\t\t});\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn tbsSchema;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {};\r\n\r\n\t\tif(\"version\" in this)\r\n\t\t\t_object.version = this.version;\r\n\r\n\t\tif(\"requestorName\" in this)\r\n\t\t\t_object.requestorName = this.requestorName.toJSON();\r\n\r\n\t\t_object.requestList = Array.from(this.requestList, element => element.toJSON());\r\n\r\n\t\tif(\"requestExtensions\" in this)\r\n\t\t\t_object.requestExtensions = Array.from(this.requestExtensions, element => element.toJSON());\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"TBSRequest.js"}