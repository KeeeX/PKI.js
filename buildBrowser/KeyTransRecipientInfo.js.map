{"version":3,"sources":["../src/KeyTransRecipientInfo.js"],"names":["KeyTransRecipientInfo","parameters","version","defaultValues","rid","keyEncryptionAlgorithm","encryptedKey","recipientCertificate","fromSchema","schema","asn1","asn1js","compareSchema","names","blockName","verified","Error","result","valueBlock","valueDec","idBlock","tagClass","value","IssuerAndSerialNumber","AlgorithmIdentifier","outputArray","push","Integer","toSchema","Constructed","tagNumber","Sequence","toJSON","memberName","OctetString","Certificate","memberValue","Object","keys","length","isEqual","name","RecipientIdentifier"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport Certificate from \"./Certificate.js\";\r\nimport RecipientIdentifier from \"./RecipientIdentifier.js\";\r\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class KeyTransRecipientInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for KeyTransRecipientInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", KeyTransRecipientInfo.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {RecipientIdentifier}\r\n\t\t * @desc rid\r\n\t\t */\r\n\t\tthis.rid = getParametersValue(parameters, \"rid\", KeyTransRecipientInfo.defaultValues(\"rid\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc keyEncryptionAlgorithm\r\n\t\t */\r\n\t\tthis.keyEncryptionAlgorithm = getParametersValue(parameters, \"keyEncryptionAlgorithm\", KeyTransRecipientInfo.defaultValues(\"keyEncryptionAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc encryptedKey\r\n\t\t */\r\n\t\tthis.encryptedKey = getParametersValue(parameters, \"encryptedKey\", KeyTransRecipientInfo.defaultValues(\"encryptedKey\"));\r\n\t\t/**\r\n\t\t * @type {Certificate}\r\n\t\t * @desc recipientCertificate For some reasons we need to store recipient's certificate here\r\n\t\t */\r\n\t\tthis.recipientCertificate = getParametersValue(parameters, \"recipientCertificate\", KeyTransRecipientInfo.defaultValues(\"recipientCertificate\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (-1);\r\n\t\t\tcase \"rid\":\r\n\t\t\t\treturn {};\r\n\t\t\tcase \"keyEncryptionAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"encryptedKey\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"recipientCertificate\":\r\n\t\t\t\treturn new Certificate();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for KeyTransRecipientInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === KeyTransRecipientInfo.defaultValues(\"version\"));\r\n\t\t\tcase \"rid\":\r\n\t\t\t\treturn (Object.keys(memberValue).length === 0);\r\n\t\t\tcase \"keyEncryptionAlgorithm\":\r\n\t\t\tcase \"encryptedKey\":\r\n\t\t\t\treturn memberValue.isEqual(KeyTransRecipientInfo.defaultValues(memberName));\r\n\t\t\tcase \"recipientCertificate\":\r\n\t\t\t\treturn false; // For now we do not need to compare any values with the \"recipientCertificate\"\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for KeyTransRecipientInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * KeyTransRecipientInfo ::= SEQUENCE {\r\n\t *    version CMSVersion,  -- always set to 0 or 2\r\n\t *    rid RecipientIdentifier,\r\n\t *    keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\r\n\t *    encryptedKey EncryptedKey }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [rid]\r\n\t\t * @property {string} [keyEncryptionAlgorithm]\r\n\t\t * @property {string} [encryptedKey]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tRecipientIdentifier.schema(names.rid || {}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.encryptedKey || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"rid\",\r\n\t\t\t\"keyEncryptionAlgorithm\",\r\n\t\t\t\"encryptedKey\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tKeyTransRecipientInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\trid: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"rid\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tkeyEncryptionAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"keyEncryptionAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tencryptedKey: \"encryptedKey\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for KeyTransRecipientInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\r\n\t\tif(asn1.result.rid.idBlock.tagClass === 3)\r\n\t\t\tthis.rid = asn1.result.rid.valueBlock.value[0]; // SubjectKeyIdentifier\r\n\t\telse\r\n\t\t\tthis.rid = new IssuerAndSerialNumber({ schema: asn1.result.rid });\r\n\r\n\t\tthis.keyEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyEncryptionAlgorithm });\r\n\t\tthis.encryptedKey = asn1.result.encryptedKey;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence \r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif(this.rid instanceof IssuerAndSerialNumber)\r\n\t\t{\r\n\t\t\tthis.version = 0;\r\n\t\t\t\r\n\t\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\t\toutputArray.push(this.rid.toSchema());\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.version = 2;\r\n\t\t\t\r\n\t\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [this.rid]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\toutputArray.push(this.keyEncryptionAlgorithm.toSchema());\r\n\t\toutputArray.push(this.encryptedKey);\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object \r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion \r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tversion: this.version,\r\n\t\t\trid: this.rid.toJSON(),\r\n\t\t\tkeyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\r\n\t\t\tencryptedKey: this.encryptedKey.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"KeyTransRecipientInfo.js"}