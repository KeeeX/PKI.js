{"version":3,"sources":["../src/TimeStampResp.js"],"names":["TimeStampResp","parameters","status","defaultValues","timeStampToken","fromSchema","schema","asn1","asn1js","compareSchema","verified","Error","PKIStatusInfo","result","ContentInfo","outputArray","push","toSchema","Sequence","value","_object","toJSON","privateKey","hashAlgorithm","Promise","reject","contentType","signed","content","sign","verificationParameters","signer","trustedCerts","data","ArrayBuffer","SignedData","verify","memberName","memberValue","compareWithDefault","Any","names","name","blockName","optional"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport PKIStatusInfo from \"./PKIStatusInfo.js\";\r\nimport ContentInfo from \"./ContentInfo.js\";\r\nimport SignedData from \"./SignedData.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3161\r\n */\r\nexport default class TimeStampResp\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for TimeStampResp class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {PKIStatusInfo}\r\n\t\t * @desc status\r\n\t\t */\r\n\t\tthis.status = getParametersValue(parameters, \"status\", TimeStampResp.defaultValues(\"status\"));\r\n\r\n\t\tif(\"timeStampToken\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ContentInfo}\r\n\t\t\t * @desc timeStampToken\r\n\t\t\t */\r\n\t\t\tthis.timeStampToken = getParametersValue(parameters, \"timeStampToken\", TimeStampResp.defaultValues(\"timeStampToken\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"status\":\r\n\t\t\t\treturn new PKIStatusInfo();\r\n\t\t\tcase \"timeStampToken\":\r\n\t\t\t\treturn new ContentInfo();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TimeStampResp class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"status\":\r\n\t\t\t\treturn ((PKIStatusInfo.compareWithDefault(\"status\", memberValue.status)) &&\r\n\t\t\t\t\t\t((\"statusStrings\" in memberValue) === false) &&\r\n\t\t\t\t\t\t((\"failInfo\" in memberValue) === false));\r\n\t\t\tcase \"timeStampToken\":\r\n\t\t\t\treturn ((memberValue.contentType === \"\") &&\r\n\t\t\t\t\t\t(memberValue.content instanceof asn1js.Any));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TimeStampResp class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * TimeStampResp ::= SEQUENCE  {\r\n\t *    status                  PKIStatusInfo,\r\n\t *    timeStampToken          TimeStampToken     OPTIONAL  }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [status]\r\n\t\t * @property {string} [timeStampToken]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"TimeStampResp\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tPKIStatusInfo.schema(names.status || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"TimeStampResp.status\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tContentInfo.schema(names.timeStampToken || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"TimeStampResp.timeStampToken\",\r\n\t\t\t\t\t\toptional: true\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"TimeStampResp.status\",\r\n\t\t\t\"TimeStampResp.timeStampToken\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tTimeStampResp.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for TimeStampResp\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.status = new PKIStatusInfo({ schema: asn1.result[\"TimeStampResp.status\"] });\r\n\t\tif(\"TimeStampResp.timeStampToken\" in asn1.result)\r\n\t\t\tthis.timeStampToken = new ContentInfo({ schema: asn1.result[\"TimeStampResp.timeStampToken\"] });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(this.status.toSchema());\r\n\t\tif(\"timeStampToken\" in this)\r\n\t\t\toutputArray.push(this.timeStampToken.toSchema());\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tstatus: this.status\r\n\t\t};\r\n\r\n\t\tif(\"timeStampToken\" in this)\r\n\t\t\t_object.timeStampToken = this.timeStampToken.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Sign current TSP Response\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1\r\n\t * @returns {Promise}\r\n\t */\r\n\tsign(privateKey, hashAlgorithm)\r\n\t{\r\n\t\t//region Check that \"timeStampToken\" exists\r\n\t\tif((\"timeStampToken\" in this) === false)\r\n\t\t\treturn Promise.reject(\"timeStampToken is absent in TSP response\");\r\n\t\t//endregion\r\n\r\n\t\t//region Check that \"timeStampToken\" has a right internal format\r\n\t\tif(this.timeStampToken.contentType !== \"1.2.840.113549.1.7.2\") // Must be a CMS signed data\r\n\t\t\treturn Promise.reject(`Wrong format of timeStampToken: ${this.timeStampToken.contentType}`);\r\n\t\t//endregion\r\n\r\n\t\t//region Sign internal signed data value\r\n\t\tconst signed = new ContentInfo({ schema: this.timeStampToken.content });\r\n\r\n\t\treturn signed.sign(privateKey, 0, hashAlgorithm);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify current TSP Response\r\n\t * @param {Object} verificationParameters Input parameters for verification\r\n\t * @returns {Promise}\r\n\t */\r\n\tverify(verificationParameters = { signer: 0, trustedCerts: [], data: new ArrayBuffer(0) })\r\n\t{\r\n\t\t//region Check that \"timeStampToken\" exists\r\n\t\tif((\"timeStampToken\" in this) === false)\r\n\t\t\treturn Promise.reject(\"timeStampToken is absent in TSP response\");\r\n\t\t//endregion\r\n\r\n\t\t//region Check that \"timeStampToken\" has a right internal format\r\n\t\tif(this.timeStampToken.contentType !== \"1.2.840.113549.1.7.2\") // Must be a CMS signed data\r\n\t\t\treturn Promise.reject(`Wrong format of timeStampToken: ${this.timeStampToken.contentType}`);\r\n\t\t//endregion\r\n\r\n\t\t//region Verify internal signed data value\r\n\t\tconst signed = new SignedData({ schema: this.timeStampToken.content });\r\n\r\n\t\treturn signed.verify(verificationParameters);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"TimeStampResp.js"}