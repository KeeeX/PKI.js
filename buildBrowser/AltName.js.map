{"version":3,"sources":["../src/AltName.js"],"names":["AltName","parameters","altNames","defaultValues","fromSchema","schema","asn1","asn1js","compareSchema","names","verified","Error","result","Array","from","element","GeneralName","Sequence","value","toSchema","toJSON","memberName","name","blockName","Repeated"],"mappings":"6FAAA,sDACA,gCACA,qE,umCACA;AACA;;MAGqBA,CAAAA,O,yBAEpB;AACA;;;;IAKA,kBACA,IADYC,CAAAA,UACZ,2DADyB,EACzB,+BACC;AACA;;;KAIA,KAAKC,QAAL,CAAgB,gCAAmBD,UAAnB,CAA+B,UAA/B,CAA2CD,OAAO,CAACG,aAAR,CAAsB,UAAtB,CAA3C,CAAhB,CACA;AAEA;AACA,GAAG,UAAYF,CAAAA,UAAf,CACC,KAAKG,UAAL,CAAgBH,UAAU,CAACI,MAA3B,EACD;AACA,CACD;AACA;;;4CA6CA;AACA;;;8BAIWA,M,CACX,CACC;AACA,wBAAWA,MAAX,CAAmB,CAClB,UADkB,CAAnB,EAGA;AAEA;AACA,GAAMC,CAAAA,IAAI,CAAGC,MAAM,CAACC,aAAP,CAAqBH,MAArB,CACZA,MADY,CAEZL,OAAO,CAACK,MAAR,CAAe,CACdI,KAAK,CAAE,CACNP,QAAQ,CAAE,UADJ,CADO,CAAf,CAFY,CAAb,CASA,GAAGI,IAAI,CAACI,QAAL,GAAkB,KAArB,CACC,KAAM,IAAIC,CAAAA,KAAJ,CAAU,iEAAV,CAAN,CACD;AAEA;AACA,GAAG,YAAcL,CAAAA,IAAI,CAACM,MAAtB,CACC,KAAKV,QAAL,CAAgBW,KAAK,CAACC,IAAN,CAAWR,IAAI,CAACM,MAAL,CAAYV,QAAvB,CAAiC,SAAAa,OAAO,QAAI,IAAIC,qBAAJ,CAAgB,CAAEX,MAAM,CAAEU,OAAV,CAAhB,CAAJ,EAAxC,CAAhB,CACD;AACA,CACD;AACA;;;+CAKA,CACC;AACA,MAAQ,IAAIR,CAAAA,MAAM,CAACU,QAAX,CAAoB,CAC3BC,KAAK,CAAEL,KAAK,CAACC,IAAN,CAAW,KAAKZ,QAAhB,CAA0B,SAAAa,OAAO,QAAIA,CAAAA,OAAO,CAACI,QAAR,EAAJ,EAAjC,CADoB,CAApB,CAAR,CAGA;AACA,CACD;AACA;;;2CAKA,CACC,MAAO,CACNjB,QAAQ,CAAEW,KAAK,CAACC,IAAN,CAAW,KAAKZ,QAAhB,CAA0B,SAAAa,OAAO,QAAIA,CAAAA,OAAO,CAACK,MAAR,EAAJ,EAAjC,CADJ,CAAP,CAGA,CACD;sDAjGqBC,U,CACrB,CACC,OAAOA,UAAP,EAEC,IAAK,UAAL,CACC,MAAO,EAAP,CACD,QACC,KAAM,IAAIV,CAAAA,KAAJ,kDAAoDU,UAApD,EAAN,CALF,CAOA,CACD;AACA;;;;;;;;;;2CAYA,IADcpB,CAAAA,UACd,2DAD2B,EAC3B,CACC;;;;KAKA,GAAMQ,CAAAA,KAAK,CAAG,gCAAmBR,UAAnB,CAA+B,OAA/B,CAAwC,EAAxC,CAAd,CAEA,MAAQ,IAAIM,CAAAA,MAAM,CAACU,QAAX,CAAoB,CAC3BK,IAAI,CAAGb,KAAK,CAACc,SAAN,EAAmB,EADC,CAE3BL,KAAK,CAAE,CACN,GAAIX,CAAAA,MAAM,CAACiB,QAAX,CAAoB,CACnBF,IAAI,CAAGb,KAAK,CAACP,QAAN,EAAkB,EADN,CAEnBgB,KAAK,CAAEF,qBAAYX,MAAZ,EAFY,CAApB,CADM,CAFoB,CAApB,CAAR,CASA,C,uBA2DF","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport GeneralName from \"./GeneralName.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class AltName\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AltName class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<GeneralName>}\r\n\t\t * @desc Array of alternative names in GeneralName type\r\n\t\t */\r\n\t\tthis.altNames = getParametersValue(parameters, \"altNames\", AltName.defaultValues(\"altNames\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"altNames\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AltName class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * AltName ::= GeneralNames\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [altNames]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.altNames || \"\"),\r\n\t\t\t\t\tvalue: GeneralName.schema()\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"altNames\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAltName.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\taltNames: \"altNames\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AltName\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"altNames\" in asn1.result)\r\n\t\t\tthis.altNames = Array.from(asn1.result.altNames, element => new GeneralName({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.altNames, element => element.toSchema())\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\taltNames: Array.from(this.altNames, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"AltName.js"}