{"version":3,"sources":["../src/PolicyInformation.js"],"names":["PolicyInformation","parameters","policyIdentifier","defaultValues","policyQualifiers","fromSchema","schema","asn1","asn1js","compareSchema","names","verified","Error","result","valueBlock","toString","Array","from","element","PolicyQualifierInfo","outputArray","push","ObjectIdentifier","value","Sequence","toSchema","object","toJSON","memberName","name","blockName","optional","Repeated"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport PolicyQualifierInfo from \"./PolicyQualifierInfo.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class PolicyInformation\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PolicyInformation class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc policyIdentifier\r\n\t\t */\r\n\t\tthis.policyIdentifier = getParametersValue(parameters, \"policyIdentifier\", PolicyInformation.defaultValues(\"policyIdentifier\"));\r\n\r\n\t\tif(\"policyQualifiers\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<PolicyQualifierInfo>}\r\n\t\t\t * @desc Value of the TIME class\r\n\t\t\t */\r\n\t\t\tthis.policyQualifiers = getParametersValue(parameters, \"policyQualifiers\", PolicyInformation.defaultValues(\"policyQualifiers\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"policyIdentifier\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"policyQualifiers\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PolicyInformation class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PolicyInformation ::= SEQUENCE {\r\n\t *    policyIdentifier   CertPolicyId,\r\n\t *    policyQualifiers   SEQUENCE SIZE (1..MAX) OF\r\n\t *    PolicyQualifierInfo OPTIONAL }\r\n\t *\r\n\t * CertPolicyId ::= OBJECT IDENTIFIER\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [policyIdentifier]\r\n\t\t * @property {string} [policyQualifiers]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.policyIdentifier || \"\") }),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.policyQualifiers || \"\"),\r\n\t\t\t\t\t\t\tvalue: PolicyQualifierInfo.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"policyIdentifier\",\r\n\t\t\t\"policyQualifiers\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPolicyInformation.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tpolicyIdentifier: \"policyIdentifier\",\r\n\t\t\t\t\tpolicyQualifiers: \"policyQualifiers\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PolicyInformation\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.policyIdentifier = asn1.result.policyIdentifier.valueBlock.toString();\r\n\r\n\t\tif(\"policyQualifiers\" in asn1.result)\r\n\t\t\tthis.policyQualifiers = Array.from(asn1.result.policyQualifiers, element => new PolicyQualifierInfo({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.policyIdentifier }));\r\n\t\t\r\n\t\tif(\"policyQualifiers\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\t\tvalue: Array.from(this.policyQualifiers, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\tpolicyIdentifier: this.policyIdentifier\r\n\t\t};\r\n\r\n\t\tif(\"policyQualifiers\" in this)\r\n\t\t\tobject.policyQualifiers = Array.from(this.policyQualifiers, element => element.toJSON());\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"PolicyInformation.js"}