{"version":3,"sources":["../src/SignedData.js"],"names":["SignedData","parameters","version","defaultValues","digestAlgorithms","encapContentInfo","certificates","crls","ocsps","signerInfos","fromSchema","schema","asn1","asn1js","compareSchema","verified","Error","result","valueBlock","valueDec","Array","from","algorithm","AlgorithmIdentifier","EncapsulatedContentInfo","certificateSet","CertificateSet","Set","value","slice","crl","idBlock","tagClass","CertificateRevocationList","tagNumber","OtherRevocationInfoFormat","signerInfoSchema","SignerInfo","encodeFlag","outputArray","push","Integer","toSchema","certificateSetSchema","Constructed","crlSchema","signerInfo","Sequence","_object","toJSON","certificate","signer","data","ArrayBuffer","trustedCerts","checkDate","Date","checkChain","extendedMode","passedWhenNotRevValues","findOrigin","findIssuer","sequence","Promise","resolve","messageDigestValue","shaAlgorithm","signerCertificate","timestampSerial","certificatePath","engine","crypto","reject","date","code","message","signatureVerified","signerCertificateVerified","sid","IssuerAndSerialNumber","then","Certificate","issuer","isEqual","serialNumber","all","filter","digest","name","Uint8Array","subjectPublicKeyInfo","subjectPublicKey","valueHex","results","entries","index","eContentType","fromBER","eContent","tstInfo","TSTInfo","ex","genTime","byteLength","verify","checkCA","cert","isCA","extensions","extension","extnID","parsedValue","cA","promiseResults","certificateChainValidationEngineParameters","certs","_result","certificateChainEngine","CertificateChainValidationEngine","otherRevInfoFormat","BasicOCSPResponse","otherRevInfo","verificationResult","resultMessage","error","Object","signerInfoHashAlgorithm","digestAlgorithm","algorithmId","isConstructed","contentValue","valueBeforeDecode","foundContentType","foundMessageDigest","signedAttrs","attributes","attribute","type","values","encodedValue","subtle","verifyWithPublicKey","signature","signatureAlgorithm","privateKey","signerIndex","hashAlgorithm","hashAlgorithmOID","length","algorithmParams","Null","getSignatureParameters","toBER","view","content","signWithPrivateKey","OctetString","memberName","memberValue","names","optional","blockName","Repeated","RevocationInfoChoices"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, utilConcatBuf, isEqualBuffer, clearProps } from \"pvutils\";\r\nimport { getCrypto, getEngine, getOIDByAlgorithm, getAlgorithmByOID } from \"./common.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport EncapsulatedContentInfo from \"./EncapsulatedContentInfo.js\";\r\nimport Certificate from \"./Certificate.js\";\r\nimport CertificateRevocationList from \"./CertificateRevocationList.js\";\r\nimport OtherRevocationInfoFormat from \"./OtherRevocationInfoFormat.js\";\r\nimport SignerInfo from \"./SignerInfo.js\";\r\nimport CertificateSet from \"./CertificateSet.js\";\r\nimport RevocationInfoChoices from \"./RevocationInfoChoices.js\";\r\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\";\r\nimport TSTInfo from \"./TSTInfo.js\";\r\nimport CertificateChainValidationEngine from \"./CertificateChainValidationEngine.js\";\r\nimport BasicOCSPResponse from \"./BasicOCSPResponse.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class SignedData \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SignedData class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", SignedData.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {Array.<AlgorithmIdentifier>}\r\n\t\t * @desc digestAlgorithms\r\n\t\t */\r\n\t\tthis.digestAlgorithms = getParametersValue(parameters, \"digestAlgorithms\", SignedData.defaultValues(\"digestAlgorithms\"));\r\n\t\t/**\r\n\t\t * @type {EncapsulatedContentInfo}\r\n\t\t * @desc encapContentInfo\r\n\t\t */\r\n\t\tthis.encapContentInfo = getParametersValue(parameters, \"encapContentInfo\", SignedData.defaultValues(\"encapContentInfo\"));\r\n\t\t\r\n\t\tif(\"certificates\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Certificate|OtherCertificateFormat>}\r\n\t\t\t * @desc certificates\r\n\t\t\t */\r\n\t\t\tthis.certificates = getParametersValue(parameters, \"certificates\", SignedData.defaultValues(\"certificates\"));\r\n\t\t\r\n\t\tif(\"crls\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<CertificateRevocationList|OtherRevocationInfoFormat>}\r\n\t\t\t * @desc crls\r\n\t\t\t */\r\n\t\t\tthis.crls = getParametersValue(parameters, \"crls\", SignedData.defaultValues(\"crls\"));\r\n\t\t\r\n\t\tif(\"ocsps\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<BasicOCSPResponse>}\r\n\t\t\t * @desc crls\r\n\t\t\t */\r\n\t\t\tthis.ocsps = getParametersValue(parameters, \"ocsps\", SignedData.defaultValues(\"ocsps\"));\r\n\r\n\t\t/**\r\n\t\t * @type {Array.<SignerInfo>}\r\n\t\t * @desc signerInfos\r\n\t\t */\r\n\t\tthis.signerInfos = getParametersValue(parameters, \"signerInfos\", SignedData.defaultValues(\"signerInfos\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"digestAlgorithms\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"encapContentInfo\":\r\n\t\t\t\treturn new EncapsulatedContentInfo();\r\n\t\t\tcase \"certificates\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"crls\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"ocsps\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"signerInfos\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === SignedData.defaultValues(\"version\"));\r\n\t\t\tcase \"encapContentInfo\":\r\n\t\t\t\treturn new EncapsulatedContentInfo();\r\n\t\t\tcase \"digestAlgorithms\":\r\n\t\t\tcase \"certificates\":\r\n\t\t\tcase \"crls\":\r\n\t\t\tcase \"ocsps\":\r\n\t\t\tcase \"signerInfos\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * SignedData ::= SEQUENCE {\r\n\t *    version CMSVersion,\r\n\t *    digestAlgorithms DigestAlgorithmIdentifiers,\r\n\t *    encapContentInfo EncapsulatedContentInfo,\r\n\t *    certificates [0] IMPLICIT CertificateSet OPTIONAL,\r\n\t *    crls [1] IMPLICIT RevocationInfoChoices OPTIONAL,\r\n\t *    signerInfos SignerInfos }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [optional]\r\n\t\t * @property {string} [digestAlgorithms]\r\n\t\t * @property {string} [encapContentInfo]\r\n\t\t * @property {string} [certificates]\r\n\t\t * @property {string} [crls]\r\n\t\t * @property {string} [signerInfos]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\tif((\"optional\" in names) === false)\r\n\t\t\tnames.optional = false;\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"SignedData\"),\r\n\t\t\toptional: names.optional,\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"SignedData.version\") }),\r\n\t\t\t\tnew asn1js.Set({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.digestAlgorithms || \"SignedData.digestAlgorithms\"),\r\n\t\t\t\t\t\t\tvalue: AlgorithmIdentifier.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tEncapsulatedContentInfo.schema(names.encapContentInfo || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"SignedData.encapContentInfo\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tname: (names.certificates || \"SignedData.certificates\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: CertificateSet.schema().valueBlock.value\r\n\t\t\t\t}), // IMPLICIT CertificateSet\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: RevocationInfoChoices.schema(names.crls || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tcrls: \"SignedData.crls\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}).valueBlock.value\r\n\t\t\t\t}), // IMPLICIT RevocationInfoChoices\r\n\t\t\t\tnew asn1js.Set({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.signerInfos || \"SignedData.signerInfos\"),\r\n\t\t\t\t\t\t\tvalue: SignerInfo.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"SignedData.version\",\r\n\t\t\t\"SignedData.digestAlgorithms\",\r\n\t\t\t\"SignedData.encapContentInfo\",\r\n\t\t\t\"SignedData.certificates\",\r\n\t\t\t\"SignedData.crls\",\r\n\t\t\t\"SignedData.signerInfos\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSignedData.schema()\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SignedData\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result[\"SignedData.version\"].valueBlock.valueDec;\r\n\t\t\r\n\t\tif(\"SignedData.digestAlgorithms\" in asn1.result) // Could be empty SET of digest algorithms\r\n\t\t\tthis.digestAlgorithms = Array.from(asn1.result[\"SignedData.digestAlgorithms\"], algorithm => new AlgorithmIdentifier({ schema: algorithm }));\r\n\t\t\r\n\t\tthis.encapContentInfo = new EncapsulatedContentInfo({ schema: asn1.result[\"SignedData.encapContentInfo\"] });\r\n\t\t\r\n\t\tif(\"SignedData.certificates\" in asn1.result)\r\n\t\t{\r\n\t\t\tconst certificateSet = new CertificateSet({\r\n\t\t\t\tschema: new asn1js.Set({\r\n\t\t\t\t\tvalue: asn1.result[\"SignedData.certificates\"].valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\tthis.certificates = certificateSet.certificates.slice(0); // Copy all just for making comfortable access\r\n\t\t}\r\n\t\t\r\n\t\tif(\"SignedData.crls\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.crls = Array.from(asn1.result[\"SignedData.crls\"], crl =>\r\n\t\t\t{\r\n\t\t\t\tif(crl.idBlock.tagClass === 1)\r\n\t\t\t\t\treturn new CertificateRevocationList({ schema: crl });\r\n\t\t\t\t\r\n\t\t\t\t//region Create SEQUENCE from [1]\r\n\t\t\t\tcrl.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\t\t\tcrl.idBlock.tagNumber = 16; // SEQUENCE\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\treturn new OtherRevocationInfoFormat({ schema: crl });\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tif(\"SignedData.signerInfos\" in asn1.result) // Could be empty SET SignerInfos\r\n\t\t\tthis.signerInfos = Array.from(asn1.result[\"SignedData.signerInfos\"], signerInfoSchema => new SignerInfo({ schema: signerInfoSchema }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\t\r\n\t\t//region Create array of digest algorithms\r\n\t\toutputArray.push(new asn1js.Set({\r\n\t\t\tvalue: Array.from(this.digestAlgorithms, algorithm => algorithm.toSchema(encodeFlag))\r\n\t\t}));\r\n\t\t//endregion\r\n\t\t\r\n\t\toutputArray.push(this.encapContentInfo.toSchema());\r\n\t\t\r\n\t\tif(\"certificates\" in this)\r\n\t\t{\r\n\t\t\tconst certificateSet = new CertificateSet({ certificates: this.certificates });\r\n\t\t\tconst certificateSetSchema = certificateSet.toSchema();\r\n\t\t\t\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\ttagNumber: 0\r\n\t\t\t\t},\r\n\t\t\t\tvalue: certificateSetSchema.valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"crls\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.crls, crl =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(crl instanceof OtherRevocationInfoFormat)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst crlSchema = crl.toSchema(encodeFlag);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcrlSchema.idBlock.tagClass = 3;\r\n\t\t\t\t\t\tcrlSchema.idBlock.tagNumber = 1;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn crlSchema;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn crl.toSchema(encodeFlag);\r\n\t\t\t\t})\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\t//region Create array of signer infos\r\n\t\toutputArray.push(new asn1js.Set({\r\n\t\t\tvalue: Array.from(this.signerInfos, signerInfo => signerInfo.toSchema(encodeFlag))\r\n\t\t}));\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version,\r\n\t\t\tdigestAlgorithms: Array.from(this.digestAlgorithms, algorithm => algorithm.toJSON()),\r\n\t\t\tencapContentInfo: this.encapContentInfo.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"certificates\" in this)\r\n\t\t\t_object.certificates = Array.from(this.certificates, certificate => certificate.toJSON());\r\n\t\t\r\n\t\tif(\"crls\" in this)\r\n\t\t\t_object.crls = Array.from(this.crls, crl => crl.toJSON());\r\n\t\t\r\n\t\t_object.signerInfos = Array.from(this.signerInfos, signerInfo => signerInfo.toJSON());\r\n\t\t\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify current SignedData value\r\n\t * @param {Object} [param={}]\r\n\t * @param {Number} [param.signer = -1] Index of the signer which information we need to verify\r\n\t * @param {ArrayBuffer} [param.data=new ArrayBuffer(0)]\r\n\t * @param {Array.<Certificate>} [param.trustedCerts=[]]\r\n\t * @param {Date} [param.checkDate=new Date()]\r\n\t * @param {Boolean} [param.checkChain=false]\r\n\t * @param {Boolean} [param.extendedMode=false]\r\n\t * @param {?Function} [findOrigin=null]\r\n\t * @param {?Function} [findIssuer=null]\r\n\t */\r\n\tverify({\r\n\t\tsigner = (-1),\r\n\t\tdata = (new ArrayBuffer(0)),\r\n\t\ttrustedCerts = [],\r\n\t\tcheckDate = (new Date()),\r\n\t\tcheckChain = false,\r\n\t\textendedMode = false,\r\n\t\tpassedWhenNotRevValues = false,\r\n\t\tfindOrigin = null,\r\n\t\tfindIssuer = null\r\n\t} = {})\r\n\t{\r\n\t\t//region Global variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tlet messageDigestValue = new ArrayBuffer(0);\r\n\t\t\r\n\t\tlet shaAlgorithm = \"\";\r\n\t\t\r\n\t\tlet signerCertificate = {};\r\n\t\t\r\n\t\tlet timestampSerial = null;\r\n\t\t\r\n\t\tlet certificatePath = [];\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a signer number\r\n\t\tif(signer === (-1))\r\n\t\t{\r\n\t\t\tif(extendedMode)\r\n\t\t\t{\r\n\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\tcode: 1,\r\n\t\t\t\t\tmessage: \"Unable to get signer index from input parameters\",\r\n\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\tsignerCertificate: null,\r\n\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn Promise.reject(\"Unable to get signer index from input parameters\");\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check that certificates field was included in signed data\r\n\t\tif((\"certificates\" in this) === false)\r\n\t\t{\r\n\t\t\tif(extendedMode)\r\n\t\t\t{\r\n\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\tcode: 2,\r\n\t\t\t\t\tmessage: \"No certificates attached to this signed data\",\r\n\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\tsignerCertificate: null,\r\n\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn Promise.reject(\"No certificates attached to this signed data\");\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find a certificate for specified signer\r\n\t\tif(this.signerInfos[signer].sid instanceof IssuerAndSerialNumber)\r\n\t\t{\r\n\t\t\tsequence = sequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tfor(const certificate of this.certificates)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((certificate instanceof Certificate) === false)\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((certificate.issuer.isEqual(this.signerInfos[signer].sid.issuer)) &&\r\n\t\t\t\t\t\t(certificate.serialNumber.isEqual(this.signerInfos[signer].sid.serialNumber)))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsignerCertificate = certificate;\r\n\t\t\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(extendedMode)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\tcode: 3,\r\n\t\t\t\t\t\tmessage: \"Unable to find signer certificate\",\r\n\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\tsignerCertificate: null,\r\n\t\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn Promise.reject(\"Unable to find signer certificate\");\r\n\t\t\t});\r\n\t\t}\r\n\t\telse // Find by SubjectKeyIdentifier\r\n\t\t{\r\n\t\t\tsequence = sequence.then(() =>\r\n\t\t\t\tPromise.all(Array.from(this.certificates.filter(certificate => (certificate instanceof Certificate)), certificate =>\r\n\t\t\t\t\tcrypto.digest({ name: \"sha-1\" }, new Uint8Array(certificate.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex)))\r\n\t\t\t\t).then(results =>\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(const [index, certificate] of this.certificates.entries())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif((certificate instanceof Certificate) === false)\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(isEqualBuffer(results[index], this.signerInfos[signer].sid.valueBlock.valueHex))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tsignerCertificate = certificate;\r\n\t\t\t\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 3,\r\n\t\t\t\t\t\t\tmessage: \"Unable to find signer certificate\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate: null,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Unable to find signer certificate\");\r\n\t\t\t\t}, () =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 3,\r\n\t\t\t\t\t\t\tmessage: \"Unable to find signer certificate\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate: null,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Unable to find signer certificate\");\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Verify internal digest in case of \"tSTInfo\" content type\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tif(this.encapContentInfo.eContentType === \"1.2.840.113549.1.9.16.1.4\")\r\n\t\t\t{\r\n\t\t\t\t//region Check \"eContent\" precense\r\n\t\t\t\tif((\"eContent\" in this.encapContentInfo) === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Initialize TST_INFO value\r\n\t\t\t\tconst asn1 = asn1js.fromBER(this.encapContentInfo.eContent.valueBlock.valueHex);\r\n\t\t\t\tlet tstInfo;\r\n\t\t\t\t\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\ttstInfo = new TSTInfo({ schema: asn1.result });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Change \"checkDate\" and append \"timestampSerial\"\r\n\t\t\t\tcheckDate = tstInfo.genTime;\r\n\t\t\t\ttimestampSerial = tstInfo.serialNumber.valueBlock.valueHex;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Check that we do have detached data content\r\n\t\t\t\tif(data.byteLength === 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 4,\r\n\t\t\t\t\t\t\tmessage: \"Missed detached data input array\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Missed detached data input array\");\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\treturn tstInfo.verify({ data });\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Make additional verification for signer's certificate\r\n\t\tfunction checkCA(cert)\r\n\t\t{\r\n\t\t\t/// <param name=\"cert\" type=\"in_window.org.pkijs.simpl.CERT\">Certificate to find CA flag for</param>\r\n\t\t\t\r\n\t\t\t//region Do not include signer's certificate\r\n\t\t\tif((cert.issuer.isEqual(signerCertificate.issuer) === true) && (cert.serialNumber.isEqual(signerCertificate.serialNumber) === true))\r\n\t\t\t\treturn null;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tlet isCA = false;\r\n\t\t\t\r\n\t\t\tif(\"extensions\" in cert)\r\n\t\t\t{\r\n\t\t\t\tfor(const extension of cert.extensions)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extension.extnID === \"2.5.29.19\") // BasicConstraints\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(\"cA\" in extension.parsedValue)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(extension.parsedValue.cA === true)\r\n\t\t\t\t\t\t\t\tisCA = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(isCA)\r\n\t\t\t\treturn cert;\r\n\t\t\t\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t\r\n\t\tif(checkChain)\r\n\t\t{\r\n\t\t\tsequence = sequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Verify result of previous operation\r\n\t\t\t\tif(result === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tconst promiseResults = Array.from(this.certificates.filter(certificate => (certificate instanceof Certificate)), certificate => checkCA(certificate));\r\n\t\t\t\t\r\n\t\t\t\tconst certificateChainValidationEngineParameters = {\r\n\t\t\t\t\tcheckDate,\r\n\t\t\t\t\tcerts: Array.from(promiseResults.filter(_result => (_result !== null))),\r\n\t\t\t\t\ttrustedCerts\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tif(findIssuer !== null)\r\n\t\t\t\t\tcertificateChainValidationEngineParameters.findIssuer = findIssuer;\r\n\t\t\t\t\r\n\t\t\t\tif(findOrigin !== null)\r\n\t\t\t\t\tcertificateChainValidationEngineParameters.findOrigin = findOrigin;\r\n\t\t\t\t\r\n\t\t\t\tconst certificateChainEngine = new CertificateChainValidationEngine(certificateChainValidationEngineParameters);\r\n\t\t\t\t\r\n\t\t\t\tcertificateChainEngine.certs.push(signerCertificate);\r\n\t\t\t\t\r\n\t\t\t\tif(\"crls\" in this)\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(const crl of this.crls)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(\"thisUpdate\" in crl)\r\n\t\t\t\t\t\t\tcertificateChainEngine.crls.push(crl);\r\n\t\t\t\t\t\telse // Assumed \"revocation value\" has \"OtherRevocationInfoFormat\"\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(crl.otherRevInfoFormat === \"1.3.6.1.5.5.7.48.1.1\") // Basic OCSP response\r\n\t\t\t\t\t\t\t\tcertificateChainEngine.ocsps.push(new BasicOCSPResponse({ schema: crl.otherRevInfo }));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(\"ocsps\" in this)\r\n\t\t\t\t\tcertificateChainEngine.ocsps.push(...(this.ocsps));\r\n\t\t\t\t\r\n\t\t\t\treturn certificateChainEngine.verify({ passedWhenNotRevValues }).then(verificationResult =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(\"certificatePath\" in verificationResult)\r\n\t\t\t\t\t\tcertificatePath = verificationResult.certificatePath;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(verificationResult.result === true)\r\n\t\t\t\t\t\treturn Promise.resolve(true);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 5,\r\n\t\t\t\t\t\t\tmessage: `Validation of signer's certificate failed: ${verificationResult.resultMessage}`,\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: false\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Validation of signer's certificate failed\");\r\n\t\t\t\t}, error =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 5,\r\n\t\t\t\t\t\t\tmessage: `Validation of signer's certificate failed with error: ${((error instanceof Object) ? error.resultMessage : error)}`,\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: false\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(`Validation of signer's certificate failed with error: ${((error instanceof Object) ? error.resultMessage : error)}`);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find signer's hashing algorithm\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Verify result of previous operation\r\n\t\t\tif(result === false)\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tconst signerInfoHashAlgorithm = getAlgorithmByOID(this.signerInfos[signer].digestAlgorithm.algorithmId);\r\n\t\t\tif((\"name\" in signerInfoHashAlgorithm) === false)\r\n\t\t\t{\r\n\t\t\t\tif(extendedMode)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\tcode: 7,\r\n\t\t\t\t\t\tmessage: `Unsupported signature algorithm: ${this.signerInfos[signer].digestAlgorithm.algorithmId}`,\r\n\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${this.signerInfos[signer].digestAlgorithm.algorithmId}`);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tshaAlgorithm = signerInfoHashAlgorithm.name;\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create correct data block for verification\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Verify result of previous operation\r\n\t\t\tif(result === false)\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(\"eContent\" in this.encapContentInfo) // Attached data\r\n\t\t\t{\r\n\t\t\t\tif((this.encapContentInfo.eContent.idBlock.tagClass === 1) &&\r\n\t\t\t\t\t(this.encapContentInfo.eContent.idBlock.tagNumber === 4))\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this.encapContentInfo.eContent.idBlock.isConstructed === false)\r\n\t\t\t\t\t\tdata = this.encapContentInfo.eContent.valueBlock.valueHex;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor(const contentValue of this.encapContentInfo.eContent.valueBlock.value)\r\n\t\t\t\t\t\t\tdata = utilConcatBuf(data, contentValue.valueBlock.valueHex);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\tdata = this.encapContentInfo.eContent.valueBlock.valueBeforeDecode;\r\n\t\t\t}\r\n\t\t\telse // Detached data\r\n\t\t\t{\r\n\t\t\t\tif(data.byteLength === 0) // Check that \"data\" already provided by function parameter\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 8,\r\n\t\t\t\t\t\t\tmessage: \"Missed detached data input array\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Missed detached data input array\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(\"signedAttrs\" in this.signerInfos[signer])\r\n\t\t\t{\r\n\t\t\t\t//region Check mandatory attributes\r\n\t\t\t\tlet foundContentType = false;\r\n\t\t\t\tlet foundMessageDigest = false;\r\n\t\t\t\t\r\n\t\t\t\tfor(const attribute of this.signerInfos[signer].signedAttrs.attributes)\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Check that \"content-type\" attribute exists\r\n\t\t\t\t\tif(attribute.type === \"1.2.840.113549.1.9.3\")\r\n\t\t\t\t\t\tfoundContentType = true;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Check that \"message-digest\" attribute exists\r\n\t\t\t\t\tif(attribute.type === \"1.2.840.113549.1.9.4\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfoundMessageDigest = true;\r\n\t\t\t\t\t\tmessageDigestValue = attribute.values[0].valueBlock.valueHex;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Speed-up searching\r\n\t\t\t\t\tif(foundContentType && foundMessageDigest)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(foundContentType === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 9,\r\n\t\t\t\t\t\t\tmessage: \"Attribute \\\"content-type\\\" is a mandatory attribute for \\\"signed attributes\\\"\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Attribute \\\"content-type\\\" is a mandatory attribute for \\\"signed attributes\\\"\");\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(foundMessageDigest === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 10,\r\n\t\t\t\t\t\t\tmessage: \"Attribute \\\"message-digest\\\" is a mandatory attribute for \\\"signed attributes\\\"\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Attribute \\\"message-digest\\\" is a mandatory attribute for \\\"signed attributes\\\"\");\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Verify \"message-digest\" attribute in case of \"signedAttrs\"\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Verify result of previous operation\r\n\t\t\tif(result === false)\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(\"signedAttrs\" in this.signerInfos[signer])\r\n\t\t\t\treturn crypto.digest(shaAlgorithm, new Uint8Array(data));\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t}).then(\r\n\t\t\t/**\r\n\t\t\t * @param {ArrayBuffer} result\r\n\t\t\t */\r\n\t\t\tresult =>\r\n\t\t\t{\r\n\t\t\t\t//region Verify result of previous operation\r\n\t\t\t\tif(result === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tif(\"signedAttrs\" in this.signerInfos[signer])\r\n\t\t\t\t{\r\n\t\t\t\t\tif(isEqualBuffer(result, messageDigestValue))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdata = this.signerInfos[signer].signedAttrs.encodedValue;\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Verify result of previous operation\r\n\t\t\tif(result === false)\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn engine.subtle.verifyWithPublicKey(data, this.signerInfos[signer].signature, signerCertificate.subjectPublicKeyInfo, signerCertificate.signatureAlgorithm, shaAlgorithm);\r\n\t\t});\r\n\t\t\r\n\t\t//region Make a final result\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tif(extendedMode)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\tcode: 14,\r\n\t\t\t\t\tmessage: \"\",\r\n\t\t\t\t\tsignatureVerified: result,\r\n\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\ttimestampSerial,\r\n\t\t\t\t\tsignerCertificateVerified: true,\r\n\t\t\t\t\tcertificatePath\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn result;\r\n\t\t}, error =>\r\n\t\t{\r\n\t\t\tif(extendedMode)\r\n\t\t\t{\r\n\t\t\t\tif(\"code\" in error)\r\n\t\t\t\t\treturn Promise.reject(error);\r\n\t\t\t\t\r\n\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\tcode: 15,\r\n\t\t\t\t\tmessage: `Error during verification: ${error.message}`,\r\n\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\ttimestampSerial,\r\n\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn Promise.reject(error);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Signing current SignedData\r\n\t * @param {key} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {number} signerIndex Index number (starting from 0) of signer index to make signature for\r\n\t * @param {string} [hashAlgorithm=\"SHA-1\"] Hashing algorithm. Default SHA-1\r\n\t * @param {ArrayBuffer} [data] Detached data\r\n\t * @returns {*}\r\n\t */\r\n\tsign(privateKey, signerIndex, hashAlgorithm = \"SHA-1\", data = (new ArrayBuffer(0)))\r\n\t{\r\n\t\t//region Initial checking\r\n\t\tif(typeof privateKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide a private key for signing\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tlet parameters;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Simple check for supported algorithm\r\n\t\tconst hashAlgorithmOID = getOIDByAlgorithm({ name: hashAlgorithm });\r\n\t\tif(hashAlgorithmOID === \"\")\r\n\t\t\treturn Promise.reject(`Unsupported hash algorithm: ${hashAlgorithm}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Append information about hash algorithm\r\n\t\tif((this.digestAlgorithms.filter(algorithm => algorithm.algorithmId === hashAlgorithmOID)).length === 0)\r\n\t\t{\r\n\t\t\tthis.digestAlgorithms.push(new AlgorithmIdentifier({\r\n\t\t\t\talgorithmId: hashAlgorithmOID,\r\n\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tthis.signerInfos[signerIndex].digestAlgorithm = new AlgorithmIdentifier({\r\n\t\t\talgorithmId: hashAlgorithmOID,\r\n\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"default parameters\" for current algorithm and set correct signature algorithm\r\n\t\tsequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tparameters = result.parameters;\r\n\t\t\tthis.signerInfos[signerIndex].signatureAlgorithm = result.signatureAlgorithm;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create TBS data for signing\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tif(\"signedAttrs\" in this.signerInfos[signerIndex])\r\n\t\t\t{\r\n\t\t\t\tif(this.signerInfos[signerIndex].signedAttrs.encodedValue.byteLength !== 0)\r\n\t\t\t\t\tdata = this.signerInfos[signerIndex].signedAttrs.encodedValue;\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tdata = this.signerInfos[signerIndex].signedAttrs.toSchema(true).toBER(false);\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Change type from \"[0]\" to \"SET\" acordingly to standard\r\n\t\t\t\t\tconst view = new Uint8Array(data);\r\n\t\t\t\t\tview[0] = 0x31;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif(\"eContent\" in this.encapContentInfo) // Attached data\r\n\t\t\t\t{\r\n\t\t\t\t\tif((this.encapContentInfo.eContent.idBlock.tagClass === 1) &&\r\n\t\t\t\t\t\t(this.encapContentInfo.eContent.idBlock.tagNumber === 4))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(this.encapContentInfo.eContent.idBlock.isConstructed === false)\r\n\t\t\t\t\t\t\tdata = this.encapContentInfo.eContent.valueBlock.valueHex;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfor(const content of this.encapContentInfo.eContent.valueBlock.value)\r\n\t\t\t\t\t\t\t\tdata = utilConcatBuf(data, content.valueBlock.valueHex);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tdata = this.encapContentInfo.eContent.valueBlock.valueBeforeDecode;\r\n\t\t\t\t}\r\n\t\t\t\telse // Detached data\r\n\t\t\t\t{\r\n\t\t\t\t\tif(data.byteLength === 0) // Check that \"data\" already provided by function parameter\r\n\t\t\t\t\t\treturn Promise.reject(\"Missed detached data input array\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn Promise.resolve();\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Signing TBS data on provided private key\r\n\t\tsequence = sequence.then(() => engine.subtle.signWithPrivateKey(data, privateKey, parameters));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.signerInfos[signerIndex].signature = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\r\n\t\t\treturn result;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"SignedData.js"}