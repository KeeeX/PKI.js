{"version":3,"sources":["../src/RelativeDistinguishedNames.js"],"names":["RelativeDistinguishedNames","parameters","typesAndValues","defaultValues","valueBeforeDecode","fromSchema","schema","asn1","asn1js","compareSchema","names","blockName","repeatedSet","verified","Error","result","Array","from","element","AttributeTypeAndValue","RDN","byteLength","Sequence","value","Set","toSchema","fromBER","toJSON","compareTo","length","entries","index","typeAndValue","isEqual","ArrayBuffer","memberName","memberValue","name","Repeated","repeatedSequence"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, isEqualBuffer, clearProps } from \"pvutils\";\r\nimport AttributeTypeAndValue from \"./AttributeTypeAndValue.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class RelativeDistinguishedNames\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for RelativeDistinguishedNames class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t * @property {Array.<AttributeTypeAndValue>} [typesAndValues] Array of \"type and value\" objects\r\n\t * @property {ArrayBuffer} [valueBeforeDecode] Value of the RDN before decoding from schema\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<AttributeTypeAndValue>}\r\n\t\t * @desc Array of \"type and value\" objects\r\n\t\t */\r\n\t\tthis.typesAndValues = getParametersValue(parameters, \"typesAndValues\", RelativeDistinguishedNames.defaultValues(\"typesAndValues\"));\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc Value of the RDN before decoding from schema\r\n\t\t */\r\n\t\tthis.valueBeforeDecode = getParametersValue(parameters, \"valueBeforeDecode\", RelativeDistinguishedNames.defaultValues(\"valueBeforeDecode\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"typesAndValues\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"valueBeforeDecode\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RelativeDistinguishedNames class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"typesAndValues\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tcase \"valueBeforeDecode\":\r\n\t\t\t\treturn (memberValue.byteLength === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RelativeDistinguishedNames class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * RDNSequence ::= Sequence OF RelativeDistinguishedName\r\n\t *\r\n\t * RelativeDistinguishedName ::=\r\n\t * SET SIZE (1..MAX) OF AttributeTypeAndValue\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName] Name for entire block\r\n\t\t * @property {string} [repeatedSequence] Name for \"repeatedSequence\" block\r\n\t\t * @property {string} [repeatedSet] Name for \"repeatedSet\" block\r\n\t\t * @property {string} [typeAndValue] Name for \"typeAndValue\" block\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.repeatedSequence || \"\"),\r\n\t\t\t\t\tvalue: new asn1js.Set({\r\n\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\t\tname: (names.repeatedSet || \"\"),\r\n\t\t\t\t\t\t\t\tvalue: AttributeTypeAndValue.schema(names.typeAndValue || {})\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"RDN\",\r\n\t\t\t\"typesAndValues\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRelativeDistinguishedNames.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"RDN\",\r\n\t\t\t\t\trepeatedSet: \"typesAndValues\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for RelativeDistinguishedNames\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"typesAndValues\" in asn1.result) // Could be a case when there is no \"types and values\"\r\n\t\t\tthis.typesAndValues = Array.from(asn1.result.typesAndValues, element => new AttributeTypeAndValue({ schema: element }));\r\n\r\n\t\t// noinspection JSUnresolvedVariable\r\n\t\tthis.valueBeforeDecode = asn1.result.RDN.valueBeforeDecode;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Decode stored TBS value\r\n\t\tif(this.valueBeforeDecode.byteLength === 0) // No stored encoded array, create \"from scratch\"\r\n\t\t{\r\n\t\t\treturn (new asn1js.Sequence({\r\n\t\t\t\tvalue: [new asn1js.Set({\r\n\t\t\t\t\tvalue: Array.from(this.typesAndValues, element => element.toSchema())\r\n\t\t\t\t})]\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\tconst asn1 = asn1js.fromBER(this.valueBeforeDecode);\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn asn1.result;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\ttypesAndValues: Array.from(this.typesAndValues, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare two RDN values, or RDN with ArrayBuffer value\r\n\t * @param {(RelativeDistinguishedNames|ArrayBuffer)} compareTo The value compare to current\r\n\t * @returns {boolean}\r\n\t */\r\n\tisEqual(compareTo)\r\n\t{\r\n\t\tif(compareTo instanceof RelativeDistinguishedNames)\r\n\t\t{\r\n\t\t\tif(this.typesAndValues.length !== compareTo.typesAndValues.length)\r\n\t\t\t\treturn false;\r\n\r\n\t\t\tfor(const [index, typeAndValue] of this.typesAndValues.entries())\r\n\t\t\t{\r\n\t\t\t\tif(typeAndValue.isEqual(compareTo.typesAndValues[index]) === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif(compareTo instanceof ArrayBuffer)\r\n\t\t\treturn isEqualBuffer(this.valueBeforeDecode, compareTo);\r\n\r\n\t\treturn false;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"RelativeDistinguishedNames.js"}