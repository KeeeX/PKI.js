{"version":3,"sources":["../src/Attribute.js"],"names":["Attribute","parameters","type","defaultValues","values","fromSchema","schema","asn1","asn1js","compareSchema","names","verified","Error","result","valueBlock","toString","Sequence","value","ObjectIdentifier","Set","Array","from","element","toJSON","memberName","memberValue","length","name","blockName","setName","Repeated","Any"],"mappings":"6FAAA,sDACA,gC,ohCACA;AACA;;MAGqBA,CAAAA,S,yBACpB;AACA;;;;IAKA,oBACA,IADYC,CAAAA,UACZ,2DADyB,EACzB,iCACC;AACA;;;KAIA,KAAKC,IAAL,CAAY,gCAAmBD,UAAnB,CAA+B,MAA/B,CAAuCD,SAAS,CAACG,aAAV,CAAwB,MAAxB,CAAvC,CAAZ,CACA;;;KAIA,KAAKC,MAAL,CAAc,gCAAmBH,UAAnB,CAA+B,QAA/B,CAAyCD,SAAS,CAACG,aAAV,CAAwB,QAAxB,CAAzC,CAAd,CACA;AAEA;AACA,GAAG,UAAYF,CAAAA,UAAf,CACC,KAAKI,UAAL,CAAgBJ,UAAU,CAACK,MAA3B,EACD;AACA,CACD;AACA;;;8CA4EA;AACA;;;8BAIWA,M,CACX,CACC;AACA,wBAAWA,MAAX,CAAmB,CAClB,MADkB,CAElB,QAFkB,CAAnB,EAIA;AAEA;AACA,GAAMC,CAAAA,IAAI,CAAGC,MAAM,CAACC,aAAP,CAAqBH,MAArB,CACZA,MADY,CAEZN,SAAS,CAACM,MAAV,CAAiB,CAChBI,KAAK,CAAE,CACNR,IAAI,CAAE,MADA,CAENE,MAAM,CAAE,QAFF,CADS,CAAjB,CAFY,CAAb,CAUA,GAAGG,IAAI,CAACI,QAAL,GAAkB,KAArB,CACC,KAAM,IAAIC,CAAAA,KAAJ,CAAU,mEAAV,CAAN,CACD;AAEA;AACA,KAAKV,IAAL,CAAYK,IAAI,CAACM,MAAL,CAAYX,IAAZ,CAAiBY,UAAjB,CAA4BC,QAA5B,EAAZ,CACA,KAAKX,MAAL,CAAcG,IAAI,CAACM,MAAL,CAAYT,MAA1B,CACA;AACA,CACD;AACA;;;+CAKA,CACC;AACA,MAAQ,IAAII,CAAAA,MAAM,CAACQ,QAAX,CAAoB,CAC3BC,KAAK,CAAE,CACN,GAAIT,CAAAA,MAAM,CAACU,gBAAX,CAA4B,CAAED,KAAK,CAAE,KAAKf,IAAd,CAA5B,CADM,CAEN,GAAIM,CAAAA,MAAM,CAACW,GAAX,CAAe,CACdF,KAAK,CAAE,KAAKb,MADE,CAAf,CAFM,CADoB,CAApB,CAAR,CAQA;AACA,CACD;AACA;;;2CAKA,CACC,MAAO,CACNF,IAAI,CAAE,KAAKA,IADL,CAENE,MAAM,CAAEgB,KAAK,CAACC,IAAN,CAAW,KAAKjB,MAAhB,CAAwB,SAAAkB,OAAO,QAAIA,CAAAA,OAAO,CAACC,MAAR,EAAJ,EAA/B,CAFF,CAAP,CAIA,CACD;sDAxIqBC,U,CACrB,CACC,OAAOA,UAAP,EAEC,IAAK,MAAL,CACC,MAAO,EAAP,CACD,IAAK,QAAL,CACC,MAAO,EAAP,CACD,QACC,KAAM,IAAIZ,CAAAA,KAAJ,oDAAsDY,UAAtD,EAAN,CAPF,CASA,CACD;AACA;;;;kEAK0BA,U,CAAYC,W,CACtC,CACC,OAAOD,UAAP,EAEC,IAAK,MAAL,CACC,MAAQC,CAAAA,WAAW,GAAK,EAAxB,CACD,IAAK,QAAL,CACC,MAAQA,CAAAA,WAAW,CAACC,MAAZ,GAAuB,CAA/B,CACD,QACC,KAAM,IAAId,CAAAA,KAAJ,oDAAsDY,UAAtD,EAAN,CAPF,CASA,CACD;AACA;;;;;;;;;;;;;2CAeA,IADcvB,CAAAA,UACd,2DAD2B,EAC3B,CACC;;;;;;KAOA,GAAMS,CAAAA,KAAK,CAAG,gCAAmBT,UAAnB,CAA+B,OAA/B,CAAwC,EAAxC,CAAd,CAEA,MAAQ,IAAIO,CAAAA,MAAM,CAACQ,QAAX,CAAoB,CAC3BW,IAAI,CAAGjB,KAAK,CAACkB,SAAN,EAAmB,EADC,CAE3BX,KAAK,CAAE,CACN,GAAIT,CAAAA,MAAM,CAACU,gBAAX,CAA4B,CAAES,IAAI,CAAGjB,KAAK,CAACR,IAAN,EAAc,EAAvB,CAA5B,CADM,CAEN,GAAIM,CAAAA,MAAM,CAACW,GAAX,CAAe,CACdQ,IAAI,CAAGjB,KAAK,CAACmB,OAAN,EAAiB,EADV,CAEdZ,KAAK,CAAE,CACN,GAAIT,CAAAA,MAAM,CAACsB,QAAX,CAAoB,CACnBH,IAAI,CAAGjB,KAAK,CAACN,MAAN,EAAgB,EADJ,CAEnBa,KAAK,CAAE,GAAIT,CAAAA,MAAM,CAACuB,GAAX,EAFY,CAApB,CADM,CAFO,CAAf,CAFM,CAFoB,CAApB,CAAR,CAeA,C,yBAmEF","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC2986\r\n */\r\nexport default class Attribute {\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Attribute class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc ObjectIdentifier for attribute (string representation)\r\n\t\t */\r\n\t\tthis.type = getParametersValue(parameters, \"type\", Attribute.defaultValues(\"type\"));\r\n\t\t/**\r\n\t\t * @type {Array}\r\n\t\t * @desc Any attribute values\r\n\t\t */\r\n\t\tthis.values = getParametersValue(parameters, \"values\", Attribute.defaultValues(\"values\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"type\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"values\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Attribute class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"type\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"values\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Attribute class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * Attribute { ATTRIBUTE:IOSet } ::= SEQUENCE {\r\n\t *    type   ATTRIBUTE.&id({IOSet}),\r\n\t *    values SET SIZE(1..MAX) OF ATTRIBUTE.&Type({IOSet}{@type})\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [type]\r\n\t\t * @property {string} [setName]\r\n\t\t * @property {string} [values]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.type || \"\") }),\r\n\t\t\t\tnew asn1js.Set({\r\n\t\t\t\t\tname: (names.setName || \"\"),\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.values || \"\"),\r\n\t\t\t\t\t\t\tvalue: new asn1js.Any()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"type\",\r\n\t\t\t\"values\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAttribute.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\ttype: \"type\",\r\n\t\t\t\t\tvalues: \"values\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for Attribute\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.type = asn1.result.type.valueBlock.toString();\r\n\t\tthis.values = asn1.result.values;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.type }),\r\n\t\t\t\tnew asn1js.Set({\r\n\t\t\t\t\tvalue: this.values\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\ttype: this.type,\r\n\t\t\tvalues: Array.from(this.values, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"Attribute.js"}