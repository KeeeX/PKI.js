{"version":3,"sources":["../src/AlgorithmIdentifier.js"],"names":["AlgorithmIdentifier","parameters","algorithmId","defaultValues","algorithmParams","fromSchema","schema","asn1","asn1js","compareSchema","names","algorithmIdentifier","verified","Error","result","algorithm","valueBlock","toString","params","outputArray","push","ObjectIdentifier","value","Any","Sequence","object","toJSON","JSON","stringify","memberName","memberValue","name","blockName","optional"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class AlgorithmIdentifier\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AlgorithmIdentifier class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t * @property {string} [algorithmId] ObjectIdentifier for algorithm (string representation)\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc ObjectIdentifier for algorithm (string representation)\r\n\t\t */\r\n\t\tthis.algorithmId = getParametersValue(parameters, \"algorithmId\", AlgorithmIdentifier.defaultValues(\"algorithmId\"));\r\n\r\n\t\tif(\"algorithmParams\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Object}\r\n\t\t\t * @desc Any algorithm parameters\r\n\t\t\t */\r\n\t\t\tthis.algorithmParams = getParametersValue(parameters, \"algorithmParams\", AlgorithmIdentifier.defaultValues(\"algorithmParams\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"algorithmId\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"algorithmParams\":\r\n\t\t\t\treturn new asn1js.Any();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AlgorithmIdentifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"algorithmId\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"algorithmParams\":\r\n\t\t\t\treturn (memberValue instanceof asn1js.Any);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AlgorithmIdentifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * AlgorithmIdentifier  ::=  Sequence  {\r\n\t *    algorithm               OBJECT IDENTIFIER,\r\n\t *    parameters              ANY DEFINED BY algorithm OPTIONAL  }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} algorithmIdentifier ObjectIdentifier for the algorithm\r\n\t\t * @property {string} algorithmParams Any algorithm parameters\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\toptional: (names.optional || false),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.algorithmIdentifier || \"\") }),\r\n\t\t\t\tnew asn1js.Any({ name: (names.algorithmParams || \"\"), optional: true })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"algorithm\",\r\n\t\t\t\"params\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAlgorithmIdentifier.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\talgorithmIdentifier: \"algorithm\",\r\n\t\t\t\t\talgorithmParams: \"params\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AlgorithmIdentifier\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.algorithmId = asn1.result.algorithm.valueBlock.toString();\r\n\t\tif(\"params\" in asn1.result)\r\n\t\t\tthis.algorithmParams = asn1.result.params;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.algorithmId }));\r\n\t\tif((\"algorithmParams\" in this) && ((this.algorithmParams instanceof asn1js.Any) === false))\r\n\t\t\toutputArray.push(this.algorithmParams);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\talgorithmId: this.algorithmId\r\n\t\t};\r\n\r\n\t\tif((\"algorithmParams\" in this) && ((this.algorithmParams instanceof asn1js.Any) === false))\r\n\t\t\tobject.algorithmParams = this.algorithmParams.toJSON();\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Check that two \"AlgorithmIdentifiers\" are equal\r\n\t * @param {AlgorithmIdentifier} algorithmIdentifier\r\n\t * @returns {boolean}\r\n\t */\r\n\tisEqual(algorithmIdentifier)\r\n\t{\r\n\t\t//region Check input type\r\n\t\tif((algorithmIdentifier instanceof AlgorithmIdentifier) === false)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\t//region Check \"algorithm_id\"\r\n\t\tif(this.algorithmId !== algorithmIdentifier.algorithmId)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\t//region Check \"algorithm_params\"\r\n\t\tif(\"algorithmParams\" in this)\r\n\t\t{\r\n\t\t\tif(\"algorithmParams\" in algorithmIdentifier)\r\n\t\t\t\treturn JSON.stringify(this.algorithmParams) === JSON.stringify(algorithmIdentifier.algorithmParams);\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif(\"algorithmParams\" in algorithmIdentifier)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\treturn true;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"AlgorithmIdentifier.js"}