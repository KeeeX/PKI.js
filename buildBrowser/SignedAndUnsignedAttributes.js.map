{"version":3,"sources":["../src/SignedAndUnsignedAttributes.js"],"names":["SignedAndUnsignedAttributes","parameters","type","defaultValues","attributes","encodedValue","fromSchema","schema","asn1","asn1js","compareSchema","names","tagNumber","verified","Error","result","idBlock","valueBeforeDecode","encodedView","Uint8Array","Array","from","element","Attribute","compareWithDefault","Constructed","optional","tagClass","value","toSchema","toJSON","memberName","ArrayBuffer","memberValue","length","byteLength","name","blockName","Repeated"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport Attribute from \"./Attribute.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class SignedAndUnsignedAttributes\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SignedAndUnsignedAttributes class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc type\r\n\t\t */\r\n\t\tthis.type = getParametersValue(parameters, \"type\", SignedAndUnsignedAttributes.defaultValues(\"type\"));\r\n\t\t/**\r\n\t\t * @type {Array}\r\n\t\t * @desc attributes\r\n\t\t */\r\n\t\tthis.attributes = getParametersValue(parameters, \"attributes\", SignedAndUnsignedAttributes.defaultValues(\"attributes\"));\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc encodedValue Need to have it in order to successfully process with signature verification\r\n\t\t */\r\n\t\tthis.encodedValue = getParametersValue(parameters, \"encodedValue\", SignedAndUnsignedAttributes.defaultValues(\"encodedValue\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"type\":\r\n\t\t\t\treturn (-1);\r\n\t\t\tcase \"attributes\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"encodedValue\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignedAndUnsignedAttributes class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"type\":\r\n\t\t\t\treturn (memberValue === SignedAndUnsignedAttributes.defaultValues(\"type\"));\r\n\t\t\tcase \"attributes\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tcase \"encodedValue\":\r\n\t\t\t\treturn (memberValue.byteLength === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignedAndUnsignedAttributes class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * SignedAttributes ::= SET SIZE (1..MAX) OF Attribute\r\n\t *\r\n\t * UnsignedAttributes ::= SET SIZE (1..MAX) OF Attribute\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {number} [tagNumber]\r\n\t\t * @property {string} [attributes]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Constructed({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\toptional: true,\r\n\t\t\tidBlock: {\r\n\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\ttagNumber: names.tagNumber // \"SignedAttributes\" = 0, \"UnsignedAttributes\" = 1\r\n\t\t\t},\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.attributes || \"\"),\r\n\t\t\t\t\tvalue: Attribute.schema()\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"attributes\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSignedAndUnsignedAttributes.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\ttagNumber: this.type,\r\n\t\t\t\t\tattributes: \"attributes\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SignedAndUnsignedAttributes\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.type = asn1.result.idBlock.tagNumber;\r\n\t\tthis.encodedValue = asn1.result.valueBeforeDecode;\r\n\r\n\t\t//region Change type from \"[0]\" to \"SET\" accordingly to standard\r\n\t\tconst encodedView = new Uint8Array(this.encodedValue);\r\n\t\tencodedView[0] = 0x31;\r\n\t\t//endregion\r\n\r\n\t\tif((\"attributes\" in asn1.result) === false)\r\n\t\t{\r\n\t\t\tif(this.type === 0)\r\n\t\t\t\tthrow new Error(\"Wrong structure of SignedUnsignedAttributes\");\r\n\t\t\telse\r\n\t\t\t\treturn; // Not so important in case of \"UnsignedAttributes\"\r\n\t\t}\r\n\r\n\t\tthis.attributes = Array.from(asn1.result.attributes, element => new Attribute({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tif(SignedAndUnsignedAttributes.compareWithDefault(\"type\", this.type) || SignedAndUnsignedAttributes.compareWithDefault(\"attributes\", this.attributes))\r\n\t\t\tthrow new Error(\"Incorrectly initialized \\\"SignedAndUnsignedAttributes\\\" class\");\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Constructed({\r\n\t\t\toptional: true,\r\n\t\t\tidBlock: {\r\n\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\ttagNumber: this.type // \"SignedAttributes\" = 0, \"UnsignedAttributes\" = 1\r\n\t\t\t},\r\n\t\t\tvalue: Array.from(this.attributes, element => element.toSchema())\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tif(SignedAndUnsignedAttributes.compareWithDefault(\"type\", this.type) || SignedAndUnsignedAttributes.compareWithDefault(\"attributes\", this.attributes))\r\n\t\t\tthrow new Error(\"Incorrectly initialized \\\"SignedAndUnsignedAttributes\\\" class\");\r\n\t\t\r\n\t\treturn {\r\n\t\t\ttype: this.type,\r\n\t\t\tattributes: Array.from(this.attributes, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"SignedAndUnsignedAttributes.js"}