{"version":3,"sources":["../src/ResponseBytes.js"],"names":["ResponseBytes","parameters","responseType","defaultValues","response","fromSchema","schema","asn1","asn1js","compareSchema","names","verified","Error","result","valueBlock","toString","Sequence","value","ObjectIdentifier","toJSON","memberName","OctetString","memberValue","isEqual","name","blockName"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class ResponseBytes\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for ResponseBytes class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc responseType\r\n\t\t */\r\n\t\tthis.responseType = getParametersValue(parameters, \"responseType\", ResponseBytes.defaultValues(\"responseType\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc response\r\n\t\t */\r\n\t\tthis.response = getParametersValue(parameters, \"response\", ResponseBytes.defaultValues(\"response\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"responseType\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"response\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ResponseBytes class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"responseType\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"response\":\r\n\t\t\t\treturn (memberValue.isEqual(ResponseBytes.defaultValues(memberName)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ResponseBytes class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * ResponseBytes ::=       SEQUENCE {\r\n\t *    responseType   OBJECT IDENTIFIER,\r\n\t *    response       OCTET STRING }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [responseType]\r\n\t\t * @property {string} [response]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.responseType || \"\") }),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.response || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"responseType\",\r\n\t\t\t\"response\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tResponseBytes.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tresponseType: \"responseType\",\r\n\t\t\t\t\tresponse: \"response\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ResponseBytes\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.responseType = asn1.result.responseType.valueBlock.toString();\r\n\t\tthis.response = asn1.result.response;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.responseType }),\r\n\t\t\t\tthis.response\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tresponseType: this.responseType,\r\n\t\t\tresponse: this.response.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"ResponseBytes.js"}