{"version":3,"sources":["../src/PasswordRecipientinfo.js"],"names":["PasswordRecipientinfo","parameters","version","defaultValues","keyDerivationAlgorithm","keyEncryptionAlgorithm","encryptedKey","password","fromSchema","schema","asn1","asn1js","compareSchema","names","blockName","verified","Error","result","valueBlock","valueDec","AlgorithmIdentifier","Sequence","value","outputArray","push","Integer","Constructed","idBlock","tagClass","tagNumber","toSchema","toJSON","memberName","OctetString","ArrayBuffer","memberValue","algorithmId","isEqual","byteLength","name","optional"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class PasswordRecipientinfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PasswordRecipientinfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", PasswordRecipientinfo.defaultValues(\"version\"));\r\n\r\n\t\tif(\"keyDerivationAlgorithm\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {AlgorithmIdentifier}\r\n\t\t\t * @desc keyDerivationAlgorithm\r\n\t\t\t */\r\n\t\t\tthis.keyDerivationAlgorithm = getParametersValue(parameters, \"keyDerivationAlgorithm\", PasswordRecipientinfo.defaultValues(\"keyDerivationAlgorithm\"));\r\n\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc keyEncryptionAlgorithm\r\n\t\t */\r\n\t\tthis.keyEncryptionAlgorithm = getParametersValue(parameters, \"keyEncryptionAlgorithm\", PasswordRecipientinfo.defaultValues(\"keyEncryptionAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc encryptedKey\r\n\t\t */\r\n\t\tthis.encryptedKey = getParametersValue(parameters, \"encryptedKey\", PasswordRecipientinfo.defaultValues(\"encryptedKey\"));\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc password Password to derive key from\r\n\t\t */\r\n\t\tthis.password = getParametersValue(parameters, \"password\", PasswordRecipientinfo.defaultValues(\"password\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (-1);\r\n\t\t\tcase \"keyDerivationAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"keyEncryptionAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"encryptedKey\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"password\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PasswordRecipientinfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === (-1));\r\n\t\t\tcase \"keyDerivationAlgorithm\":\r\n\t\t\tcase \"keyEncryptionAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"encryptedKey\":\r\n\t\t\t\treturn (memberValue.isEqual(PasswordRecipientinfo.defaultValues(\"encryptedKey\")));\r\n\t\t\tcase \"password\":\r\n\t\t\t\treturn (memberValue.byteLength === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PasswordRecipientinfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PasswordRecipientInfo ::= SEQUENCE {\r\n\t *    version CMSVersion,   -- Always set to 0\r\n\t *    keyDerivationAlgorithm [0] KeyDerivationAlgorithmIdentifier OPTIONAL,\r\n\t *    keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\r\n\t *    encryptedKey EncryptedKey }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [keyDerivationAlgorithm]\r\n\t\t * @property {string} [keyEncryptionAlgorithm]\r\n\t\t * @property {string} [encryptedKey]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tname: (names.keyDerivationAlgorithm || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: AlgorithmIdentifier.schema().valueBlock.value\r\n\t\t\t\t}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.encryptedKey || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"keyDerivationAlgorithm\",\r\n\t\t\t\"keyEncryptionAlgorithm\",\r\n\t\t\t\"encryptedKey\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPasswordRecipientinfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tkeyDerivationAlgorithm: \"keyDerivationAlgorithm\",\r\n\t\t\t\t\tkeyEncryptionAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"keyEncryptionAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tencryptedKey: \"encryptedKey\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PasswordRecipientinfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\r\n\t\tif(\"keyDerivationAlgorithm\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.keyDerivationAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\tschema: new asn1js.Sequence({\r\n\t\t\t\t\tvalue: asn1.result.keyDerivationAlgorithm.valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tthis.keyEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyEncryptionAlgorithm });\r\n\t\tthis.encryptedKey = asn1.result.encryptedKey;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create output array for sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\r\n\t\tif(\"keyDerivationAlgorithm\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.keyDerivationAlgorithm.toSchema().valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\toutputArray.push(this.keyEncryptionAlgorithm.toSchema());\r\n\t\toutputArray.push(this.encryptedKey);\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tversion: this.version,\r\n\t\t\tkeyDerivationAlgorithm: this.keyDerivationAlgorithm.toJSON(),\r\n\t\t\tkeyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\r\n\t\t\tencryptedKey: this.encryptedKey.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"PasswordRecipientinfo.js"}