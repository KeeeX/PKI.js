{"version":3,"sources":["../src/EnvelopedData.js"],"names":["EnvelopedData","parameters","version","defaultValues","originatorInfo","recipientInfos","encryptedContentInfo","unprotectedAttrs","fromSchema","schema","asn1","asn1js","compareSchema","names","blockName","verified","Error","result","valueBlock","valueDec","OriginatorInfo","Sequence","value","Array","from","element","RecipientInfo","EncryptedContentInfo","Attribute","outputArray","push","Integer","Constructed","optional","idBlock","tagClass","tagNumber","toSchema","Set","_object","toJSON","certificate","variant","encryptionParameters","subjectPublicKeyInfo","algorithm","algorithmId","indexOf","oaepHashAlgorithm","kdfAlgorithm","kekEncryptionLength","oaepOID","name","hashOID","hashAlgorithm","AlgorithmIdentifier","algorithmParams","Null","rsaOAEPParams","RSAESOAEPParams","maskGenAlgorithm","keyInfo","KeyTransRecipientInfo","rid","IssuerAndSerialNumber","issuer","serialNumber","keyEncryptionAlgorithm","recipientCertificate","encryptedKey","RecipientEncryptedKey","KeyAgreeRecipientIdentifier","aesKWoid","length","aesKW","ecdhOID","kdf","ukmBuffer","ArrayBuffer","ukmView","Uint8Array","KeyAgreeRecipientInfo","ukm","OctetString","valueHex","recipientEncryptedKeys","RecipientEncryptedKeys","encryptedKeys","preDefinedData","byteLength","keyIdentifierBuffer","keyIdentifierView","keyIdentifier","hmacHashAlgorithm","iterationCount","keyEncryptionAlgorithmParams","kekOID","KEKRecipientInfo","kekid","KEKIdentifier","preDefinedKEK","pbkdf2OID","saltBuffer","saltView","hmacOID","hash","pbkdf2Params","PBKDF2Params","salt","prf","PasswordRecipientinfo","keyDerivationAlgorithm","password","contentEncryptionAlgorithm","contentToEncrypt","sequence","Promise","resolve","ivBuffer","ivView","contentView","sessionKey","encryptedContent","exportedSessionKey","recipientsPromises","_this","contentEncryptionOID","reject","crypto","then","generateKey","encrypt","iv","error","exportKey","contentType","SubKeyAgreeRecipientInfo","index","currentSequence","ecdhPublicKey","ecdhPrivateKey","recipientCurve","recipientCurveLength","exportedECDHPublicKey","curveObject","ObjectIdentifier","curveOID","toString","namedCurve","publicKey","privateKey","getPublicKey","usages","deriveBits","public","aesKWAlgorithm","KWalgorithm","kwLength","kwLengthBuffer","kwLengthView","j","eccInfo","ECCCMSSharedInfo","entityUInfo","suppPubInfo","encodedInfo","toBER","ecdhAlgorithm","importKey","wrapKey","fromBER","originator","OriginatorIdentifierOrKey","OriginatorPublicKey","SubKeyTransRecipientInfo","SubKEKRecipientInfo","kekAlgorithm","SubPasswordRecipientinfo","ex","passwordView","iterations","deriveKey","i","all","recipientIndex","decryptionParameters","recipientPrivateKey","buffer","unwrapKey","decrypt","dataBuffer","isConstructed","content","memberName","memberValue","certs","certificates","crls","compareWithDefault","Repeated"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, utilConcatBuf, clearProps } from \"pvutils\";\r\nimport { getOIDByAlgorithm, getRandomValues, getCrypto, getAlgorithmByOID, kdf } from \"./common.js\";\r\nimport OriginatorInfo from \"./OriginatorInfo.js\";\r\nimport RecipientInfo from \"./RecipientInfo.js\";\r\nimport EncryptedContentInfo from \"./EncryptedContentInfo.js\";\r\nimport Attribute from \"./Attribute.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport RSAESOAEPParams from \"./RSAESOAEPParams.js\";\r\nimport KeyTransRecipientInfo from \"./KeyTransRecipientInfo.js\";\r\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\";\r\nimport RecipientEncryptedKey from \"./RecipientEncryptedKey.js\";\r\nimport KeyAgreeRecipientIdentifier from \"./KeyAgreeRecipientIdentifier.js\";\r\nimport KeyAgreeRecipientInfo from \"./KeyAgreeRecipientInfo.js\";\r\nimport RecipientEncryptedKeys from \"./RecipientEncryptedKeys.js\";\r\nimport KEKRecipientInfo from \"./KEKRecipientInfo.js\";\r\nimport KEKIdentifier from \"./KEKIdentifier.js\";\r\nimport PBKDF2Params from \"./PBKDF2Params.js\";\r\nimport PasswordRecipientinfo from \"./PasswordRecipientinfo.js\";\r\nimport ECCCMSSharedInfo from \"./ECCCMSSharedInfo.js\";\r\nimport OriginatorIdentifierOrKey from \"./OriginatorIdentifierOrKey.js\";\r\nimport OriginatorPublicKey from \"./OriginatorPublicKey.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class EnvelopedData \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for EnvelopedData class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", EnvelopedData.defaultValues(\"version\"));\r\n\t\t\r\n\t\tif(\"originatorInfo\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {OriginatorInfo}\r\n\t\t\t * @desc originatorInfo\r\n\t\t\t */\r\n\t\t\tthis.originatorInfo = getParametersValue(parameters, \"originatorInfo\", EnvelopedData.defaultValues(\"originatorInfo\"));\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Array.<RecipientInfo>}\r\n\t\t * @desc recipientInfos\r\n\t\t */\r\n\t\tthis.recipientInfos = getParametersValue(parameters, \"recipientInfos\", EnvelopedData.defaultValues(\"recipientInfos\"));\r\n\t\t/**\r\n\t\t * @type {EncryptedContentInfo}\r\n\t\t * @desc encryptedContentInfo\r\n\t\t */\r\n\t\tthis.encryptedContentInfo = getParametersValue(parameters, \"encryptedContentInfo\", EnvelopedData.defaultValues(\"encryptedContentInfo\"));\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Attribute>}\r\n\t\t\t * @desc unprotectedAttrs\r\n\t\t\t */\r\n\t\t\tthis.unprotectedAttrs = getParametersValue(parameters, \"unprotectedAttrs\", EnvelopedData.defaultValues(\"unprotectedAttrs\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"originatorInfo\":\r\n\t\t\t\treturn new OriginatorInfo();\r\n\t\t\tcase \"recipientInfos\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"encryptedContentInfo\":\r\n\t\t\t\treturn new EncryptedContentInfo();\r\n\t\t\tcase \"unprotectedAttrs\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EnvelopedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === EnvelopedData.defaultValues(memberName));\r\n\t\t\tcase \"originatorInfo\":\r\n\t\t\t\treturn ((memberValue.certs.certificates.length === 0) && (memberValue.crls.crls.length === 0));\r\n\t\t\tcase \"recipientInfos\":\r\n\t\t\tcase \"unprotectedAttrs\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tcase \"encryptedContentInfo\":\r\n\t\t\t\treturn ((EncryptedContentInfo.compareWithDefault(\"contentType\", memberValue.contentType)) &&\r\n\t\t\t\t(EncryptedContentInfo.compareWithDefault(\"contentEncryptionAlgorithm\", memberValue.contentEncryptionAlgorithm) &&\r\n\t\t\t\t(EncryptedContentInfo.compareWithDefault(\"encryptedContent\", memberValue.encryptedContent))));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EnvelopedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * EnvelopedData ::= SEQUENCE {\r\n\t *    version CMSVersion,\r\n\t *    originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,\r\n\t *    recipientInfos RecipientInfos,\r\n\t *    encryptedContentInfo EncryptedContentInfo,\r\n\t *    unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [originatorInfo]\r\n\t\t * @property {string} [recipientInfos]\r\n\t\t * @property {string} [encryptedContentInfo]\r\n\t\t * @property {string} [unprotectedAttrs]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tname: (names.originatorInfo || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: OriginatorInfo.schema().valueBlock.value\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Set({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.recipientInfos || \"\"),\r\n\t\t\t\t\t\t\tvalue: RecipientInfo.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tEncryptedContentInfo.schema(names.encryptedContentInfo || {}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.unprotectedAttrs || \"\"),\r\n\t\t\t\t\t\t\tvalue: Attribute.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"originatorInfo\",\r\n\t\t\t\"recipientInfos\",\r\n\t\t\t\"encryptedContentInfo\",\r\n\t\t\t\"unprotectedAttrs\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tEnvelopedData.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\toriginatorInfo: \"originatorInfo\",\r\n\t\t\t\t\trecipientInfos: \"recipientInfos\",\r\n\t\t\t\t\tencryptedContentInfo: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"encryptedContentInfo\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tunprotectedAttrs: \"unprotectedAttrs\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for EnvelopedData\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\t\r\n\t\tif(\"originatorInfo\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.originatorInfo = new OriginatorInfo({\r\n\t\t\t\tschema: new asn1js.Sequence({\r\n\t\t\t\t\tvalue: asn1.result.originatorInfo.valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tthis.recipientInfos = Array.from(asn1.result.recipientInfos, element => new RecipientInfo({ schema: element }));\r\n\t\tthis.encryptedContentInfo = new EncryptedContentInfo({ schema: asn1.result.encryptedContentInfo });\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in asn1.result)\r\n\t\t\tthis.unprotectedAttrs = Array.from(asn1.result.unprotectedAttrs, element => new Attribute({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\t\r\n\t\tif(\"originatorInfo\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.originatorInfo.toSchema().valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\toutputArray.push(new asn1js.Set({\r\n\t\t\tvalue: Array.from(this.recipientInfos, element => element.toSchema())\r\n\t\t}));\r\n\t\t\r\n\t\toutputArray.push(this.encryptedContentInfo.toSchema());\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.unprotectedAttrs, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version\r\n\t\t};\r\n\t\t\r\n\t\tif(\"originatorInfo\" in this)\r\n\t\t\t_object.originatorInfo = this.originatorInfo.toJSON();\r\n\t\t\r\n\t\t_object.recipientInfos = Array.from(this.recipientInfos, element => element.toJSON());\r\n\t\t_object.encryptedContentInfo = this.encryptedContentInfo.toJSON();\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in this)\r\n\t\t\t_object.unprotectedAttrs = Array.from(this.unprotectedAttrs, element => element.toJSON());\r\n\t\t\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Helpers function for filling \"RecipientInfo\" based on recipient's certificate.\r\n\t * Problem with WebCrypto is that for RSA certificates we have only one option - \"key transport\" and\r\n\t * for ECC certificates we also have one option - \"key agreement\". As soon as Google will implement\r\n\t * DH algorithm it would be possible to use \"key agreement\" also for RSA certificates.\r\n\t * @param {Certificate} [certificate] Recipient's certificate\r\n\t * @param {Object} [parameters] Additional parameters neccessary for \"fine tunning\" of encryption process\r\n\t * @param {number} [variant] Variant = 1 is for \"key transport\", variant = 2 is for \"key agreement\". In fact the \"variant\" is unneccessary now because Google has no DH algorithm implementation. Thus key encryption scheme would be choosen by certificate type only: \"key transport\" for RSA and \"key agreement\" for ECC certificates.\r\n\t */\r\n\taddRecipientByCertificate(certificate, parameters, variant)\r\n\t{\r\n\t\t//region Initial variables \r\n\t\tconst encryptionParameters = parameters || {};\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Check type of certificate\r\n\t\tif(certificate.subjectPublicKeyInfo.algorithm.algorithmId.indexOf(\"1.2.840.113549\") !== (-1))\r\n\t\t\tvariant = 1; // For the moment it is the only variant for RSA-based certificates\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(certificate.subjectPublicKeyInfo.algorithm.algorithmId.indexOf(\"1.2.840.10045\") !== (-1))\r\n\t\t\t\tvariant = 2; // For the moment it is the only variant for ECC-based certificates\r\n\t\t\telse\r\n\t\t\t\tthrow new Error(`Unknown type of certificate's public key: ${certificate.subjectPublicKeyInfo.algorithm.algorithmId}`);\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initialize encryption parameters \r\n\t\tif((\"oaepHashAlgorithm\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.oaepHashAlgorithm = \"SHA-512\";\r\n\t\t\r\n\t\tif((\"kdfAlgorithm\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.kdfAlgorithm = \"SHA-512\";\r\n\t\t\r\n\t\tif((\"kekEncryptionLength\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.kekEncryptionLength = 256;\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Add new \"recipient\" depends on \"variant\" and certificate type \r\n\t\tswitch(variant)\r\n\t\t{\r\n\t\t\tcase 1: // Key transport scheme\r\n\t\t\t\t{\r\n\t\t\t\t\t//region keyEncryptionAlgorithm\r\n\t\t\t\t\tconst oaepOID = getOIDByAlgorithm({\r\n\t\t\t\t\t\tname: \"RSA-OAEP\"\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(oaepOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(\"Can not find OID for OAEP\");\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region RSAES-OAEP-params\r\n\t\t\t\t\tconst hashOID = getOIDByAlgorithm({\r\n\t\t\t\t\t\tname: encryptionParameters.oaepHashAlgorithm\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(hashOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(`Unknown OAEP hash algorithm: ${encryptionParameters.oaepHashAlgorithm}`);\r\n\t\t\t\t\r\n\t\t\t\t\tconst hashAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: hashOID,\r\n\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\t\tconst rsaOAEPParams = new RSAESOAEPParams({\r\n\t\t\t\t\t\thashAlgorithm,\r\n\t\t\t\t\t\tmaskGenAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.8\", // id-mgf1\r\n\t\t\t\t\t\t\talgorithmParams: hashAlgorithm.toSchema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region KeyTransRecipientInfo\r\n\t\t\t\t\tconst keyInfo = new KeyTransRecipientInfo({\r\n\t\t\t\t\t\tversion: 0,\r\n\t\t\t\t\t\trid: new IssuerAndSerialNumber({\r\n\t\t\t\t\t\t\tissuer: certificate.issuer,\r\n\t\t\t\t\t\t\tserialNumber: certificate.serialNumber\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tkeyEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: oaepOID,\r\n\t\t\t\t\t\t\talgorithmParams: rsaOAEPParams.toSchema()\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\trecipientCertificate: certificate\r\n\t\t\t\t\t\t// \"encryptedKey\" will be calculated in \"encrypt\" function\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Final values for \"CMS_ENVELOPED_DATA\"\r\n\t\t\t\t\tthis.recipientInfos.push(new RecipientInfo({\r\n\t\t\t\t\t\tvariant: 1,\r\n\t\t\t\t\t\tvalue: keyInfo\r\n\t\t\t\t\t}));\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2: // Key agreement scheme\r\n\t\t\t\t{\r\n\t\t\t\t\t//region RecipientEncryptedKey\r\n\t\t\t\t\tconst encryptedKey = new RecipientEncryptedKey({\r\n\t\t\t\t\t\trid: new KeyAgreeRecipientIdentifier({\r\n\t\t\t\t\t\t\tvariant: 1,\r\n\t\t\t\t\t\t\tvalue: new IssuerAndSerialNumber({\r\n\t\t\t\t\t\t\t\tissuer: certificate.issuer,\r\n\t\t\t\t\t\t\t\tserialNumber: certificate.serialNumber\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t// \"encryptedKey\" will be calculated in \"encrypt\" function\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region keyEncryptionAlgorithm\r\n\t\t\t\t\tconst aesKWoid = getOIDByAlgorithm({\r\n\t\t\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\t\t\tlength: encryptionParameters.kekEncryptionLength\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(aesKWoid === \"\")\r\n\t\t\t\t\t\tthrow new Error(`Unknown length for key encryption algorithm: ${encryptionParameters.kekEncryptionLength}`);\r\n\t\t\t\t\r\n\t\t\t\t\tconst aesKW = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: aesKWoid,\r\n\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region KeyAgreeRecipientInfo\r\n\t\t\t\t\tconst ecdhOID = getOIDByAlgorithm({\r\n\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\tkdf: encryptionParameters.kdfAlgorithm\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(ecdhOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(`Unknown KDF algorithm: ${encryptionParameters.kdfAlgorithm}`);\r\n\t\t\t\t\r\n\t\t\t\t\t// In fact there is no need in so long UKM, but RFC2631\r\n\t\t\t\t\t// has requirement that \"UserKeyMaterial\" must be 512 bits long\r\n\t\t\t\t\tconst ukmBuffer = new ArrayBuffer(64);\r\n\t\t\t\t\tconst ukmView = new Uint8Array(ukmBuffer);\r\n\t\t\t\t\tgetRandomValues(ukmView); // Generate random values in 64 bytes long buffer\r\n\t\t\t\t\r\n\t\t\t\t\tconst keyInfo = new KeyAgreeRecipientInfo({\r\n\t\t\t\t\t\tversion: 3,\r\n\t\t\t\t\t\t// \"originator\" will be calculated in \"encrypt\" function because ephemeral key would be generated there\r\n\t\t\t\t\t\tukm: new asn1js.OctetString({ valueHex: ukmBuffer }),\r\n\t\t\t\t\t\tkeyEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: ecdhOID,\r\n\t\t\t\t\t\t\talgorithmParams: aesKW.toSchema()\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\trecipientEncryptedKeys: new RecipientEncryptedKeys({\r\n\t\t\t\t\t\t\tencryptedKeys: [encryptedKey]\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\trecipientCertificate: certificate\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Final values for \"CMS_ENVELOPED_DATA\"\r\n\t\t\t\t\tthis.recipientInfos.push(new RecipientInfo({\r\n\t\t\t\t\t\tvariant: 2,\r\n\t\t\t\t\t\tvalue: keyInfo\r\n\t\t\t\t\t}));\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Unknown \"variant\" value: ${variant}`);\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Add recipient based on pre-defined data like password or KEK\r\n\t * @param {ArrayBuffer} preDefinedData ArrayBuffer with pre-defined data\r\n\t * @param {Object} parameters Additional parameters neccessary for \"fine tunning\" of encryption process\r\n\t * @param {number} variant Variant = 1 for pre-defined \"key encryption key\" (KEK). Variant = 2 for password-based encryption.\r\n\t */\r\n\taddRecipientByPreDefinedData(preDefinedData, parameters, variant)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tconst encryptionParameters = parameters || {};\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check initial parameters\r\n\t\tif((preDefinedData instanceof ArrayBuffer) === false)\r\n\t\t\tthrow new Error(\"Please pass \\\"preDefinedData\\\" in ArrayBuffer type\");\r\n\t\t\r\n\t\tif(preDefinedData.byteLength === 0)\r\n\t\t\tthrow new Error(\"Pre-defined data could have zero length\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initialize encryption parameters\r\n\t\tif((\"keyIdentifier\" in encryptionParameters) === false)\r\n\t\t{\r\n\t\t\tconst keyIdentifierBuffer = new ArrayBuffer(16);\r\n\t\t\tconst keyIdentifierView = new Uint8Array(keyIdentifierBuffer);\r\n\t\t\tgetRandomValues(keyIdentifierView);\r\n\t\t\t\r\n\t\t\tencryptionParameters.keyIdentifier = keyIdentifierBuffer;\r\n\t\t}\r\n\t\t\r\n\t\tif((\"hmacHashAlgorithm\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.hmacHashAlgorithm = \"SHA-512\";\r\n\t\t\r\n\t\tif((\"iterationCount\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.iterationCount = 2048;\r\n\t\t\r\n\t\tif((\"keyEncryptionAlgorithm\" in encryptionParameters) === false)\r\n\t\t{\r\n\t\t\tencryptionParameters.keyEncryptionAlgorithm = {\r\n\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\tlength: 256\r\n\t\t\t};\r\n\t\t}\r\n\t\t\r\n\t\tif((\"keyEncryptionAlgorithmParams\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.keyEncryptionAlgorithmParams = new asn1js.Null();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Add new recipient based on passed variant\r\n\t\tswitch(variant)\r\n\t\t{\r\n\t\t\tcase 1: // KEKRecipientInfo\r\n\t\t\t\t{\r\n\t\t\t\t\t//region keyEncryptionAlgorithm\r\n\t\t\t\t\tconst kekOID = getOIDByAlgorithm(encryptionParameters.keyEncryptionAlgorithm);\r\n\t\t\t\t\tif(kekOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(\"Incorrect value for \\\"keyEncryptionAlgorithm\\\"\");\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region KEKRecipientInfo\r\n\t\t\t\t\tconst keyInfo = new KEKRecipientInfo({\r\n\t\t\t\t\t\tversion: 4,\r\n\t\t\t\t\t\tkekid: new KEKIdentifier({\r\n\t\t\t\t\t\t\tkeyIdentifier: new asn1js.OctetString({ valueHex: encryptionParameters.keyIdentifier })\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tkeyEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: kekOID,\r\n\t\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t\t For AES-KW params are NULL, but for other algorithm could another situation.\r\n\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\talgorithmParams: encryptionParameters.keyEncryptionAlgorithmParams\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tpreDefinedKEK: preDefinedData\r\n\t\t\t\t\t// \"encryptedKey\" would be set in \"ecrypt\" function\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Final values for \"CMS_ENVELOPED_DATA\"\r\n\t\t\t\t\tthis.recipientInfos.push(new RecipientInfo({\r\n\t\t\t\t\t\tvariant: 3,\r\n\t\t\t\t\t\tvalue: keyInfo\r\n\t\t\t\t\t}));\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2: // PasswordRecipientinfo\r\n\t\t\t\t{\r\n\t\t\t\t\t//region keyDerivationAlgorithm\r\n\t\t\t\t\tconst pbkdf2OID = getOIDByAlgorithm({\r\n\t\t\t\t\t\tname: \"PBKDF2\"\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(pbkdf2OID === \"\")\r\n\t\t\t\t\t\tthrow new Error(\"Can not find OID for PBKDF2\");\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Salt\r\n\t\t\t\t\tconst saltBuffer = new ArrayBuffer(64);\r\n\t\t\t\t\tconst saltView = new Uint8Array(saltBuffer);\r\n\t\t\t\t\tgetRandomValues(saltView);\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region HMAC-based algorithm\r\n\t\t\t\t\tconst hmacOID = getOIDByAlgorithm({\r\n\t\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\tname: encryptionParameters.hmacHashAlgorithm\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(hmacOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(`Incorrect value for \"hmacHashAlgorithm\": ${encryptionParameters.hmacHashAlgorithm}`);\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region PBKDF2-params\r\n\t\t\t\t\tconst pbkdf2Params = new PBKDF2Params({\r\n\t\t\t\t\t\tsalt: new asn1js.OctetString({ valueHex: saltBuffer }),\r\n\t\t\t\t\t\titerationCount: encryptionParameters.iterationCount,\r\n\t\t\t\t\t\tprf: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: hmacOID,\r\n\t\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region keyEncryptionAlgorithm\r\n\t\t\t\t\tconst kekOID = getOIDByAlgorithm(encryptionParameters.keyEncryptionAlgorithm);\r\n\t\t\t\t\tif(kekOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(\"Incorrect value for \\\"keyEncryptionAlgorithm\\\"\");\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region PasswordRecipientinfo\r\n\t\t\t\t\tconst keyInfo = new PasswordRecipientinfo({\r\n\t\t\t\t\t\tversion: 0,\r\n\t\t\t\t\t\tkeyDerivationAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: pbkdf2OID,\r\n\t\t\t\t\t\t\talgorithmParams: pbkdf2Params.toSchema()\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tkeyEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: kekOID,\r\n\t\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t\t For AES-KW params are NULL, but for other algorithm could be another situation.\r\n\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\talgorithmParams: encryptionParameters.keyEncryptionAlgorithmParams\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tpassword: preDefinedData\r\n\t\t\t\t\t// \"encryptedKey\" would be set in \"ecrypt\" function\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Final values for \"CMS_ENVELOPED_DATA\"\r\n\t\t\t\t\tthis.recipientInfos.push(new RecipientInfo({\r\n\t\t\t\t\t\tvariant: 4,\r\n\t\t\t\t\t\tvalue: keyInfo\r\n\t\t\t\t\t}));\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Unknown value for \"variant\": ${variant}`);\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Create a new CMS Enveloped Data content with encrypted data\r\n\t * @param {Object} contentEncryptionAlgorithm WebCrypto algorithm. For the moment here could be only \"AES-CBC\" or \"AES-GCM\" algorithms.\r\n\t * @param {ArrayBuffer} contentToEncrypt Content to encrypt\r\n\t * @returns {Promise}\r\n\t */\r\n\tencrypt(contentEncryptionAlgorithm, contentToEncrypt)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst ivBuffer = new ArrayBuffer(16); // For AES we need IV 16 bytes long\r\n\t\tconst ivView = new Uint8Array(ivBuffer);\r\n\t\tgetRandomValues(ivView);\r\n\t\t\r\n\t\tconst contentView = new Uint8Array(contentToEncrypt);\r\n\t\t\r\n\t\tlet sessionKey;\r\n\t\tlet encryptedContent;\r\n\t\tlet exportedSessionKey;\r\n\t\t\r\n\t\tconst recipientsPromises = [];\r\n\t\t\r\n\t\tconst _this = this;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check for input parameters\r\n\t\tconst contentEncryptionOID = getOIDByAlgorithm(contentEncryptionAlgorithm);\r\n\t\tif(contentEncryptionOID === \"\")\r\n\t\t\treturn Promise.reject(\"Wrong \\\"contentEncryptionAlgorithm\\\" value\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Generate new content encryption key\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tcrypto.generateKey(contentEncryptionAlgorithm, true, [\"encrypt\"]));\r\n\t\t//endregion\r\n\t\t//region Encrypt content\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tsessionKey = result;\r\n\t\t\t\r\n\t\t\treturn crypto.encrypt({\r\n\t\t\t\tname: contentEncryptionAlgorithm.name,\r\n\t\t\t\tiv: ivView\r\n\t\t\t},\r\n\t\t\tsessionKey,\r\n\t\t\tcontentView);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error));\r\n\t\t//endregion\r\n\t\t//region Export raw content of content encryption key\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Create output OCTETSTRING with encrypted content\r\n\t\t\tencryptedContent = result;\r\n\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\treturn crypto.exportKey(\"raw\", sessionKey);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t).then(result =>\r\n\t\t{\r\n\t\t\texportedSessionKey = result;\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error));\r\n\t\t//endregion\r\n\t\t//region Append common information to CMS_ENVELOPED_DATA\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tthis.version = 2;\r\n\t\t\tthis.encryptedContentInfo = new EncryptedContentInfo({\r\n\t\t\t\tcontentType: \"1.2.840.113549.1.7.1\", // \"data\"\r\n\t\t\t\tcontentEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: contentEncryptionOID,\r\n\t\t\t\t\talgorithmParams: new asn1js.OctetString({ valueHex: ivBuffer })\r\n\t\t\t\t}),\r\n\t\t\t\tencryptedContent: new asn1js.OctetString({ valueHex: encryptedContent })\r\n\t\t\t});\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Special sub-functions to work with each recipient's type\r\n\t\tfunction SubKeyAgreeRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\t\r\n\t\t\tlet ecdhPublicKey;\r\n\t\t\tlet ecdhPrivateKey;\r\n\t\t\t\r\n\t\t\tlet recipientCurve;\r\n\t\t\tlet recipientCurveLength;\r\n\t\t\t\r\n\t\t\tlet exportedECDHPublicKey;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Get \"namedCurve\" parameter from recipient's certificate\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tconst curveObject = _this.recipientInfos[index].value.recipientCertificate.subjectPublicKeyInfo.algorithm.algorithmParams;\r\n\t\t\t\t\r\n\t\t\t\tif((curveObject instanceof asn1js.ObjectIdentifier) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \"recipientCertificate\" for index ${index}`);\r\n\t\t\t\t\r\n\t\t\t\tconst curveOID = curveObject.valueBlock.toString();\r\n\t\t\t\t\r\n\t\t\t\tswitch(curveOID)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"1.2.840.10045.3.1.7\":\r\n\t\t\t\t\t\trecipientCurve = \"P-256\";\r\n\t\t\t\t\t\trecipientCurveLength = 256;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"1.3.132.0.34\":\r\n\t\t\t\t\t\trecipientCurve = \"P-384\";\r\n\t\t\t\t\t\trecipientCurveLength = 384;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"1.3.132.0.35\":\r\n\t\t\t\t\t\trecipientCurve = \"P-521\";\r\n\t\t\t\t\t\trecipientCurveLength = 528;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect curve OID for index ${index}`);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn recipientCurve;\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Generate ephemeral ECDH key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.generateKey({\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tnamedCurve: result\r\n\t\t\t\t},\r\n\t\t\t\ttrue,\r\n\t\t\t\t[\"deriveBits\"]),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Export public key of ephemeral ECDH key pair\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\tecdhPublicKey = result.publicKey;\r\n\t\t\t\tecdhPrivateKey = result.privateKey;\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.exportKey(\"spki\", ecdhPublicKey);\r\n\t\t\t},\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Import recipient's public key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\texportedECDHPublicKey = result;\r\n\t\t\t\t\r\n\t\t\t\treturn _this.recipientInfos[index].value.recipientCertificate.getPublicKey({\r\n\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\t\tnamedCurve: recipientCurve\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t//region Create shared secret\r\n\t\t\tcurrentSequence = currentSequence.then(result => crypto.deriveBits({\r\n\t\t\t\tname: \"ECDH\",\r\n\t\t\t\tpublic: result\r\n\t\t\t},\r\n\t\t\tecdhPrivateKey,\r\n\t\t\trecipientCurveLength),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Apply KDF function to shared secret\r\n\t\t\tcurrentSequence = currentSequence.then(\r\n\t\t\t\t/**\r\n\t\t\t\t * @param {ArrayBuffer} result\r\n\t\t\t\t */\r\n\t\t\t\tresult =>\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Get length of used AES-KW algorithm\r\n\t\t\t\t\tconst aesKWAlgorithm = new AlgorithmIdentifier({ schema: _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmParams });\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst KWalgorithm = getAlgorithmByOID(aesKWAlgorithm.algorithmId);\r\n\t\t\t\t\tif((\"name\" in KWalgorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect OID for key encryption algorithm: ${aesKWAlgorithm.algorithmId}`);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Translate AES-KW length to ArrayBuffer\r\n\t\t\t\t\tlet kwLength = KWalgorithm.length;\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst kwLengthBuffer = new ArrayBuffer(4);\r\n\t\t\t\t\tconst kwLengthView = new Uint8Array(kwLengthBuffer);\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor(let j = 3; j >= 0; j--)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tkwLengthView[j] = kwLength;\r\n\t\t\t\t\t\tkwLength >>= 8;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Create and encode \"ECC-CMS-SharedInfo\" structure\r\n\t\t\t\t\tconst eccInfo = new ECCCMSSharedInfo({\r\n\t\t\t\t\t\tkeyInfo: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: aesKWAlgorithm.algorithmId,\r\n\t\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t\t Initially RFC5753 says that AES algorithms have absent parameters.\r\n\t\t\t\t\t\t\t But since early implementations all put NULL here. Thus, in order to be\r\n\t\t\t\t\t\t\t \"backward compatible\", index also put NULL here.\r\n\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tentityUInfo: _this.recipientInfos[index].value.ukm,\r\n\t\t\t\t\t\tsuppPubInfo: new asn1js.OctetString({ valueHex: kwLengthBuffer })\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst encodedInfo = eccInfo.toSchema().toBER(false);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Get SHA algorithm used together with ECDH\r\n\t\t\t\t\tconst ecdhAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\t\tif((\"name\" in ecdhAlgorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect OID for key encryption algorithm: ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn kdf(ecdhAlgorithm.kdf, result, KWalgorithm.length, encodedInfo);\r\n\t\t\t\t},\r\n\t\t\t\terror =>\r\n\t\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t//region Import AES-KW key from result of KDF function\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.importKey(\"raw\", result, { name: \"AES-KW\" }, true, [\"wrapKey\"]),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Finally wrap session key by using AES-KW algorithm\r\n\t\t\tcurrentSequence = currentSequence.then(result => crypto.wrapKey(\"raw\", sessionKey, result, { name: \"AES-KW\" }),\r\n\t\t\t\terror =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Append all neccessary data to current CMS_RECIPIENT_INFO object\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region OriginatorIdentifierOrKey\r\n\t\t\t\tconst asn1 = asn1js.fromBER(exportedECDHPublicKey);\r\n\t\t\t\t\t\r\n\t\t\t\tconst originator = new OriginatorIdentifierOrKey();\r\n\t\t\t\toriginator.variant = 3;\r\n\t\t\t\toriginator.value = new OriginatorPublicKey({ schema: asn1.result });\r\n\t\t\t\t// There is option when we can stay with ECParameters, but here index prefer to avoid the params\r\n\t\t\t\tif(\"algorithmParams\" in originator.value.algorithm)\r\n\t\t\t\t\tdelete originator.value.algorithm.algorithmParams;\r\n\t\t\t\t\t\r\n\t\t\t\t_this.recipientInfos[index].value.originator = originator;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t//region RecipientEncryptedKey\r\n\t\t\t\t/*\r\n\t\t\t\t We will not support using of same ephemeral key for many recipients\r\n\t\t\t\t */\r\n\t\t\t\t_this.recipientInfos[index].value.recipientEncryptedKeys.encryptedKeys[0].encryptedKey = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\t//endregion\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\tfunction SubKeyTransRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Get recipient's public key\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\t//region Get current used SHA algorithm\r\n\t\t\t\tconst schema = _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmParams;\r\n\t\t\t\tconst rsaOAEPParams = new RSAESOAEPParams({ schema });\r\n\t\t\t\t\r\n\t\t\t\tconst hashAlgorithm = getAlgorithmByOID(rsaOAEPParams.hashAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for hash algorithm: ${rsaOAEPParams.hashAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\treturn _this.recipientInfos[index].value.recipientCertificate.getPublicKey({\r\n\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"RSA-OAEP\",\r\n\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\tname: hashAlgorithm.name\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: [\"encrypt\", \"wrapKey\"]\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t//region Encrypt early exported session key on recipient's public key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.encrypt(result.algorithm, result, exportedSessionKey),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Append all neccessary data to current CMS_RECIPIENT_INFO object\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region RecipientEncryptedKey\r\n\t\t\t\t_this.recipientInfos[index].value.encryptedKey = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\t//endregion\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\tfunction SubKEKRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\tlet kekAlgorithm;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Import KEK from pre-defined data\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\t//region Get WebCrypto form of \"keyEncryptionAlgorithm\"\r\n\t\t\t\tkekAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in kekAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for \"keyEncryptionAlgorithm\": ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\t\tnew Uint8Array(_this.recipientInfos[index].value.preDefinedKEK),\r\n\t\t\t\t\tkekAlgorithm,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"wrapKey\"]); // Too specific for AES-KW\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Wrap previously exported session key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.wrapKey(\"raw\", sessionKey, result, kekAlgorithm),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Append all neccessary data to current CMS_RECIPIENT_INFO object\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region RecipientEncryptedKey\r\n\t\t\t\t_this.recipientInfos[index].value.encryptedKey = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\t//endregion\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\tfunction SubPasswordRecipientinfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\tlet pbkdf2Params;\r\n\t\t\tlet kekAlgorithm;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check that we have encoded \"keyDerivationAlgorithm\" plus \"PBKDF2_params\" in there\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tif((\"keyDerivationAlgorithm\" in _this.recipientInfos[index].value) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Please append encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\tif((\"algorithmParams\" in _this.recipientInfos[index].value.keyDerivationAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tpbkdf2Params = new PBKDF2Params({ schema: _this.recipientInfos[index].value.keyDerivationAlgorithm.algorithmParams });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\treturn Promise.resolve();\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Derive PBKDF2 key from \"password\" buffer\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tconst passwordView = new Uint8Array(_this.recipientInfos[index].value.password);\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\t\tpasswordView,\r\n\t\t\t\t\t\"PBKDF2\",\r\n\t\t\t\t\tfalse,\r\n\t\t\t\t\t[\"deriveKey\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Derive key for \"keyEncryptionAlgorithm\"\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Get WebCrypto form of \"keyEncryptionAlgorithm\"\r\n\t\t\t\tkekAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in kekAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for \"keyEncryptionAlgorithm\": ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Get HMAC hash algorithm\r\n\t\t\t\tlet hmacHashAlgorithm = \"SHA-1\";\r\n\t\t\t\t\t\r\n\t\t\t\tif(\"prf\" in pbkdf2Params)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst algorithm = getAlgorithmByOID(pbkdf2Params.prf.algorithmId);\r\n\t\t\t\t\tif((\"name\" in algorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect OID for HMAC hash algorithm\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\thmacHashAlgorithm = algorithm.hash.name;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Get PBKDF2 \"salt\" value\r\n\t\t\t\tconst saltView = new Uint8Array(pbkdf2Params.salt.valueBlock.valueHex);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t//region Get PBKDF2 iterations count\r\n\t\t\t\tconst iterations = pbkdf2Params.iterationCount;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.deriveKey({\r\n\t\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: hmacHashAlgorithm\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsalt: saltView,\r\n\t\t\t\t\titerations\r\n\t\t\t\t},\r\n\t\t\t\tresult,\r\n\t\t\t\tkekAlgorithm,\r\n\t\t\t\ttrue,\r\n\t\t\t\t[\"wrapKey\"]); // Usages are too specific for KEK algorithm\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Wrap previously exported session key (Also too specific for KEK algorithm)\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.wrapKey(\"raw\", sessionKey, result, kekAlgorithm),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Append all neccessary data to current CMS_RECIPIENT_INFO object\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region RecipientEncryptedKey\r\n\t\t\t\t_this.recipientInfos[index].value.encryptedKey = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\t//endregion\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create special routines for each \"recipient\"\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tfor(let i = 0; i < this.recipientInfos.length; i++)\r\n\t\t\t{\r\n\t\t\t\t//region Initial variables\r\n\t\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\tswitch(this.recipientInfos[i].variant)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 1: // KeyTransRecipientInfo\r\n\t\t\t\t\t\tcurrentSequence = SubKeyTransRecipientInfo(i);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2: // KeyAgreeRecipientInfo\r\n\t\t\t\t\t\tcurrentSequence = SubKeyAgreeRecipientInfo(i);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3: // KEKRecipientInfo\r\n\t\t\t\t\t\tcurrentSequence = SubKEKRecipientInfo(i);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 4: // PasswordRecipientinfo\r\n\t\t\t\t\t\tcurrentSequence = SubPasswordRecipientinfo(i);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Uknown recipient type in array with index ${i}`);\r\n\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\trecipientsPromises.push(currentSequence);\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t\treturn Promise.all(recipientsPromises);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Decrypt existing CMS Enveloped Data content\r\n\t * @param {number} recipientIndex Index of recipient\r\n\t * @param {Object} parameters Additional parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tdecrypt(recipientIndex, parameters)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst decryptionParameters = parameters || {};\r\n\t\t\r\n\t\tconst _this = this;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check for input parameters\r\n\t\tif((recipientIndex + 1) > this.recipientInfos.length)\r\n\t\t\treturn Promise.reject(`Maximum value for \"index\" is: ${this.recipientInfos.length - 1}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Special sub-functions to work with each recipient's type\r\n\t\tfunction SubKeyAgreeRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\t\r\n\t\t\tlet recipientCurve;\r\n\t\t\tlet recipientCurveLength;\r\n\t\t\t\r\n\t\t\tlet curveOID;\r\n\t\t\t\r\n\t\t\tlet ecdhPrivateKey;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Get \"namedCurve\" parameter from recipient's certificate\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tif((\"recipientCertificate\" in decryptionParameters) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Parameter \\\"recipientCertificate\\\" is mandatory for \\\"KeyAgreeRecipientInfo\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\tif((\"recipientPrivateKey\" in decryptionParameters) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Parameter \\\"recipientPrivateKey\\\" is mandatory for \\\"KeyAgreeRecipientInfo\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\tconst curveObject = decryptionParameters.recipientCertificate.subjectPublicKeyInfo.algorithm.algorithmParams;\r\n\t\t\t\t\t\r\n\t\t\t\tif((curveObject instanceof asn1js.ObjectIdentifier) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \"recipientCertificate\" for index ${index}`);\r\n\t\t\t\t\t\r\n\t\t\t\tcurveOID = curveObject.valueBlock.toString();\r\n\t\t\t\t\t\r\n\t\t\t\tswitch(curveOID)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"1.2.840.10045.3.1.7\":\r\n\t\t\t\t\t\trecipientCurve = \"P-256\";\r\n\t\t\t\t\t\trecipientCurveLength = 256;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"1.3.132.0.34\":\r\n\t\t\t\t\t\trecipientCurve = \"P-384\";\r\n\t\t\t\t\t\trecipientCurveLength = 384;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"1.3.132.0.35\":\r\n\t\t\t\t\t\trecipientCurve = \"P-521\";\r\n\t\t\t\t\t\trecipientCurveLength = 528;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect curve OID for index ${index}`);\r\n\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"pkcs8\",\r\n\t\t\t\t\tdecryptionParameters.recipientPrivateKey,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\tnamedCurve: recipientCurve\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"deriveBits\"]\r\n\t\t\t\t);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Import sender's ephemeral public key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\tecdhPrivateKey = result;\r\n\t\t\t\t\t\r\n\t\t\t\t//region Change \"OriginatorPublicKey\" if \"curve\" parameter absent\r\n\t\t\t\tif((\"algorithmParams\" in _this.recipientInfos[index].value.originator.value.algorithm) === false)\r\n\t\t\t\t\t_this.recipientInfos[index].value.originator.value.algorithm.algorithmParams = new asn1js.ObjectIdentifier({ value: curveOID });\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Create ArrayBuffer with sender's public key\r\n\t\t\t\tconst buffer = _this.recipientInfos[index].value.originator.value.toSchema().toBER(false);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"spki\",\r\n\t\t\t\t\tbuffer,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\tnamedCurve: recipientCurve\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Create shared secret\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.deriveBits({\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tpublic: result\r\n\t\t\t\t},\r\n\t\t\t\tecdhPrivateKey,\r\n\t\t\t\trecipientCurveLength),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Apply KDF function to shared secret\r\n\t\t\tcurrentSequence = currentSequence.then(\r\n\t\t\t\t/**\r\n\t\t\t\t * @param {ArrayBuffer} result\r\n\t\t\t\t */\r\n\t\t\t\tresult =>\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Get length of used AES-KW algorithm\r\n\t\t\t\t\tconst aesKWAlgorithm = new AlgorithmIdentifier({ schema: _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmParams });\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst KWalgorithm = getAlgorithmByOID(aesKWAlgorithm.algorithmId);\r\n\t\t\t\t\tif((\"name\" in KWalgorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect OID for key encryption algorithm: ${aesKWAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Translate AES-KW length to ArrayBuffer\r\n\t\t\t\t\tlet kwLength = KWalgorithm.length;\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst kwLengthBuffer = new ArrayBuffer(4);\r\n\t\t\t\t\tconst kwLengthView = new Uint8Array(kwLengthBuffer);\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor(let j = 3; j >= 0; j--)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tkwLengthView[j] = kwLength;\r\n\t\t\t\t\t\tkwLength >>= 8;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Create and encode \"ECC-CMS-SharedInfo\" structure\r\n\t\t\t\t\tconst eccInfo = new ECCCMSSharedInfo({\r\n\t\t\t\t\t\tkeyInfo: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: aesKWAlgorithm.algorithmId,\r\n\t\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t\t Initially RFC5753 says that AES algorithms have absent parameters.\r\n\t\t\t\t\t\t\t But since early implementations all put NULL here. Thus, in order to be\r\n\t\t\t\t\t\t\t \"backward compatible\", index also put NULL here.\r\n\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tentityUInfo: _this.recipientInfos[index].value.ukm,\r\n\t\t\t\t\t\tsuppPubInfo: new asn1js.OctetString({ valueHex: kwLengthBuffer })\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst encodedInfo = eccInfo.toSchema().toBER(false);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Get SHA algorithm used together with ECDH\r\n\t\t\t\t\tconst ecdhAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\t\tif((\"name\" in ecdhAlgorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect OID for key encryption algorithm: ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\treturn kdf(ecdhAlgorithm.kdf, result, KWalgorithm.length, encodedInfo);\r\n\t\t\t\t},\r\n\t\t\t\terror =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Import AES-KW key from result of KDF function\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.importKey(\"raw\",\r\n\t\t\t\t\tresult,\r\n\t\t\t\t\t{ name: \"AES-KW\" },\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"unwrapKey\"]),\r\n\t\t\terror => Promise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Finally unwrap session key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Get WebCrypto form of content encryption algorithm\r\n\t\t\t\tconst contentEncryptionAlgorithm = getAlgorithmByOID(_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \"contentEncryptionAlgorithm\": ${_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.unwrapKey(\"raw\",\r\n\t\t\t\t\t_this.recipientInfos[index].value.recipientEncryptedKeys.encryptedKeys[0].encryptedKey.valueBlock.valueHex,\r\n\t\t\t\t\tresult,\r\n\t\t\t\t\t{ name: \"AES-KW\" },\r\n\t\t\t\t\tcontentEncryptionAlgorithm,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"decrypt\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\tfunction SubKeyTransRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Import recipient's private key\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tif((\"recipientPrivateKey\" in decryptionParameters) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Parameter \\\"recipientPrivateKey\\\" is mandatory for \\\"KeyTransRecipientInfo\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\t//region Get current used SHA algorithm\r\n\t\t\t\tconst schema = _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmParams;\r\n\t\t\t\tconst rsaOAEPParams = new RSAESOAEPParams({ schema });\r\n\t\t\t\t\t\r\n\t\t\t\tconst hashAlgorithm = getAlgorithmByOID(rsaOAEPParams.hashAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for hash algorithm: ${rsaOAEPParams.hashAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"pkcs8\",\r\n\t\t\t\t\tdecryptionParameters.recipientPrivateKey,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: \"RSA-OAEP\",\r\n\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\tname: hashAlgorithm.name\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"decrypt\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Decrypt encrypted session key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.decrypt(result.algorithm,\r\n\t\t\t\t\tresult,\r\n\t\t\t\t\t_this.recipientInfos[index].value.encryptedKey.valueBlock.valueHex\r\n\t\t\t\t), error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Import decrypted session key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Get WebCrypto form of content encryption algorithm\r\n\t\t\t\tconst contentEncryptionAlgorithm = getAlgorithmByOID(_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \"contentEncryptionAlgorithm\": ${_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\t\tresult,\r\n\t\t\t\t\tcontentEncryptionAlgorithm,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"decrypt\"]\r\n\t\t\t\t);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\tfunction SubKEKRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\tlet kekAlgorithm;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Import KEK from pre-defined data\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tif((\"preDefinedData\" in decryptionParameters) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Parameter \\\"preDefinedData\\\" is mandatory for \\\"KEKRecipientInfo\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\t//region Get WebCrypto form of \"keyEncryptionAlgorithm\"\r\n\t\t\t\tkekAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in kekAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for \"keyEncryptionAlgorithm\": ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\t\tdecryptionParameters.preDefinedData,\r\n\t\t\t\t\tkekAlgorithm,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"unwrapKey\"]); // Too specific for AES-KW\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Unwrap previously exported session key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Get WebCrypto form of content encryption algorithm\r\n\t\t\t\tconst contentEncryptionAlgorithm = getAlgorithmByOID(_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \"contentEncryptionAlgorithm\": ${_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.unwrapKey(\"raw\",\r\n\t\t\t\t\t_this.recipientInfos[index].value.encryptedKey.valueBlock.valueHex,\r\n\t\t\t\t\tresult,\r\n\t\t\t\t\tkekAlgorithm,\r\n\t\t\t\t\tcontentEncryptionAlgorithm,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"decrypt\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\tfunction SubPasswordRecipientinfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\tlet pbkdf2Params;\r\n\t\t\tlet kekAlgorithm;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Derive PBKDF2 key from \"password\" buffer\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tif((\"preDefinedData\" in decryptionParameters) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Parameter \\\"preDefinedData\\\" is mandatory for \\\"KEKRecipientInfo\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\tif((\"keyDerivationAlgorithm\" in _this.recipientInfos[index].value) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Please append encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\tif((\"algorithmParams\" in _this.recipientInfos[index].value.keyDerivationAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tpbkdf2Params = new PBKDF2Params({ schema: _this.recipientInfos[index].value.keyDerivationAlgorithm.algorithmParams });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\t\tdecryptionParameters.preDefinedData,\r\n\t\t\t\t\t\"PBKDF2\",\r\n\t\t\t\t\tfalse,\r\n\t\t\t\t\t[\"deriveKey\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Derive key for \"keyEncryptionAlgorithm\"\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Get WebCrypto form of \"keyEncryptionAlgorithm\"\r\n\t\t\t\tkekAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in kekAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for \"keyEncryptionAlgorithm\": ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Get HMAC hash algorithm\r\n\t\t\t\tlet hmacHashAlgorithm = \"SHA-1\";\r\n\t\t\t\t\t\r\n\t\t\t\tif(\"prf\" in pbkdf2Params)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst algorithm = getAlgorithmByOID(pbkdf2Params.prf.algorithmId);\r\n\t\t\t\t\tif((\"name\" in algorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect OID for HMAC hash algorithm\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\thmacHashAlgorithm = algorithm.hash.name;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Get PBKDF2 \"salt\" value\r\n\t\t\t\tconst saltView = new Uint8Array(pbkdf2Params.salt.valueBlock.valueHex);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t//region Get PBKDF2 iterations count\r\n\t\t\t\tconst iterations = pbkdf2Params.iterationCount;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.deriveKey({\r\n\t\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: hmacHashAlgorithm\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsalt: saltView,\r\n\t\t\t\t\titerations\r\n\t\t\t\t},\r\n\t\t\t\tresult,\r\n\t\t\t\tkekAlgorithm,\r\n\t\t\t\ttrue,\r\n\t\t\t\t[\"unwrapKey\"]); // Usages are too specific for KEK algorithm\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Unwrap previously exported session key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Get WebCrypto form of content encryption algorithm\r\n\t\t\t\tconst contentEncryptionAlgorithm = getAlgorithmByOID(_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \"contentEncryptionAlgorithm\": ${_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.unwrapKey(\"raw\",\r\n\t\t\t\t\t_this.recipientInfos[index].value.encryptedKey.valueBlock.valueHex,\r\n\t\t\t\t\tresult,\r\n\t\t\t\t\tkekAlgorithm,\r\n\t\t\t\t\tcontentEncryptionAlgorithm,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"decrypt\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Perform steps, specific to each type of session key encryption\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\tswitch(this.recipientInfos[recipientIndex].variant)\r\n\t\t\t{\r\n\t\t\t\tcase 1: // KeyTransRecipientInfo\r\n\t\t\t\t\tcurrentSequence = SubKeyTransRecipientInfo(recipientIndex);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2: // KeyAgreeRecipientInfo\r\n\t\t\t\t\tcurrentSequence = SubKeyAgreeRecipientInfo(recipientIndex);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3: // KEKRecipientInfo\r\n\t\t\t\t\tcurrentSequence = SubKEKRecipientInfo(recipientIndex);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4: // PasswordRecipientinfo\r\n\t\t\t\t\tcurrentSequence = SubPasswordRecipientinfo(recipientIndex);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn Promise.reject(`Uknown recipient type in array with index ${recipientIndex}`);\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Finally decrypt data by session key\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Get WebCrypto form of content encryption algorithm\r\n\t\t\tconst contentEncryptionAlgorithm = getAlgorithmByOID(this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\r\n\t\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\t\treturn Promise.reject(`Incorrect \"contentEncryptionAlgorithm\": ${this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Get \"intialization vector\" for content encryption algorithm\r\n\t\t\tconst ivBuffer = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmParams.valueBlock.valueHex;\r\n\t\t\tconst ivView = new Uint8Array(ivBuffer);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Create correct data block for decryption\r\n\t\t\tlet dataBuffer = new ArrayBuffer(0);\r\n\t\t\t\t\r\n\t\t\tif(this.encryptedContentInfo.encryptedContent.idBlock.isConstructed === false)\r\n\t\t\t\tdataBuffer = this.encryptedContentInfo.encryptedContent.valueBlock.valueHex;\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tfor(const content of this.encryptedContentInfo.encryptedContent.valueBlock.value)\r\n\t\t\t\t\tdataBuffer = utilConcatBuf(dataBuffer, content.valueBlock.valueHex);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\treturn crypto.decrypt({\r\n\t\t\t\tname: contentEncryptionAlgorithm.name,\r\n\t\t\t\tiv: ivView\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tdataBuffer);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"EnvelopedData.js"}