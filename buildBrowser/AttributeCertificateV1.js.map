{"version":3,"sources":["../src/AttributeCertificateV1.js"],"names":["AttCertValidityPeriod","parameters","notBeforeTime","defaultValues","notAfterTime","fromSchema","schema","asn1","asn1js","compareSchema","names","verified","Error","result","toDate","Sequence","value","GeneralizedTime","valueDate","memberName","Date","name","blockName","IssuerSerial","issuer","serialNumber","issuerUID","GeneralNames","toSchema","valueBlock","push","toJSON","Integer","BitString","optional","AttributeCertificateInfoV1","version","baseCertificateID","subjectName","signature","attrCertValidityPeriod","attributes","issuerUniqueID","extensions","valueDec","AlgorithmIdentifier","Array","from","element","Attribute","Extensions","Constructed","idBlock","tagClass","tagNumber","Choice","Repeated","AttributeCertificateV1","acinfo","signatureAlgorithm","signatureValue"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport GeneralNames from \"./GeneralNames.js\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\nimport Attribute from \"./Attribute.js\";\nimport Extensions from \"./Extensions.js\";\n//**************************************************************************************\n/**\n * Class from RFC5755\n */\nexport class AttCertValidityPeriod\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for AttCertValidityPeriod class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {GeneralizedTime}\n\t\t * @desc notBeforeTime\n\t\t */\n\t\tthis.notBeforeTime = getParametersValue(parameters, \"notBeforeTime\", AttCertValidityPeriod.defaultValues(\"notBeforeTime\"));\n\t\t/**\n\t\t * @type {GeneralizedTime}\n\t\t * @desc notAfterTime\n\t\t */\n\t\tthis.notAfterTime = getParametersValue(parameters, \"notAfterTime\", AttCertValidityPeriod.defaultValues(\"notAfterTime\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"notBeforeTime\":\n\t\t\tcase \"notAfterTime\":\n\t\t\t\treturn new Date(0, 0, 0);\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for AttCertValidityPeriod class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * AttCertValidityPeriod  ::= SEQUENCE {\n\t *   notBeforeTime  GeneralizedTime,\n\t *   notAfterTime   GeneralizedTime\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [notBeforeTime]\n\t\t * @property {string} [notAfterTime]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.GeneralizedTime({ name: (names.notBeforeTime || \"\") }),\n\t\t\t\tnew asn1js.GeneralizedTime({ name: (names.notAfterTime || \"\") })\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"notBeforeTime\",\n\t\t\t\"notAfterTime\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tAttCertValidityPeriod.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tnotBeforeTime: \"notBeforeTime\",\n\t\t\t\t\tnotAfterTime: \"notAfterTime\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttCertValidityPeriod\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tthis.notBeforeTime = asn1.result.notBeforeTime.toDate();\n\t\tthis.notAfterTime = asn1.result.notAfterTime.toDate();\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn (new asn1js.Sequence({\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.GeneralizedTime({ valueDate: this.notBeforeTime }),\n\t\t\t\tnew asn1js.GeneralizedTime({ valueDate: this.notAfterTime }),\n\t\t\t]\n\t\t}));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\treturn {\n\t\t\tnotBeforeTime: this.notBeforeTime,\n\t\t\tnotAfterTime: this.notAfterTime\n\t\t};\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Class from RFC5755\n */\nexport class IssuerSerial\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for IssuerSerial class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {RelativeDistinguishedNames}\n\t\t * @desc issuer\n\t\t */\n\t\tthis.issuer = getParametersValue(parameters, \"issuer\", IssuerSerial.defaultValues(\"issuer\"));\n\t\t/**\n\t\t * @type {Integer}\n\t\t * @desc serialNumber\n\t\t */\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", IssuerSerial.defaultValues(\"serialNumber\"));\n\t\t\n\t\tif(\"issuerUID\" in parameters)\n\t\t\t/**\n\t\t\t * @type {BitString}\n\t\t\t * @desc issuerUID\n\t\t\t */\n\t\t\tthis.issuerUID = getParametersValue(parameters, \"issuerUID\", IssuerSerial.defaultValues(\"issuerUID\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"issuer\":\n\t\t\t\treturn new GeneralNames();\n\t\t\tcase \"serialNumber\":\n\t\t\t\treturn new asn1js.Integer();\n\t\t\tcase \"issuerUID\":\n\t\t\t\treturn new asn1js.BitString();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for IssuerSerial class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * IssuerSerial  ::=  SEQUENCE {\n\t *   \tissuer         GeneralNames,\n\t * \t\tserial         CertificateSerialNumber,\n\t * \t\tissuerUID      UniqueIdentifier OPTIONAL\n\t * }\n\t *\n\t * CertificateSerialNumber ::= INTEGER\n\t * UniqueIdentifier  ::=  BIT STRING\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [issuer]\n\t\t * @property {string} [serialNumber]\n\t\t * @property {string} [issuerUID]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tGeneralNames.schema(names.issuer || {}),\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"\") }),\n\t\t\t\tnew asn1js.BitString({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.issuerUID || \"\")\n\t\t\t\t})\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"issuer\",\n\t\t\t\"serialNumber\",\n\t\t\t\"issuerUID\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tIssuerSerial.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tissuer: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"issuer\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tserialNumber: \"serialNumber\",\n\t\t\t\t\tissuerUID: \"issuerUID\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for IssuerSerial\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tthis.issuer = new GeneralNames({ schema: asn1.result.issuer });\n\t\tthis.serialNumber = asn1.result.serialNumber;\n\t\t\n\t\tif(\"issuerUID\" in asn1.result)\n\t\t\tthis.issuerUID = asn1.result.issuerUID;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\tconst result = new asn1js.Sequence({\n\t\t\tvalue: [\n\t\t\t\tthis.issuer.toSchema(),\n\t\t\t\tthis.serialNumber\n\t\t\t]\n\t\t});\n\t\t\n\t\tif(\"issuerUID\" in this)\n\t\t\tresult.valueBlock.value.push(this.issuerUID);\n\t\t\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn result;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst result = {\n\t\t\tissuer: this.issuer.toJSON(),\n\t\t\tserialNumber: this.serialNumber.toJSON()\n\t\t};\n\t\t\n\t\tif(\"issuerUID\" in this)\n\t\t\tresult.issuerUID = this.issuerUID.toJSON();\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Class from RFC5755\n */\nexport class AttributeCertificateInfoV1\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for AttributeCertificateInfoV1 class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {Number}\n\t\t * @desc version\n\t\t */\n\t\tthis.version = getParametersValue(parameters, \"version\", AttributeCertificateInfoV1.defaultValues(\"version\"));\n\t\t\n\t\tif(\"baseCertificateID\" in parameters)\n\t\t\t/**\n\t\t\t * @type {IssuerSerial}\n\t\t\t * @desc baseCertificateID\n\t\t\t */\n\t\t\tthis.baseCertificateID = getParametersValue(parameters, \"baseCertificateID\", AttributeCertificateInfoV1.defaultValues(\"baseCertificateID\"));\n\t\t\n\t\tif(\"subjectName\" in parameters)\n\t\t\t/**\n\t\t\t * @type {GeneralNames}\n\t\t\t * @desc subjectName\n\t\t\t */\n\t\t\tthis.subjectName = getParametersValue(parameters, \"subjectName\", AttributeCertificateInfoV1.defaultValues(\"subjectName\"));\n\n\t\t/**\n\t\t * @type {GeneralNames}\n\t\t * @desc issuer\n\t\t */\n\t\tthis.issuer = getParametersValue(parameters, \"issuer\", AttributeCertificateInfoV1.defaultValues(\"issuer\"));\n\t\t/**\n\t\t * @type {AlgorithmIdentifier}\n\t\t * @desc signature\n\t\t */\n\t\tthis.signature = getParametersValue(parameters, \"signature\", AttributeCertificateInfoV1.defaultValues(\"signature\"));\n\t\t/**\n\t\t * @type {Integer}\n\t\t * @desc serialNumber\n\t\t */\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", AttributeCertificateInfoV1.defaultValues(\"serialNumber\"));\n\t\t/**\n\t\t * @type {AttCertValidityPeriod}\n\t\t * @desc attrCertValidityPeriod\n\t\t */\n\t\tthis.attrCertValidityPeriod = getParametersValue(parameters, \"attrCertValidityPeriod\", AttributeCertificateInfoV1.defaultValues(\"attrCertValidityPeriod\"));\n\t\t/**\n\t\t * @type {Array.<Attribute>}\n\t\t * @desc attributes\n\t\t */\n\t\tthis.attributes = getParametersValue(parameters, \"attributes\", AttributeCertificateInfoV1.defaultValues(\"attributes\"));\n\t\t\n\t\tif(\"issuerUniqueID\" in parameters)\n\t\t\t/**\n\t\t\t * @type {BitString}\n\t\t\t * @desc issuerUniqueID\n\t\t\t */\n\t\t\tthis.issuerUniqueID = getParametersValue(parameters, \"issuerUniqueID\", AttributeCertificateInfoV1.defaultValues(\"issuerUniqueID\"));\n\t\t\t\n\t\tif(\"extensions\" in parameters)\n\t\t\t/**\n\t\t\t * @type {Extensions}\n\t\t\t * @desc extensions\n\t\t\t */\n\t\t\tthis.extensions = getParametersValue(parameters, \"extensions\", AttributeCertificateInfoV1.defaultValues(\"extensions\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"version\":\n\t\t\t\treturn 0;\n\t\t\tcase \"baseCertificateID\":\n\t\t\t\treturn new IssuerSerial();\n\t\t\tcase \"subjectName\":\n\t\t\t\treturn new GeneralNames();\n\t\t\tcase \"issuer\":\n\t\t\t\treturn {};\n\t\t\tcase \"signature\":\n\t\t\t\treturn new AlgorithmIdentifier();\n\t\t\tcase \"serialNumber\":\n\t\t\t\treturn new asn1js.Integer();\n\t\t\tcase \"attrCertValidityPeriod\":\n\t\t\t\treturn new AttCertValidityPeriod();\n\t\t\tcase \"attributes\":\n\t\t\t\treturn [];\n\t\t\tcase \"issuerUniqueID\":\n\t\t\t\treturn new asn1js.BitString();\n\t\t\tcase \"extensions\":\n\t\t\t\treturn new Extensions();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for AttributeCertificateInfoV1 class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * AttributeCertificateInfo ::= SEQUENCE {\n\t * \tversion Version DEFAULT v1,\n\t * \tsubject CHOICE {\n\t * \t\tbaseCertificateID [0] IssuerSerial, -- associated with a Public Key Certificate\n\t * \t\tsubjectName [1] GeneralNames }, -- associated with a name\n\t * \tissuer GeneralNames, -- CA issuing the attribute certificate\n\t * \tsignature AlgorithmIdentifier,\n\t * \tserialNumber CertificateSerialNumber,\n\t * \tattrCertValidityPeriod AttCertValidityPeriod,\n\t * \tattributes SEQUENCE OF Attribute,\n\t * \tissuerUniqueID UniqueIdentifier OPTIONAL,\n\t * \textensions Extensions OPTIONAL\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [issuer]\n\t\t * @property {string} [serialNumber]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\n\t\t\t\tnew asn1js.Choice({\n\t\t\t\t\tvalue: [\n\t\t\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\t\t\tname: (names.baseCertificateID || \"\"),\n\t\t\t\t\t\t\tidBlock: {\n\t\t\t\t\t\t\t\ttagClass: 3,\n\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tvalue: IssuerSerial.schema().valueBlock.value\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\t\t\tname: (names.subjectName || \"\"),\n\t\t\t\t\t\t\tidBlock: {\n\t\t\t\t\t\t\t\ttagClass: 3,\n\t\t\t\t\t\t\t\ttagNumber: 1 // [2]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tvalue: GeneralNames.schema().valueBlock.value\n\t\t\t\t\t\t}),\n\t\t\t\t\t]\n\t\t\t\t}),\n\t\t\t\tGeneralNames.schema({\n\t\t\t\t\tnames: {\n\t\t\t\t\t\tblockName: (names.issuer || \"\")\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tAlgorithmIdentifier.schema(names.signature || {}),\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"\") }),\n\t\t\t\tAttCertValidityPeriod.schema(names.attrCertValidityPeriod || {}),\n\t\t\t\tnew asn1js.Sequence({\n\t\t\t\t\tname: (names.attributes || \"\"),\n\t\t\t\t\tvalue: [\n\t\t\t\t\t\tnew asn1js.Repeated({\n\t\t\t\t\t\t\tvalue: Attribute.schema()\n\t\t\t\t\t\t})\n\t\t\t\t\t]\n\t\t\t\t}),\n\t\t\t\tnew asn1js.BitString({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.issuerUniqueID || \"\")\n\t\t\t\t}),\n\t\t\t\tExtensions.schema(names.extensions || {}, true)\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"version\",\n\t\t\t\"baseCertificateID\",\n\t\t\t\"subjectName\",\n\t\t\t\"issuer\",\n\t\t\t\"signature\",\n\t\t\t\"serialNumber\",\n\t\t\t\"attrCertValidityPeriod\",\n\t\t\t\"attributes\",\n\t\t\t\"issuerUniqueID\",\n\t\t\t\"extensions\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tAttributeCertificateInfoV1.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tversion: \"version\",\n\t\t\t\t\tbaseCertificateID: \"baseCertificateID\",\n\t\t\t\t\tsubjectName: \"subjectName\",\n\t\t\t\t\tissuer: \"issuer\",\n\t\t\t\t\tsignature: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"signature\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tserialNumber: \"serialNumber\",\n\t\t\t\t\tattrCertValidityPeriod: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"attrCertValidityPeriod\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tattributes: \"attributes\",\n\t\t\t\t\tissuerUniqueID: \"issuerUniqueID\",\n\t\t\t\t\textensions: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"extensions\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttributeCertificateInfoV1\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\n\t\t\n\t\tif(\"baseCertificateID\" in asn1.result)\n\t\t{\n\t\t\tthis.baseCertificateID = new IssuerSerial({\n\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\tvalue: asn1.result.baseCertificateID.valueBlock.value\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t\t\n\t\tif(\"subjectName\" in asn1.result)\n\t\t{\n\t\t\tthis.subjectName = new GeneralNames({\n\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\tvalue: asn1.result.subjectName.valueBlock.value\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t\t\n\t\tthis.issuer = asn1.result.issuer;\n\t\tthis.signature = new AlgorithmIdentifier({ schema: asn1.result.signature });\n\t\tthis.serialNumber = asn1.result.serialNumber;\n\t\tthis.attrCertValidityPeriod = new AttCertValidityPeriod({ schema: asn1.result.attrCertValidityPeriod });\n\t\tthis.attributes = Array.from(asn1.result.attributes.valueBlock.value, element => new Attribute({ schema: element }));\n\t\t\n\t\tif(\"issuerUniqueID\" in asn1.result)\n\t\t\tthis.issuerUniqueID = asn1.result.issuerUniqueID;\n\t\t\n\t\tif(\"extensions\" in asn1.result)\n\t\t\tthis.extensions = new Extensions({ schema: asn1.result.extensions });\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\tconst result = new asn1js.Sequence({\n\t\t\tvalue: [new asn1js.Integer({ value: this.version })]\n\t\t});\n\t\t\n\t\tif(\"baseCertificateID\" in this)\n\t\t{\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3,\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tvalue: this.baseCertificateID.toSchema().valueBlock.value\n\t\t\t}));\n\t\t}\n\t\t\n\t\tif(\"subjectName\" in this)\n\t\t{\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3,\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t},\n\t\t\t\tvalue: this.subjectName.toSchema().valueBlock.value\n\t\t\t}));\n\t\t}\n\t\t\n\t\tresult.valueBlock.value.push(this.issuer.toSchema());\n\t\tresult.valueBlock.value.push(this.signature.toSchema());\n\t\tresult.valueBlock.value.push(this.serialNumber);\n\t\tresult.valueBlock.value.push(this.attrCertValidityPeriod.toSchema());\n\t\tresult.valueBlock.value.push(new asn1js.Sequence({\n\t\t\tvalue: Array.from(this.attributes, element => element.toSchema())\n\t\t}));\n\t\t\n\t\tif(\"issuerUniqueID\" in this)\n\t\t\tresult.valueBlock.value.push(this.issuerUniqueID);\n\t\t\n\t\tif(\"extensions\" in this)\n\t\t\tresult.valueBlock.value.push(this.extensions.toSchema());\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst result = {\n\t\t\tversion: this.version\n\t\t};\n\t\t\n\t\tif(\"baseCertificateID\" in this)\n\t\t\tresult.baseCertificateID = this.baseCertificateID.toJSON();\n\t\t\n\t\tif(\"subjectName\" in this)\n\t\t\tresult.subjectName = this.subjectName.toJSON();\n\n\t\tresult.issuer = this.issuer.toJSON();\n\t\tresult.signature = this.signature.toJSON();\n\t\tresult.serialNumber = this.serialNumber.toJSON();\n\t\tresult.attrCertValidityPeriod = this.attrCertValidityPeriod.toJSON();\n\t\tresult.attributes = Array.from(this.attributes, element => element.toJSON());\n\t\t\n\t\tif(\"issuerUniqueID\" in this)\n\t\t\tresult.issuerUniqueID = this.issuerUniqueID.toJSON();\n\t\t\n\t\tif(\"extensions\" in this)\n\t\t\tresult.extensions = this.extensions.toJSON();\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Class from X.509:1997\n */\nexport default class AttributeCertificateV1\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for AttributeCertificateV1 class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {AttributeCertificateInfoV1}\n\t\t * @desc acinfo\n\t\t */\n\t\tthis.acinfo = getParametersValue(parameters, \"acinfo\", AttributeCertificateV1.defaultValues(\"acinfo\"));\n\t\t/**\n\t\t * @type {AlgorithmIdentifier}\n\t\t * @desc signatureAlgorithm\n\t\t */\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", AttributeCertificateV1.defaultValues(\"signatureAlgorithm\"));\n\t\t/**\n\t\t * @type {BitString}\n\t\t * @desc signatureValue\n\t\t */\n\t\tthis.signatureValue = getParametersValue(parameters, \"signatureValue\", AttributeCertificateV1.defaultValues(\"signatureValue\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"acinfo\":\n\t\t\t\treturn new AttributeCertificateInfoV1();\n\t\t\tcase \"signatureAlgorithm\":\n\t\t\t\treturn new AlgorithmIdentifier();\n\t\t\tcase \"signatureValue\":\n\t\t\t\treturn new asn1js.BitString();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for AttributeCertificateV1 class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * AttributeCertificate ::= SEQUENCE {\n\t *   acinfo               AttributeCertificateInfoV1,\n\t *   signatureAlgorithm   AlgorithmIdentifier,\n\t *   signatureValue       BIT STRING\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {Object} [acinfo]\n\t\t * @property {Object} [signatureAlgorithm]\n\t\t * @property {string} [signatureValue]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tAttributeCertificateInfoV1.schema(names.acinfo || {}),\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {}),\n\t\t\t\tnew asn1js.BitString({ name: (names.signatureValue || \"\") })\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"acinfo\",\n\t\t\t\"signatureValue\",\n\t\t\t\"signatureAlgorithm\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tAttributeCertificateV1.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tacinfo: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"acinfo\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tsignatureAlgorithm: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"signatureAlgorithm\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tsignatureValue: \"signatureValue\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttributeCertificateV1\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tthis.acinfo = new AttributeCertificateInfoV1({ schema: asn1.result.acinfo });\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\n\t\tthis.signatureValue = asn1.result.signatureValue;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\treturn (new asn1js.Sequence({\n\t\t\tvalue: [\n\t\t\t\tthis.acinfo.toSchema(),\n\t\t\t\tthis.signatureAlgorithm.toSchema(),\n\t\t\t\tthis.signatureValue\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\treturn {\n\t\t\tacinfo: this.acinfo.toJSON(),\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\n\t\t\tsignatureValue: this.signatureValue.toJSON()\n\t\t};\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n"],"file":"AttributeCertificateV1.js"}