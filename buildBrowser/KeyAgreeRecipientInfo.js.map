{"version":3,"sources":["../src/KeyAgreeRecipientInfo.js"],"names":["KeyAgreeRecipientInfo","parameters","version","defaultValues","originator","ukm","keyEncryptionAlgorithm","recipientEncryptedKeys","recipientCertificate","fromSchema","schema","asn1","asn1js","compareSchema","names","blockName","verified","Error","result","valueBlock","valueDec","OriginatorIdentifierOrKey","AlgorithmIdentifier","RecipientEncryptedKeys","outputArray","push","Integer","value","Constructed","idBlock","tagClass","tagNumber","toSchema","optional","Sequence","_object","toJSON","memberName","OctetString","Certificate","memberValue","variant","isEqual","algorithmId","encryptedKeys","length","name"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport OriginatorIdentifierOrKey from \"./OriginatorIdentifierOrKey.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport RecipientEncryptedKeys from \"./RecipientEncryptedKeys.js\";\r\nimport Certificate from \"./Certificate.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class KeyAgreeRecipientInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for KeyAgreeRecipientInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", KeyAgreeRecipientInfo.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {OriginatorIdentifierOrKey}\r\n\t\t * @desc originator\r\n\t\t */\r\n\t\tthis.originator = getParametersValue(parameters, \"originator\", KeyAgreeRecipientInfo.defaultValues(\"originator\"));\r\n\r\n\t\tif(\"ukm\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {OctetString}\r\n\t\t\t * @desc ukm\r\n\t\t\t */\r\n\t\t\tthis.ukm = getParametersValue(parameters, \"ukm\", KeyAgreeRecipientInfo.defaultValues(\"ukm\"));\r\n\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc keyEncryptionAlgorithm\r\n\t\t */\r\n\t\tthis.keyEncryptionAlgorithm = getParametersValue(parameters, \"keyEncryptionAlgorithm\", KeyAgreeRecipientInfo.defaultValues(\"keyEncryptionAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {RecipientEncryptedKeys}\r\n\t\t * @desc recipientEncryptedKeys\r\n\t\t */\r\n\t\tthis.recipientEncryptedKeys = getParametersValue(parameters, \"recipientEncryptedKeys\", KeyAgreeRecipientInfo.defaultValues(\"recipientEncryptedKeys\"));\r\n\t\t/**\r\n\t\t * @type {Certificate}\r\n\t\t * @desc recipientCertificate For some reasons we need to store recipient's certificate here\r\n\t\t */\r\n\t\tthis.recipientCertificate = getParametersValue(parameters, \"recipientCertificate\", KeyAgreeRecipientInfo.defaultValues(\"recipientCertificate\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"originator\":\r\n\t\t\t\treturn new OriginatorIdentifierOrKey();\r\n\t\t\tcase \"ukm\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"keyEncryptionAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"recipientEncryptedKeys\":\r\n\t\t\t\treturn new RecipientEncryptedKeys();\r\n\t\t\tcase \"recipientCertificate\":\r\n\t\t\t\treturn new Certificate();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for KeyAgreeRecipientInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === 0);\r\n\t\t\tcase \"originator\":\r\n\t\t\t\treturn ((memberValue.variant === (-1)) && ((\"value\" in memberValue) === false));\r\n\t\t\tcase \"ukm\":\r\n\t\t\t\treturn (memberValue.isEqual(KeyAgreeRecipientInfo.defaultValues(\"ukm\")));\r\n\t\t\tcase \"keyEncryptionAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"recipientEncryptedKeys\":\r\n\t\t\t\treturn (memberValue.encryptedKeys.length === 0);\r\n\t\t\tcase \"recipientCertificate\":\r\n\t\t\t\treturn false; // For now leave it as is\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for KeyAgreeRecipientInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * KeyAgreeRecipientInfo ::= SEQUENCE {\r\n\t *    version CMSVersion,  -- always set to 3\r\n\t *    originator [0] EXPLICIT OriginatorIdentifierOrKey,\r\n\t *    ukm [1] EXPLICIT UserKeyingMaterial OPTIONAL,\r\n\t *    keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\r\n\t *    recipientEncryptedKeys RecipientEncryptedKeys }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [originator]\r\n\t\t * @property {string} [ukm]\r\n\t\t * @property {string} [keyEncryptionAlgorithm]\r\n\t\t * @property {string} [recipientEncryptedKeys]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: names.blockName || \"\",\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: names.version || \"\" }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tOriginatorIdentifierOrKey.schema(names.originator || {})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.OctetString({ name: names.ukm || \"\" })]\r\n\t\t\t\t}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),\r\n\t\t\t\tRecipientEncryptedKeys.schema(names.recipientEncryptedKeys || {})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"originator\",\r\n\t\t\t\"ukm\",\r\n\t\t\t\"keyEncryptionAlgorithm\",\r\n\t\t\t\"recipientEncryptedKeys\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tKeyAgreeRecipientInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\toriginator: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"originator\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tukm: \"ukm\",\r\n\t\t\t\t\tkeyEncryptionAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"keyEncryptionAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\trecipientEncryptedKeys: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"recipientEncryptedKeys\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for KeyAgreeRecipientInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.originator = new OriginatorIdentifierOrKey({ schema: asn1.result.originator });\r\n\r\n\t\tif(\"ukm\" in asn1.result)\r\n\t\t\tthis.ukm = asn1.result.ukm;\r\n\r\n\t\tthis.keyEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyEncryptionAlgorithm });\r\n\t\tthis.recipientEncryptedKeys = new RecipientEncryptedKeys({ schema: asn1.result.recipientEncryptedKeys });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for final sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\tidBlock: {\r\n\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t},\r\n\t\t\tvalue: [this.originator.toSchema()]\r\n\t\t}));\r\n\r\n\t\tif(\"ukm\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [this.ukm]\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\toutputArray.push(this.keyEncryptionAlgorithm.toSchema());\r\n\t\toutputArray.push(this.recipientEncryptedKeys.toSchema());\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version,\r\n\t\t\toriginator: this.originator.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"ukm\" in this)\r\n\t\t\t_object.ukm = this.ukm.toJSON();\r\n\r\n\t\t_object.keyEncryptionAlgorithm = this.keyEncryptionAlgorithm.toJSON();\r\n\t\t_object.recipientEncryptedKeys = this.recipientEncryptedKeys.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"KeyAgreeRecipientInfo.js"}