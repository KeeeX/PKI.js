{"version":3,"sources":["../src/RecipientEncryptedKey.js"],"names":["RecipientEncryptedKey","parameters","rid","defaultValues","encryptedKey","fromSchema","schema","asn1","asn1js","compareSchema","names","blockName","verified","Error","KeyAgreeRecipientIdentifier","result","Sequence","value","toSchema","toJSON","memberName","OctetString","memberValue","variant","isEqual","name"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport KeyAgreeRecipientIdentifier from \"./KeyAgreeRecipientIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class RecipientEncryptedKey\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for RecipientEncryptedKey class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {KeyAgreeRecipientIdentifier}\r\n\t\t * @desc rid\r\n\t\t */\r\n\t\tthis.rid = getParametersValue(parameters, \"rid\", RecipientEncryptedKey.defaultValues(\"rid\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc encryptedKey\r\n\t\t */\r\n\t\tthis.encryptedKey = getParametersValue(parameters, \"encryptedKey\", RecipientEncryptedKey.defaultValues(\"encryptedKey\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"rid\":\r\n\t\t\t\treturn new KeyAgreeRecipientIdentifier();\r\n\t\t\tcase \"encryptedKey\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RecipientEncryptedKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"rid\":\r\n\t\t\t\treturn ((memberValue.variant === (-1)) && ((\"value\" in memberValue) === false));\r\n\t\t\tcase \"encryptedKey\":\r\n\t\t\t\treturn (memberValue.isEqual(RecipientEncryptedKey.defaultValues(\"encryptedKey\")));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RecipientEncryptedKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * RecipientEncryptedKey ::= SEQUENCE {\r\n\t *    rid KeyAgreeRecipientIdentifier,\r\n\t *    encryptedKey EncryptedKey }\r\n\t *\r\n\t * EncryptedKey ::= OCTET STRING\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [rid]\r\n\t\t * @property {string} [encryptedKey]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tKeyAgreeRecipientIdentifier.schema(names.rid || {}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.encryptedKey || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"rid\",\r\n\t\t\t\"encryptedKey\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRecipientEncryptedKey.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\trid: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"rid\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tencryptedKey: \"encryptedKey\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for RecipientEncryptedKey\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.rid = new KeyAgreeRecipientIdentifier({ schema: asn1.result.rid });\r\n\t\tthis.encryptedKey = asn1.result.encryptedKey;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.rid.toSchema(),\r\n\t\t\t\tthis.encryptedKey\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\trid: this.rid.toJSON(),\r\n\t\t\tencryptedKey: this.encryptedKey.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"RecipientEncryptedKey.js"}