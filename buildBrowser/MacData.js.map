{"version":3,"sources":["../src/MacData.js"],"names":["MacData","parameters","mac","defaultValues","macSalt","iterations","fromSchema","schema","asn1","asn1js","compareSchema","names","blockName","verified","Error","DigestInfo","result","valueBlock","valueDec","outputArray","toSchema","push","Integer","value","Sequence","output","toJSON","memberName","OctetString","memberValue","compareWithDefault","digestAlgorithm","digest","isEqual","name","optional"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport DigestInfo from \"./DigestInfo.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC7292\r\n */\r\nexport default class MacData \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for MacData class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {DigestInfo}\r\n\t\t * @desc mac\r\n\t\t */\r\n\t\tthis.mac = getParametersValue(parameters, \"mac\", MacData.defaultValues(\"mac\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc macSalt\r\n\t\t */\r\n\t\tthis.macSalt = getParametersValue(parameters, \"macSalt\", MacData.defaultValues(\"macSalt\"));\r\n\t\t\r\n\t\tif(\"iterations\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {number}\r\n\t\t\t * @desc iterations\r\n\t\t\t */\r\n\t\t\tthis.iterations = getParametersValue(parameters, \"iterations\", MacData.defaultValues(\"iterations\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"mac\":\r\n\t\t\t\treturn new DigestInfo();\r\n\t\t\tcase \"macSalt\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"iterations\":\r\n\t\t\t\treturn 1;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for MacData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"mac\":\r\n\t\t\t\treturn ((DigestInfo.compareWithDefault(\"digestAlgorithm\", memberValue.digestAlgorithm)) &&\r\n\t\t\t\t(DigestInfo.compareWithDefault(\"digest\", memberValue.digest)));\r\n\t\t\tcase \"macSalt\":\r\n\t\t\t\treturn (memberValue.isEqual(MacData.defaultValues(memberName)));\r\n\t\t\tcase \"iterations\":\r\n\t\t\t\treturn (memberValue === MacData.defaultValues(memberName));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for MacData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * MacData ::= SEQUENCE {\r\n\t *    mac \t\tDigestInfo,\r\n\t *    macSalt       OCTET STRING,\r\n\t *    iterations\tINTEGER DEFAULT 1\r\n\t *    -- Note: The default is for historical reasons and its use is\r\n\t *    -- deprecated. A higher value, like 1024 is recommended.\r\n\t *    }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [optional]\r\n\t\t * @property {string} [mac]\r\n\t\t * @property {string} [macSalt]\r\n\t\t * @property {string} [iterations]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\toptional: (names.optional || true),\r\n\t\t\tvalue: [\r\n\t\t\t\tDigestInfo.schema(names.mac || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"mac\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.macSalt || \"macSalt\") }),\r\n\t\t\t\tnew asn1js.Integer({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.iterations || \"iterations\")\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"mac\",\r\n\t\t\t\"macSalt\",\r\n\t\t\t\"iterations\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tMacData.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tmac: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"mac\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmacSalt: \"macSalt\",\r\n\t\t\t\t\titerations: \"iterations\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for MacData\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.mac = new DigestInfo({ schema: asn1.result.mac });\r\n\t\tthis.macSalt = asn1.result.macSalt;\r\n\t\t\r\n\t\tif(\"iterations\" in asn1.result)\r\n\t\t\tthis.iterations = asn1.result.iterations.valueBlock.valueDec;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\tconst outputArray = [\r\n\t\t\tthis.mac.toSchema(),\r\n\t\t\tthis.macSalt\r\n\t\t];\r\n\t\t\r\n\t\tif(\"iterations\" in this)\r\n\t\t\toutputArray.push(new asn1js.Integer({ value: this.iterations }));\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst output = {\r\n\t\t\tmac: this.mac.toJSON(),\r\n\t\t\tmacSalt: this.macSalt.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"iterations\" in this)\r\n\t\t\toutput.iterations = this.iterations.toJSON();\r\n\t\t\r\n\t\treturn output;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"MacData.js"}