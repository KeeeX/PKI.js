{"version":3,"sources":["../src/CertificationRequest.js"],"names":["CertificationRequestInfo","parameters","names","asn1js","Sequence","name","value","Integer","CertificationRequestInfoVersion","RelativeDistinguishedNames","schema","subject","blockName","PublicKeyInfo","Constructed","optional","idBlock","tagClass","tagNumber","Repeated","CertificationRequestInfoAttributes","Attribute","attributes","CertificationRequest","tbs","defaultValues","version","subjectPublicKeyInfo","signatureAlgorithm","signatureValue","fromSchema","asn1","compareSchema","verified","Error","result","valueBeforeDecode","valueBlock","valueDec","Array","from","element","AlgorithmIdentifier","outputArray","toSchema","push","encodeFlag","tbsSchema","byteLength","fromBER","encodeTBS","object","toJSON","privateKey","hashAlgorithm","Promise","reject","sequence","resolve","engine","then","subtle","getSignatureParameters","toBER","signWithPrivateKey","BitString","valueHex","verifyWithPublicKey","getPublicKey","memberName","ArrayBuffer","certificationRequestInfo","ObjectIdentifier","Any"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, bufferToHexCodes, clearProps } from \"pvutils\";\r\nimport { getEngine } from \"./common.js\";\r\nimport PublicKeyInfo from \"./PublicKeyInfo.js\";\r\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport Attribute from \"./Attribute.js\";\r\n//**************************************************************************************\r\nfunction CertificationRequestInfo(parameters = {})\r\n{\r\n\t//CertificationRequestInfo ::= SEQUENCE {\r\n\t//    version       INTEGER { v1(0) } (v1,...),\r\n\t//    subject       Name,\r\n\t//    subjectPKInfo SubjectPublicKeyInfo{{ PKInfoAlgorithms }},\r\n\t//    attributes    [0] Attributes{{ CRIAttributes }}\r\n\t//}\r\n\t\r\n\t/**\r\n\t * @type {Object}\r\n\t * @property {string} [blockName]\r\n\t * @property {string} [CertificationRequestInfo]\r\n\t * @property {string} [CertificationRequestInfoVersion]\r\n\t * @property {string} [subject]\r\n\t * @property {string} [CertificationRequestInfoAttributes]\r\n\t * @property {string} [attributes]\r\n\t */\r\n\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\r\n\treturn (new asn1js.Sequence({\r\n\t\tname: (names.CertificationRequestInfo || \"CertificationRequestInfo\"),\r\n\t\tvalue: [\r\n\t\t\tnew asn1js.Integer({ name: (names.CertificationRequestInfoVersion || \"CertificationRequestInfo.version\") }),\r\n\t\t\tRelativeDistinguishedNames.schema(names.subject || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"CertificationRequestInfo.subject\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tPublicKeyInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"CertificationRequestInfo.subjectPublicKeyInfo\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tnew asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\toptional: true, // Because OpenSSL makes wrong \"attributes\" field\r\n\t\t\t\t\t\tname: (names.CertificationRequestInfoAttributes || \"CertificationRequestInfo.attributes\"),\r\n\t\t\t\t\t\tvalue: Attribute.schema(names.attributes || {})\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t})\r\n\t\t]\r\n\t}));\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC2986\r\n */\r\nexport default class CertificationRequest\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Attribute class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc tbs\r\n\t\t */\r\n\t\tthis.tbs = getParametersValue(parameters, \"tbs\", CertificationRequest.defaultValues(\"tbs\"));\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", CertificationRequest.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {RelativeDistinguishedNames}\r\n\t\t * @desc subject\r\n\t\t */\r\n\t\tthis.subject = getParametersValue(parameters, \"subject\", CertificationRequest.defaultValues(\"subject\"));\r\n\t\t/**\r\n\t\t * @type {PublicKeyInfo}\r\n\t\t * @desc subjectPublicKeyInfo\r\n\t\t */\r\n\t\tthis.subjectPublicKeyInfo = getParametersValue(parameters, \"subjectPublicKeyInfo\", CertificationRequest.defaultValues(\"subjectPublicKeyInfo\"));\r\n\t\t\r\n\t\tif(\"attributes\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Attribute>}\r\n\t\t\t * @desc attributes\r\n\t\t\t */\r\n\t\t\tthis.attributes = getParametersValue(parameters, \"attributes\", CertificationRequest.defaultValues(\"attributes\"));\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", CertificationRequest.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @desc signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureValue = getParametersValue(parameters, \"signatureValue\", CertificationRequest.defaultValues(\"signatureValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbs\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"subject\":\r\n\t\t\t\treturn new RelativeDistinguishedNames();\r\n\t\t\tcase \"subjectPublicKeyInfo\":\r\n\t\t\t\treturn new PublicKeyInfo();\r\n\t\t\tcase \"attributes\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signatureValue\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertificationRequest class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * CertificationRequest ::= SEQUENCE {\r\n\t *    certificationRequestInfo CertificationRequestInfo,\r\n\t *    signatureAlgorithm       AlgorithmIdentifier{{ SignatureAlgorithms }},\r\n\t *    signature                BIT STRING\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [certificationRequestInfo]\r\n\t\t * @property {string} [signatureAlgorithm]\r\n\t\t * @property {string} [signatureValue]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tCertificationRequestInfo(names.certificationRequestInfo || {}),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\tname: (names.signatureAlgorithm || \"signatureAlgorithm\"),\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.ObjectIdentifier(),\r\n\t\t\t\t\t\tnew asn1js.Any({ optional: true })\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.signatureValue || \"signatureValue\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"CertificationRequestInfo\",\r\n\t\t\t\"CertificationRequestInfo.version\",\r\n\t\t\t\"CertificationRequestInfo.subject\",\r\n\t\t\t\"CertificationRequestInfo.subjectPublicKeyInfo\",\r\n\t\t\t\"CertificationRequestInfo.attributes\",\r\n\t\t\t\"signatureAlgorithm\",\r\n\t\t\t\"signatureValue\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertificationRequest.schema()\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CertificationRequest\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.tbs = asn1.result.CertificationRequestInfo.valueBeforeDecode;\r\n\t\t\r\n\t\tthis.version = asn1.result[\"CertificationRequestInfo.version\"].valueBlock.valueDec;\r\n\t\tthis.subject = new RelativeDistinguishedNames({ schema: asn1.result[\"CertificationRequestInfo.subject\"] });\r\n\t\tthis.subjectPublicKeyInfo = new PublicKeyInfo({ schema: asn1.result[\"CertificationRequestInfo.subjectPublicKeyInfo\"] });\r\n\t\tif(\"CertificationRequestInfo.attributes\" in asn1.result)\r\n\t\t\tthis.attributes = Array.from(asn1.result[\"CertificationRequestInfo.attributes\"], element => new Attribute({ schema: element }));\r\n\t\t\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\r\n\t\tthis.signatureValue = asn1.result.signatureValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function making ASN1js Sequence from current TBS\r\n\t * @returns {Sequence}\r\n\t */\r\n\tencodeTBS()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [\r\n\t\t\tnew asn1js.Integer({ value: this.version }),\r\n\t\t\tthis.subject.toSchema(),\r\n\t\t\tthis.subjectPublicKeyInfo.toSchema()\r\n\t\t];\r\n\t\t\r\n\t\tif(\"attributes\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.attributes, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\t//region Decode stored TBS value\r\n\t\tlet tbsSchema;\r\n\t\t\r\n\t\tif(encodeFlag === false)\r\n\t\t{\r\n\t\t\tif(this.tbs.byteLength === 0) // No stored TBS part\r\n\t\t\t\treturn CertificationRequest.schema();\r\n\t\t\t\r\n\t\t\ttbsSchema = asn1js.fromBER(this.tbs).result;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Create TBS schema via assembling from TBS parts\r\n\t\telse\r\n\t\t\ttbsSchema = this.encodeTBS();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\ttbsSchema,\r\n\t\t\t\tthis.signatureAlgorithm.toSchema(),\r\n\t\t\t\tthis.signatureValue\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\ttbs: bufferToHexCodes(this.tbs, 0, this.tbs.byteLength),\r\n\t\t\tversion: this.version,\r\n\t\t\tsubject: this.subject.toJSON(),\r\n\t\t\tsubjectPublicKeyInfo: this.subjectPublicKeyInfo.toJSON(),\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n\t\t\tsignatureValue: this.signatureValue.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"attributes\" in this)\r\n\t\t\tobject.attributes = Array.from(this.attributes, element => element.toJSON());\r\n\t\t\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Makes signature for currect certification request\r\n\t * @param {Object} privateKey WebCrypto private key\r\n\t * @param {string} [hashAlgorithm=SHA-1] String representing current hashing algorithm\r\n\t */\r\n\tsign(privateKey, hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Initial checking\r\n\t\t//region Get a private key from function parameter\r\n\t\tif(typeof privateKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide a private key for signing\");\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tlet parameters;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"default parameters\" for current algorithm and set correct signature algorithm\r\n\t\tsequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tparameters = result.parameters;\r\n\t\t\tthis.signatureAlgorithm = result.signatureAlgorithm;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create TBS data for signing\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tthis.tbs = this.encodeTBS().toBER(false);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Signing TBS data on provided private key\r\n\t\tsequence = sequence.then(() => engine.subtle.signWithPrivateKey(this.tbs, privateKey, parameters));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.signatureValue = new asn1js.BitString({ valueHex: result });\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify existing certification request signature\r\n\t * @returns {*}\r\n\t */\r\n\tverify()\r\n\t{\r\n\t\treturn getEngine().subtle.verifyWithPublicKey(this.tbs, this.signatureValue, this.subjectPublicKeyInfo, this.signatureAlgorithm);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Importing public key for current certificate request\r\n\t */\r\n\tgetPublicKey(parameters = null)\r\n\t{\r\n\t\treturn getEngine().getPublicKey(this.subjectPublicKeyInfo, this.signatureAlgorithm, parameters);\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"CertificationRequest.js"}