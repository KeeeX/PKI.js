{"version":3,"sources":["../src/ContentInfo.js"],"names":["ContentInfo","parameters","contentType","defaultValues","content","fromSchema","schema","asn1","asn1js","compareSchema","verified","Error","result","valueBlock","toString","Sequence","value","ObjectIdentifier","Constructed","idBlock","tagClass","tagNumber","object","Any","toJSON","memberName","memberValue","names","optional","name","blockName"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class ContentInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for ContentInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc contentType\r\n\t\t */\r\n\t\tthis.contentType = getParametersValue(parameters, \"contentType\", ContentInfo.defaultValues(\"contentType\"));\r\n\t\t/**\r\n\t\t * @type {Any}\r\n\t\t * @desc content\r\n\t\t */\r\n\t\tthis.content = getParametersValue(parameters, \"content\", ContentInfo.defaultValues(\"content\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"contentType\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"content\":\r\n\t\t\t\treturn new asn1js.Any();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ContentInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"contentType\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"content\":\r\n\t\t\t\treturn (memberValue instanceof asn1js.Any);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ContentInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * ContentInfo ::= SEQUENCE {\r\n\t *    contentType ContentType,\r\n\t *    content [0] EXPLICIT ANY DEFINED BY contentType }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [contentType]\r\n\t\t * @property {string} [content]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\tif((\"optional\" in names) === false)\r\n\t\t\tnames.optional = false;\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"ContentInfo\"),\r\n\t\t\toptional: names.optional,\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.contentType || \"contentType\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Any({ name: (names.content || \"content\") })] // EXPLICIT ANY value\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"contentType\",\r\n\t\t\t\"content\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tContentInfo.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ContentInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.contentType = asn1.result.contentType.valueBlock.toString();\r\n\t\tthis.content = asn1.result.content;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.contentType }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [this.content] // EXPLICIT ANY value\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\tcontentType: this.contentType\r\n\t\t};\r\n\r\n\t\tif(!(this.content instanceof asn1js.Any))\r\n\t\t\tobject.content = this.content.toJSON();\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"ContentInfo.js"}