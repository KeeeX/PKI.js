{"version":3,"sources":["../src/Time.js"],"names":["Time","parameters","type","defaultValues","value","fromSchema","schema","asn1","asn1js","compareSchema","names","utcTimeName","generalTimeName","verified","Error","result","toDate","UTCTime","valueDate","GeneralizedTime","memberName","Date","optional","Choice","name"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class Time\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Time class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t * @property {number} [type] 0 - UTCTime; 1 - GeneralizedTime; 2 - empty value\r\n\t * @property {Date} [value] Value of the TIME class\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc 0 - UTCTime; 1 - GeneralizedTime; 2 - empty value\r\n\t\t */\r\n\t\tthis.type = getParametersValue(parameters, \"type\", Time.defaultValues(\"type\"));\r\n\t\t/**\r\n\t\t * @type {Date}\r\n\t\t * @desc Value of the TIME class\r\n\t\t */\r\n\t\tthis.value = getParametersValue(parameters, \"value\", Time.defaultValues(\"value\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"type\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"value\":\r\n\t\t\t\treturn new Date(0, 0, 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Time class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * Time ::= CHOICE {\r\n     *   utcTime        UTCTime,\r\n     *   generalTime    GeneralizedTime }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @param {boolean} optional Flag that current schema should be optional\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {}, optional = false)\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [utcTimeName] Name for \"utcTimeName\" choice\r\n\t\t * @property {string} [generalTimeName] Name for \"generalTimeName\" choice\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Choice({\r\n\t\t\toptional,\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.UTCTime({ name: (names.utcTimeName || \"\") }),\r\n\t\t\t\tnew asn1js.GeneralizedTime({ name: (names.generalTimeName || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"utcTimeName\",\r\n\t\t\t\"generalTimeName\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, Time.schema({\r\n\t\t\tnames: {\r\n\t\t\t\tutcTimeName: \"utcTimeName\",\r\n\t\t\t\tgeneralTimeName: \"generalTimeName\"\r\n\t\t\t}\r\n\t\t}));\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for Time\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"utcTimeName\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.type = 0;\r\n\t\t\tthis.value = asn1.result.utcTimeName.toDate();\r\n\t\t}\r\n\t\tif(\"generalTimeName\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.type = 1;\r\n\t\t\tthis.value = asn1.result.generalTimeName.toDate();\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\tlet result = {};\r\n\r\n\t\tif(this.type === 0)\r\n\t\t\tresult = new asn1js.UTCTime({ valueDate: this.value });\r\n\t\tif(this.type === 1)\r\n\t\t\tresult = new asn1js.GeneralizedTime({ valueDate: this.value });\r\n\r\n\t\treturn result;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\ttype: this.type,\r\n\t\t\tvalue: this.value\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"Time.js"}