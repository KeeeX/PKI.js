{"version":3,"sources":["../src/PKCS8ShroudedKeyBag.js"],"names":["PKCS8ShroudedKeyBag","parameters","encryptionAlgorithm","defaultValues","encryptedData","parsedValue","fromSchema","schema","asn1","asn1js","compareSchema","names","blockName","verified","Error","AlgorithmIdentifier","result","Sequence","value","toSchema","toJSON","sequence","Promise","resolve","cmsEncrypted","EncryptedData","encryptedContentInfo","EncryptedContentInfo","contentEncryptionAlgorithm","encryptedContent","then","decrypt","error","reject","fromBER","offset","PrivateKeyInfo","contentToEncrypt","toBER","encrypt","memberName","OctetString","memberValue","compareWithDefault","algorithmId","isEqual","Object","keys","length","name","Choice","idBlock","isConstructed"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport EncryptedData from \"./EncryptedData.js\";\r\nimport EncryptedContentInfo from \"./EncryptedContentInfo.js\";\r\nimport PrivateKeyInfo from \"./PrivateKeyInfo.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC7292\r\n */\r\nexport default class PKCS8ShroudedKeyBag \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PKCS8ShroudedKeyBag class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc encryptionAlgorithm\r\n\t\t */\r\n\t\tthis.encryptionAlgorithm = getParametersValue(parameters, \"encryptionAlgorithm\", PKCS8ShroudedKeyBag.defaultValues(\"encryptionAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc encryptedData\r\n\t\t */\r\n\t\tthis.encryptedData = getParametersValue(parameters, \"encryptedData\", PKCS8ShroudedKeyBag.defaultValues(\"encryptedData\"));\r\n\t\t\r\n\t\tif(\"parsedValue\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {*}\r\n\t\t\t * @desc parsedValue\r\n\t\t\t */\r\n\t\t\tthis.parsedValue = getParametersValue(parameters, \"parsedValue\", PKCS8ShroudedKeyBag.defaultValues(\"parsedValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"encryptionAlgorithm\":\r\n\t\t\t\treturn (new AlgorithmIdentifier());\r\n\t\t\tcase \"encryptedData\":\r\n\t\t\t\treturn (new asn1js.OctetString());\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PKCS8ShroudedKeyBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"encryptionAlgorithm\":\r\n\t\t\t\treturn ((AlgorithmIdentifier.compareWithDefault(\"algorithmId\", memberValue.algorithmId)) &&\r\n\t\t\t\t((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"encryptedData\":\r\n\t\t\t\treturn (memberValue.isEqual(PKCS8ShroudedKeyBag.defaultValues(memberName)));\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PKCS8ShroudedKeyBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PKCS8ShroudedKeyBag ::= EncryptedPrivateKeyInfo\r\n\t *\r\n\t * EncryptedPrivateKeyInfo ::= SEQUENCE {\r\n\t *    encryptionAlgorithm AlgorithmIdentifier {{KeyEncryptionAlgorithms}},\r\n\t *    encryptedData EncryptedData\r\n\t * }\r\n\t *\r\n\t * EncryptedData ::= OCTET STRING\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [encryptionAlgorithm]\r\n\t\t * @property {string} [encryptedData]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.encryptionAlgorithm || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"encryptionAlgorithm\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.OctetString({ name: (names.encryptedData || \"encryptedData\") }),\r\n\t\t\t\t\t\tnew asn1js.OctetString({\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\tisConstructed: true\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tname: (names.encryptedData || \"encryptedData\")\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"encryptionAlgorithm\",\r\n\t\t\t\"encryptedData\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPKCS8ShroudedKeyBag.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tencryptionAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"encryptionAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tencryptedData: \"encryptedData\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PKCS8ShroudedKeyBag\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.encryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.encryptionAlgorithm });\r\n\t\tthis.encryptedData = asn1.result.encryptedData;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.encryptionAlgorithm.toSchema(),\r\n\t\t\t\tthis.encryptedData\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tencryptionAlgorithm: this.encryptionAlgorithm.toJSON(),\r\n\t\t\tencryptedData: this.encryptedData.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\tparseInternalValues(parameters)\r\n\t{\r\n\t\t//region Initial variables \r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst cmsEncrypted = new EncryptedData({\r\n\t\t\tencryptedContentInfo: new EncryptedContentInfo({\r\n\t\t\t\tcontentEncryptionAlgorithm: this.encryptionAlgorithm,\r\n\t\t\t\tencryptedContent: this.encryptedData\r\n\t\t\t})\r\n\t\t});\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Decrypt internal data \r\n\t\tsequence = sequence.then(\r\n\t\t\t() => cmsEncrypted.decrypt(parameters),\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initialize \"parsedValue\" with decrypted PKCS#8 private key \r\n\t\tsequence = sequence.then(\r\n\t\t\t/**\r\n\t\t\t * @param {ArrayBuffer} result\r\n\t\t\t */\r\n\t\t\tresult =>\r\n\t\t\t{\r\n\t\t\t\tconst asn1 = asn1js.fromBER(result);\r\n\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\treturn Promise.reject(\"Error during parsing ASN.1 data\");\r\n\t\t\t\t\r\n\t\t\t\tthis.parsedValue = new PrivateKeyInfo({ schema: asn1.result });\r\n\t\t\t\t\r\n\t\t\t\treturn Promise.resolve();\r\n\t\t\t},\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion \r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\tmakeInternalValues(parameters)\r\n\t{\r\n\t\t//region Check that we do have \"parsedValue\" \r\n\t\tif((\"parsedValue\" in this) === false)\r\n\t\t\treturn Promise.reject(\"Please initialize \\\"parsedValue\\\" first\");\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initial variables \r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst cmsEncrypted = new EncryptedData();\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Encrypt internal data \r\n\t\tsequence = sequence.then(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tparameters.contentToEncrypt = this.parsedValue.toSchema().toBER(false);\r\n\t\t\t\t\r\n\t\t\t\treturn cmsEncrypted.encrypt(parameters);\r\n\t\t\t},\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initialize internal values \r\n\t\tsequence = sequence.then(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tthis.encryptionAlgorithm = cmsEncrypted.encryptedContentInfo.contentEncryptionAlgorithm;\r\n\t\t\t\tthis.encryptedData = cmsEncrypted.encryptedContentInfo.encryptedContent;\r\n\t\t\t}\r\n\t\t);\r\n\t\t//endregion \r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"PKCS8ShroudedKeyBag.js"}