{"version":3,"sources":["../src/RevocationInfoChoices.js"],"names":["RevocationInfoChoices","parameters","crls","defaultValues","otherRevocationInfos","fromSchema","schema","asn1","asn1js","compareSchema","names","verified","Error","result","element","idBlock","tagClass","push","CertificateRevocationList","OtherRevocationInfoFormat","outputArray","Array","from","toSchema","tagNumber","Set","value","toJSON","memberName","name","blockName","Repeated","Choice","Constructed","ObjectIdentifier","Any"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport CertificateRevocationList from \"./CertificateRevocationList.js\";\r\nimport OtherRevocationInfoFormat from \"./OtherRevocationInfoFormat.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class RevocationInfoChoices \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for RevocationInfoChoices class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<CertificateRevocationList>}\r\n\t\t * @desc crls\r\n\t\t */\r\n\t\tthis.crls = getParametersValue(parameters, \"crls\", RevocationInfoChoices.defaultValues(\"crls\"));\r\n\t\t/**\r\n\t\t * @type {Array.<OtherRevocationInfoFormat>}\r\n\t\t * @desc otherRevocationInfos\r\n\t\t */\r\n\t\tthis.otherRevocationInfos = getParametersValue(parameters, \"otherRevocationInfos\", RevocationInfoChoices.defaultValues(\"otherRevocationInfos\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"crls\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"otherRevocationInfos\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RevocationInfoChoices class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * RevocationInfoChoices ::= SET OF RevocationInfoChoice\r\n\t *\r\n\t * RevocationInfoChoice ::= CHOICE {\r\n\t *    crl CertificateList,\r\n\t *    other [1] IMPLICIT OtherRevocationInfoFormat }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [crls]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Set({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.crls || \"\"),\r\n\t\t\t\t\tvalue: new asn1js.Choice({\r\n\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\tCertificateRevocationList.schema(),\r\n\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\t\tnew asn1js.ObjectIdentifier(),\r\n\t\t\t\t\t\t\t\t\tnew asn1js.Any()\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"crls\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRevocationInfoChoices.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcrls: \"crls\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for RevocationInfoChoices\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tfor(const element of asn1.result.crls)\r\n\t\t{\r\n\t\t\tif(element.idBlock.tagClass === 1)\r\n\t\t\t\tthis.crls.push(new CertificateRevocationList({ schema: element }));\r\n\t\t\telse\r\n\t\t\t\tthis.otherRevocationInfos.push(new OtherRevocationInfoFormat({ schema: element }));\r\n\t\t}\r\n\t\t\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output set\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(...Array.from(this.crls, element => element.toSchema()));\r\n\t\t\r\n\t\toutputArray.push(...Array.from(this.otherRevocationInfos, element =>\r\n\t\t{\r\n\t\t\tconst schema = element.toSchema();\r\n\t\t\t\r\n\t\t\tschema.idBlock.tagClass = 3;\r\n\t\t\tschema.idBlock.tagNumber = 1;\r\n\t\t\t\r\n\t\t\treturn schema;\r\n\t\t}));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Set({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tcrls: Array.from(this.crls, element => element.toJSON()),\r\n\t\t\totherRevocationInfos: Array.from(this.otherRevocationInfos, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"RevocationInfoChoices.js"}