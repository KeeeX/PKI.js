{"version":3,"sources":["../src/IssuerAndSerialNumber.js"],"names":["IssuerAndSerialNumber","parameters","issuer","defaultValues","serialNumber","fromSchema","schema","asn1","asn1js","compareSchema","names","blockName","verified","Error","RelativeDistinguishedNames","result","Sequence","value","toSchema","toJSON","memberName","Integer","name"],"mappings":"6FAAA,sDACA,gCACA,mG,umCACA;AACA;;MAGqBA,CAAAA,qB,yBAEpB;AACA;;;;IAKA,gCACA,IADYC,CAAAA,UACZ,2DADyB,EACzB,6CACC;AACA;;;KAIA,KAAKC,MAAL,CAAc,gCAAmBD,UAAnB,CAA+B,QAA/B,CAAyCD,qBAAqB,CAACG,aAAtB,CAAoC,QAApC,CAAzC,CAAd,CACA;;;KAIA,KAAKC,YAAL,CAAoB,gCAAmBH,UAAnB,CAA+B,cAA/B,CAA+CD,qBAAqB,CAACG,aAAtB,CAAoC,cAApC,CAA/C,CAApB,CACA;AAEA;AACA,GAAG,UAAYF,CAAAA,UAAf,CACC,KAAKI,UAAL,CAAgBJ,UAAU,CAACK,MAA3B,EACD;AACA,CACD;AACA;;;0DAkDA;AACA;;;8BAIWA,M,CACX,CACC;AACA,wBAAWA,MAAX,CAAmB,CAClB,QADkB,CAElB,cAFkB,CAAnB,EAIA;AAEA;AACA,GAAMC,CAAAA,IAAI,CAAGC,MAAM,CAACC,aAAP,CAAqBH,MAArB,CACZA,MADY,CAEZN,qBAAqB,CAACM,MAAtB,CAA6B,CAC5BI,KAAK,CAAE,CACNR,MAAM,CAAE,CACPQ,KAAK,CAAE,CACNC,SAAS,CAAE,QADL,CADA,CADF,CAMNP,YAAY,CAAE,cANR,CADqB,CAA7B,CAFY,CAAb,CAcA,GAAGG,IAAI,CAACK,QAAL,GAAkB,KAArB,CACC,KAAM,IAAIC,CAAAA,KAAJ,CAAU,+EAAV,CAAN,CACD;AAEA;AACA,KAAKX,MAAL,CAAc,GAAIY,oCAAJ,CAA+B,CAAER,MAAM,CAAEC,IAAI,CAACQ,MAAL,CAAYb,MAAtB,CAA/B,CAAd,CACA,KAAKE,YAAL,CAAoBG,IAAI,CAACQ,MAAL,CAAYX,YAAhC,CACA;AACA,CACD;AACA;;;+CAKA,CACC;AACA,MAAQ,IAAII,CAAAA,MAAM,CAACQ,QAAX,CAAoB,CAC3BC,KAAK,CAAE,CACN,KAAKf,MAAL,CAAYgB,QAAZ,EADM,CAEN,KAAKd,YAFC,CADoB,CAApB,CAAR,CAMA;AACA,CACD;AACA;;;2CAKA,CACC,MAAO,CACNF,MAAM,CAAE,KAAKA,MAAL,CAAYiB,MAAZ,EADF,CAENf,YAAY,CAAE,KAAKA,YAAL,CAAkBe,MAAlB,EAFR,CAAP,CAIA,CACD;sDAhHqBC,U,CACrB,CACC,OAAOA,UAAP,EAEC,IAAK,QAAL,CACC,MAAO,IAAIN,oCAAJ,EAAP,CACD,IAAK,cAAL,CACC,MAAO,IAAIN,CAAAA,MAAM,CAACa,OAAX,EAAP,CACD,QACC,KAAM,IAAIR,CAAAA,KAAJ,gEAAkEO,UAAlE,EAAN,CAPF,CASA,CACD;AACA;;;;;;;;;;;;;;2CAgBA,IADcnB,CAAAA,UACd,2DAD2B,EAC3B,CACC;;;;;KAMA,GAAMS,CAAAA,KAAK,CAAG,gCAAmBT,UAAnB,CAA+B,OAA/B,CAAwC,EAAxC,CAAd,CAEA,MAAQ,IAAIO,CAAAA,MAAM,CAACQ,QAAX,CAAoB,CAC3BM,IAAI,CAAGZ,KAAK,CAACC,SAAN,EAAmB,EADC,CAE3BM,KAAK,CAAE,CACNH,oCAA2BR,MAA3B,CAAkCI,KAAK,CAACR,MAAN,EAAgB,EAAlD,CADM,CAEN,GAAIM,CAAAA,MAAM,CAACa,OAAX,CAAmB,CAAEC,IAAI,CAAGZ,KAAK,CAACN,YAAN,EAAsB,EAA/B,CAAnB,CAFM,CAFoB,CAApB,CAAR,CAOA,C,qCAqEF","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class IssuerAndSerialNumber\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for IssuerAndSerialNumber class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {RelativeDistinguishedNames}\r\n\t\t * @desc issuer\r\n\t\t */\r\n\t\tthis.issuer = getParametersValue(parameters, \"issuer\", IssuerAndSerialNumber.defaultValues(\"issuer\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc serialNumber\r\n\t\t */\r\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", IssuerAndSerialNumber.defaultValues(\"serialNumber\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"issuer\":\r\n\t\t\t\treturn new RelativeDistinguishedNames();\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for IssuerAndSerialNumber class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * IssuerAndSerialNumber ::= SEQUENCE {\r\n\t *    issuer Name,\r\n\t *    serialNumber CertificateSerialNumber }\r\n\t *\r\n\t * CertificateSerialNumber ::= INTEGER\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [issuer]\r\n\t\t * @property {string} [serialNumber]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tRelativeDistinguishedNames.schema(names.issuer || {}),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"issuer\",\r\n\t\t\t\"serialNumber\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tIssuerAndSerialNumber.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tissuer: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"issuer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tserialNumber: \"serialNumber\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for IssuerAndSerialNumber\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.issuer = new RelativeDistinguishedNames({ schema: asn1.result.issuer });\r\n\t\tthis.serialNumber = asn1.result.serialNumber;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.issuer.toSchema(),\r\n\t\t\t\tthis.serialNumber\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tissuer: this.issuer.toJSON(),\r\n\t\t\tserialNumber: this.serialNumber.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"IssuerAndSerialNumber.js"}