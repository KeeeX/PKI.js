{"version":3,"sources":["../src/OCSPRequest.js"],"names":["OCSPRequest","parameters","tbsRequest","defaultValues","optionalSignature","fromSchema","schema","asn1","asn1js","compareSchema","verified","Error","TBSRequest","result","Signature","encodeFlag","outputArray","push","toSchema","Sequence","value","_object","toJSON","certificate","sequence","Promise","resolve","certID","CertID","then","createForCertificate","requestList","Request","reqCert","error","reject","privateKey","hashAlgorithm","tbs","engine","subtle","getSignatureParameters","signatureAlgorithm","toBER","signWithPrivateKey","signature","BitString","valueHex","memberName","memberValue","compareWithDefault","version","requestorName","requestExtensions","certs","names","name","blockName","Constructed","optional","idBlock","tagClass","tagNumber"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport { getEngine } from \"./common.js\";\r\nimport TBSRequest from \"./TBSRequest.js\";\r\nimport Signature from \"./Signature.js\";\r\nimport Request from \"./Request.js\";\r\nimport CertID from \"./CertID.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class OCSPRequest \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OCSPRequest class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {TBSRequest}\r\n\t\t * @desc tbsRequest\r\n\t\t */\r\n\t\tthis.tbsRequest = getParametersValue(parameters, \"tbsRequest\", OCSPRequest.defaultValues(\"tbsRequest\"));\r\n\t\t\r\n\t\tif(\"optionalSignature\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Signature}\r\n\t\t\t * @desc optionalSignature\r\n\t\t\t */\r\n\t\t\tthis.optionalSignature = getParametersValue(parameters, \"optionalSignature\", OCSPRequest.defaultValues(\"optionalSignature\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbsRequest\":\r\n\t\t\t\treturn new TBSRequest();\r\n\t\t\tcase \"optionalSignature\":\r\n\t\t\t\treturn new Signature();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OCSPRequest class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbsRequest\":\r\n\t\t\t\t// noinspection OverlyComplexBooleanExpressionJS\r\n\t\t\t\treturn ((TBSRequest.compareWithDefault(\"tbs\", memberValue.tbs)) &&\r\n\t\t\t\t(TBSRequest.compareWithDefault(\"version\", memberValue.version)) &&\r\n\t\t\t\t(TBSRequest.compareWithDefault(\"requestorName\", memberValue.requestorName)) &&\r\n\t\t\t\t(TBSRequest.compareWithDefault(\"requestList\", memberValue.requestList)) &&\r\n\t\t\t\t(TBSRequest.compareWithDefault(\"requestExtensions\", memberValue.requestExtensions)));\r\n\t\t\tcase \"optionalSignature\":\r\n\t\t\t\treturn ((Signature.compareWithDefault(\"signatureAlgorithm\", memberValue.signatureAlgorithm)) &&\r\n\t\t\t\t(Signature.compareWithDefault(\"signature\", memberValue.signature)) &&\r\n\t\t\t\t(Signature.compareWithDefault(\"certs\", memberValue.certs)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OCSPRequest class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * OCSPRequest     ::=     SEQUENCE {\r\n\t *    tbsRequest                  TBSRequest,\r\n\t *    optionalSignature   [0]     EXPLICIT Signature OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [tbsRequest]\r\n\t\t * @property {string} [optionalSignature]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: names.blockName || \"OCSPRequest\",\r\n\t\t\tvalue: [\r\n\t\t\t\tTBSRequest.schema(names.tbsRequest || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"tbsRequest\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tSignature.schema(names.optionalSignature || {\r\n\t\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\t\tblockName: \"optionalSignature\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"tbsRequest\",\r\n\t\t\t\"optionalSignature\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOCSPRequest.schema()\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OCSPRequest\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.tbsRequest = new TBSRequest({ schema: asn1.result.tbsRequest });\r\n\t\tif(\"optionalSignature\" in asn1.result)\r\n\t\t\tthis.optionalSignature = new Signature({ schema: asn1.result.optionalSignature });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @param {boolean} encodeFlag If param equal to false then create TBS schema via decoding stored value. In othe case create TBS schema via assembling from TBS parts.\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(this.tbsRequest.toSchema(encodeFlag));\r\n\t\tif(\"optionalSignature\" in this)\r\n\t\t\toutputArray.push(this.optionalSignature.toSchema());\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\ttbsRequest: this.tbsRequest.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"optionalSignature\" in this)\r\n\t\t\t_object.optionalSignature = this.optionalSignature.toJSON();\r\n\t\t\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Making OCSP Request for specific certificate\r\n\t * @param {Certificate} certificate Certificate making OCSP Request for\r\n\t * @param {Object} parameters Additional parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tcreateForCertificate(certificate, parameters)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst certID = new CertID();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create OCSP certificate identifier for the certificate\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tcertID.createForCertificate(certificate, parameters)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Make final request data\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tthis.tbsRequest = new TBSRequest({\r\n\t\t\t\trequestList: [\r\n\t\t\t\t\tnew Request({\r\n\t\t\t\t\t\treqCert: certID\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t});\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Make signature for current OCSP Request\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1\r\n\t * @returns {Promise}\r\n\t */\r\n\tsign(privateKey, hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Initial checking\r\n\t\t//region Check private key\r\n\t\tif(typeof privateKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide a private key for signing\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check that \"optionalSignature\" exists in the current request\r\n\t\tif((\"optionalSignature\" in this) === false)\r\n\t\t\treturn Promise.reject(\"Need to create \\\"optionalSignature\\\" field before signing\");\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tlet parameters;\r\n\t\t\r\n\t\tlet tbs;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"default parameters\" for current algorithm and set correct signature algorithm\r\n\t\tsequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tparameters = result.parameters;\r\n\t\t\tthis.optionalSignature.signatureAlgorithm = result.signatureAlgorithm;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create TBS data for signing\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\ttbs = this.tbsRequest.toSchema(true).toBER(false);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Signing TBS data on provided private key\r\n\t\tsequence = sequence.then(() => engine.subtle.signWithPrivateKey(tbs, privateKey, parameters));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.optionalSignature.signature = new asn1js.BitString({ valueHex: result });\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\tverify()\r\n\t{\r\n\t\t// TODO: Create the function\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"OCSPRequest.js"}