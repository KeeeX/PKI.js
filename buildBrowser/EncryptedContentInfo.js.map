{"version":3,"sources":["../src/EncryptedContentInfo.js"],"names":["EncryptedContentInfo","parameters","contentType","defaultValues","contentEncryptionAlgorithm","encryptedContent","idBlock","tagClass","tagNumber","isConstructed","constrString","asn1js","OctetString","offset","length","valueBlock","valueHex","byteLength","pieceView","Uint8Array","_array","ArrayBuffer","_view","i","value","push","fromSchema","schema","asn1","compareSchema","names","blockName","verified","Error","result","toString","AlgorithmIdentifier","sequenceLengthBlock","isIndefiniteForm","outputArray","ObjectIdentifier","toSchema","encryptedValue","lenBlock","Sequence","_object","toJSON","memberName","memberValue","algorithmId","isEqual","name","Choice","Constructed","Repeated","Primitive"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class EncryptedContentInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for EncryptedContentInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc contentType\r\n\t\t */\r\n\t\tthis.contentType = getParametersValue(parameters, \"contentType\", EncryptedContentInfo.defaultValues(\"contentType\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc contentEncryptionAlgorithm\r\n\t\t */\r\n\t\tthis.contentEncryptionAlgorithm = getParametersValue(parameters, \"contentEncryptionAlgorithm\", EncryptedContentInfo.defaultValues(\"contentEncryptionAlgorithm\"));\r\n\r\n\t\tif(\"encryptedContent\" in parameters)\r\n\t\t{\r\n\t\t\t/**\r\n\t\t\t * @type {OctetString}\r\n\t\t\t * @desc encryptedContent (!!!) could be contructive or primitive value (!!!)\r\n\t\t\t */\r\n\t\t\tthis.encryptedContent = parameters.encryptedContent;\r\n\t\t\t\r\n\t\t\tif((this.encryptedContent.idBlock.tagClass === 1) &&\r\n\t\t\t\t(this.encryptedContent.idBlock.tagNumber === 4))\r\n\t\t\t{\r\n\t\t\t\t//region Divide OCTETSTRING value down to small pieces\r\n\t\t\t\tif(this.encryptedContent.idBlock.isConstructed === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst constrString = new asn1js.OctetString({\r\n\t\t\t\t\t\tidBlock: { isConstructed: true },\r\n\t\t\t\t\t\tisConstructed: true\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet offset = 0;\r\n\t\t\t\t\tlet length = this.encryptedContent.valueBlock.valueHex.byteLength;\r\n\t\t\t\t\t\r\n\t\t\t\t\twhile(length > 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst pieceView = new Uint8Array(this.encryptedContent.valueBlock.valueHex, offset, ((offset + 1024) > this.encryptedContent.valueBlock.valueHex.byteLength) ? (this.encryptedContent.valueBlock.valueHex.byteLength - offset) : 1024);\r\n\t\t\t\t\t\tconst _array = new ArrayBuffer(pieceView.length);\r\n\t\t\t\t\t\tconst _view = new Uint8Array(_array);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor(let i = 0; i < _view.length; i++)\r\n\t\t\t\t\t\t\t_view[i] = pieceView[i];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconstrString.valueBlock.value.push(new asn1js.OctetString({ valueHex: _array }));\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlength -= pieceView.length;\r\n\t\t\t\t\t\toffset += pieceView.length;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.encryptedContent = constrString;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"contentType\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"contentEncryptionAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"encryptedContent\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EncryptedContentInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"contentType\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"contentEncryptionAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"encryptedContent\":\r\n\t\t\t\treturn (memberValue.isEqual(EncryptedContentInfo.defaultValues(memberName)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EncryptedContentInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * EncryptedContentInfo ::= SEQUENCE {\r\n\t *    contentType ContentType,\r\n\t *    contentEncryptionAlgorithm ContentEncryptionAlgorithmIdentifier,\r\n\t *    encryptedContent [0] IMPLICIT EncryptedContent OPTIONAL }\r\n\t *\r\n\t * Comment: Strange, but modern crypto engines create \"encryptedContent\" as \"[0] EXPLICIT EncryptedContent\"\r\n\t *\r\n\t * EncryptedContent ::= OCTET STRING\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [contentType]\r\n\t\t * @property {string} [contentEncryptionAlgorithm]\r\n\t\t * @property {string} [encryptedContent]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.contentType || \"\") }),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.contentEncryptionAlgorithm || {}),\r\n\t\t\t\t// The CHOICE we need because \"EncryptedContent\" could have either \"constructive\"\r\n\t\t\t\t// or \"primitive\" form of encoding and we need to handle both variants\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\tname: (names.encryptedContent || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\t\t\tvalue: new asn1js.OctetString()\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\t\t\tname: (names.encryptedContent || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"contentType\",\r\n\t\t\t\"contentEncryptionAlgorithm\",\r\n\t\t\t\"encryptedContent\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tEncryptedContentInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcontentType: \"contentType\",\r\n\t\t\t\t\tcontentEncryptionAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"contentEncryptionAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tencryptedContent: \"encryptedContent\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for EncryptedContentInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.contentType = asn1.result.contentType.valueBlock.toString();\r\n\t\tthis.contentEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.contentEncryptionAlgorithm });\r\n\r\n\t\tif(\"encryptedContent\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.encryptedContent = asn1.result.encryptedContent;\r\n\r\n\t\t\tthis.encryptedContent.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\t\tthis.encryptedContent.idBlock.tagNumber = 4; // OCTETSTRING (!!!) The value still has instance of \"in_window.org.pkijs.asn1.ASN1_CONSTRUCTED / ASN1_PRIMITIVE\"\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst sequenceLengthBlock = {\r\n\t\t\tisIndefiniteForm: false\r\n\t\t};\r\n\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.contentType }));\r\n\t\toutputArray.push(this.contentEncryptionAlgorithm.toSchema());\r\n\r\n\t\tif(\"encryptedContent\" in this)\r\n\t\t{\r\n\t\t\tsequenceLengthBlock.isIndefiniteForm = this.encryptedContent.idBlock.isConstructed;\r\n\r\n\t\t\tconst encryptedValue = this.encryptedContent;\r\n\r\n\t\t\tencryptedValue.idBlock.tagClass = 3; // CONTEXT-SPECIFIC\r\n\t\t\tencryptedValue.idBlock.tagNumber = 0; // [0]\r\n\r\n\t\t\tencryptedValue.lenBlock.isIndefiniteForm = this.encryptedContent.idBlock.isConstructed;\r\n\r\n\t\t\toutputArray.push(encryptedValue);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tlenBlock: sequenceLengthBlock,\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tcontentType: this.contentType,\r\n\t\t\tcontentEncryptionAlgorithm: this.contentEncryptionAlgorithm.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"encryptedContent\" in this)\r\n\t\t\t_object.encryptedContent = this.encryptedContent.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"EncryptedContentInfo.js"}