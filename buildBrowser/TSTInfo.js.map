{"version":3,"sources":["../src/TSTInfo.js"],"names":["TSTInfo","parameters","version","defaultValues","policy","messageImprint","serialNumber","genTime","accuracy","ordering","nonce","tsa","extensions","fromSchema","schema","asn1","asn1js","compareSchema","verified","Error","result","valueBlock","valueDec","toString","MessageImprint","toDate","Accuracy","value","GeneralName","Array","from","element","Extension","outputArray","push","Integer","ObjectIdentifier","toSchema","GeneralizedTime","valueDate","Boolean","Constructed","optional","idBlock","tagClass","tagNumber","Sequence","_object","toJSON","sequence","Promise","resolve","data","notBefore","notAfter","crypto","reject","shaAlgorithm","hashAlgorithm","algorithmId","then","digest","name","Uint8Array","hashedMessage","valueHex","memberName","Date","memberValue","compareWithDefault","isEqual","seconds","millis","micros","type","length","names","blockName","Repeated","extension"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, isEqualBuffer, clearProps } from \"pvutils\";\r\nimport { getCrypto, getAlgorithmByOID } from \"./common.js\";\r\nimport MessageImprint from \"./MessageImprint.js\";\r\nimport Accuracy from \"./Accuracy.js\";\r\nimport GeneralName from \"./GeneralName.js\";\r\nimport Extension from \"./Extension.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3161\r\n */\r\nexport default class TSTInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for TSTInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", TSTInfo.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc policy\r\n\t\t */\r\n\t\tthis.policy = getParametersValue(parameters, \"policy\", TSTInfo.defaultValues(\"policy\"));\r\n\t\t/**\r\n\t\t * @type {MessageImprint}\r\n\t\t * @desc messageImprint\r\n\t\t */\r\n\t\tthis.messageImprint = getParametersValue(parameters, \"messageImprint\", TSTInfo.defaultValues(\"messageImprint\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc serialNumber\r\n\t\t */\r\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", TSTInfo.defaultValues(\"serialNumber\"));\r\n\t\t/**\r\n\t\t * @type {Date}\r\n\t\t * @desc genTime\r\n\t\t */\r\n\t\tthis.genTime = getParametersValue(parameters, \"genTime\", TSTInfo.defaultValues(\"genTime\"));\r\n\r\n\t\tif(\"accuracy\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Accuracy}\r\n\t\t\t * @desc accuracy\r\n\t\t\t */\r\n\t\t\tthis.accuracy = getParametersValue(parameters, \"accuracy\", TSTInfo.defaultValues(\"accuracy\"));\r\n\r\n\t\tif(\"ordering\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {boolean}\r\n\t\t\t * @desc ordering\r\n\t\t\t */\r\n\t\t\tthis.ordering = getParametersValue(parameters, \"ordering\", TSTInfo.defaultValues(\"ordering\"));\r\n\r\n\t\tif(\"nonce\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Integer}\r\n\t\t\t * @desc nonce\r\n\t\t\t */\r\n\t\t\tthis.nonce = getParametersValue(parameters, \"nonce\", TSTInfo.defaultValues(\"nonce\"));\r\n\r\n\t\tif(\"tsa\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {GeneralName}\r\n\t\t\t * @desc tsa\r\n\t\t\t */\r\n\t\t\tthis.tsa = getParametersValue(parameters, \"tsa\", TSTInfo.defaultValues(\"tsa\"));\r\n\r\n\t\tif(\"extensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Extension>}\r\n\t\t\t * @desc extensions\r\n\t\t\t */\r\n\t\t\tthis.extensions = getParametersValue(parameters, \"extensions\", TSTInfo.defaultValues(\"extensions\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"policy\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"messageImprint\":\r\n\t\t\t\treturn new MessageImprint();\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"genTime\":\r\n\t\t\t\treturn new Date(0, 0, 0);\r\n\t\t\tcase \"accuracy\":\r\n\t\t\t\treturn new Accuracy();\r\n\t\t\tcase \"ordering\":\r\n\t\t\t\treturn false;\r\n\t\t\tcase \"nonce\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"tsa\":\r\n\t\t\t\treturn new GeneralName();\r\n\t\t\tcase \"extensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TSTInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\tcase \"policy\":\r\n\t\t\tcase \"genTime\":\r\n\t\t\tcase \"ordering\":\r\n\t\t\t\treturn (memberValue === TSTInfo.defaultValues(memberName));\r\n\t\t\tcase \"messageImprint\":\r\n\t\t\t\treturn ((MessageImprint.compareWithDefault(\"hashAlgorithm\", memberValue.hashAlgorithm)) &&\r\n\t\t\t\t\t\t(MessageImprint.compareWithDefault(\"hashedMessage\", memberValue.hashedMessage)));\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\tcase \"nonce\":\r\n\t\t\t\treturn (memberValue.isEqual(TSTInfo.defaultValues(memberName)));\r\n\t\t\tcase \"accuracy\":\r\n\t\t\t\treturn ((Accuracy.compareWithDefault(\"seconds\", memberValue.seconds)) &&\r\n\t\t\t\t\t\t(Accuracy.compareWithDefault(\"millis\", memberValue.millis)) &&\r\n\t\t\t\t\t\t(Accuracy.compareWithDefault(\"micros\", memberValue.micros)));\r\n\t\t\tcase \"tsa\":\r\n\t\t\t\treturn ((GeneralName.compareWithDefault(\"type\", memberValue.type)) &&\r\n\t\t\t\t\t\t(GeneralName.compareWithDefault(\"value\", memberValue.value)));\r\n\t\t\tcase \"extensions\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TSTInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * TSTInfo ::= SEQUENCE  {\r\n\t *   version                      INTEGER  { v1(1) },\r\n\t *   policy                       TSAPolicyId,\r\n\t *   messageImprint               MessageImprint,\r\n\t *   serialNumber                 INTEGER,\r\n\t *   genTime                      GeneralizedTime,\r\n\t *   accuracy                     Accuracy                 OPTIONAL,\r\n\t *   ordering                     BOOLEAN             DEFAULT FALSE,\r\n\t *   nonce                        INTEGER                  OPTIONAL,\r\n\t *   tsa                          [0] GeneralName          OPTIONAL,\r\n\t *   extensions                   [1] IMPLICIT Extensions  OPTIONAL  }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [policy]\r\n\t\t * @property {string} [messageImprint]\r\n\t\t * @property {string} [serialNumber]\r\n\t\t * @property {string} [genTime]\r\n\t\t * @property {string} [accuracy]\r\n\t\t * @property {string} [ordering]\r\n\t\t * @property {string} [nonce]\r\n\t\t * @property {string} [tsa]\r\n\t\t * @property {string} [extensions]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"TSTInfo\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"TSTInfo.version\") }),\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.policy || \"TSTInfo.policy\") }),\r\n\t\t\t\tMessageImprint.schema(names.messageImprint || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"TSTInfo.messageImprint\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"TSTInfo.serialNumber\") }),\r\n\t\t\t\tnew asn1js.GeneralizedTime({ name: (names.genTime || \"TSTInfo.genTime\") }),\r\n\t\t\t\tAccuracy.schema(names.accuracy || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"TSTInfo.accuracy\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Boolean({\r\n\t\t\t\t\tname: (names.ordering || \"TSTInfo.ordering\"),\r\n\t\t\t\t\toptional: true\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Integer({\r\n\t\t\t\t\tname: (names.nonce || \"TSTInfo.nonce\"),\r\n\t\t\t\t\toptional: true\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [GeneralName.schema(names.tsa || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"TSTInfo.tsa\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.extensions || \"TSTInfo.extensions\"),\r\n\t\t\t\t\t\t\tvalue: Extension.schema(names.extension || {})\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}) // IMPLICIT Extensions\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"TSTInfo.version\",\r\n\t\t\t\"TSTInfo.policy\",\r\n\t\t\t\"TSTInfo.messageImprint\",\r\n\t\t\t\"TSTInfo.serialNumber\",\r\n\t\t\t\"TSTInfo.genTime\",\r\n\t\t\t\"TSTInfo.accuracy\",\r\n\t\t\t\"TSTInfo.ordering\",\r\n\t\t\t\"TSTInfo.nonce\",\r\n\t\t\t\"TSTInfo.tsa\",\r\n\t\t\t\"TSTInfo.extensions\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tTSTInfo.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for TSTInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result[\"TSTInfo.version\"].valueBlock.valueDec;\r\n\t\tthis.policy = asn1.result[\"TSTInfo.policy\"].valueBlock.toString();\r\n\t\tthis.messageImprint = new MessageImprint({ schema: asn1.result[\"TSTInfo.messageImprint\"] });\r\n\t\tthis.serialNumber = asn1.result[\"TSTInfo.serialNumber\"];\r\n\t\tthis.genTime = asn1.result[\"TSTInfo.genTime\"].toDate();\r\n\t\tif(\"TSTInfo.accuracy\" in asn1.result)\r\n\t\t\tthis.accuracy = new Accuracy({ schema: asn1.result[\"TSTInfo.accuracy\"] });\r\n\t\tif(\"TSTInfo.ordering\" in asn1.result)\r\n\t\t\tthis.ordering = asn1.result[\"TSTInfo.ordering\"].valueBlock.value;\r\n\t\tif(\"TSTInfo.nonce\" in asn1.result)\r\n\t\t\tthis.nonce = asn1.result[\"TSTInfo.nonce\"];\r\n\t\tif(\"TSTInfo.tsa\" in asn1.result)\r\n\t\t\tthis.tsa = new GeneralName({ schema: asn1.result[\"TSTInfo.tsa\"] });\r\n\t\tif(\"TSTInfo.extensions\" in asn1.result)\r\n\t\t\tthis.extensions = Array.from(asn1.result[\"TSTInfo.extensions\"], element => new Extension({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.policy }));\r\n\t\toutputArray.push(this.messageImprint.toSchema());\r\n\t\toutputArray.push(this.serialNumber);\r\n\t\toutputArray.push(new asn1js.GeneralizedTime({ valueDate: this.genTime }));\r\n\t\tif(\"accuracy\" in this)\r\n\t\t\toutputArray.push(this.accuracy.toSchema());\r\n\t\tif(\"ordering\" in this)\r\n\t\t\toutputArray.push(new asn1js.Boolean({ value: this.ordering }));\r\n\t\tif(\"nonce\" in this)\r\n\t\t\toutputArray.push(this.nonce);\r\n\t\tif(\"tsa\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [this.tsa.toSchema()]\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\t//region Create array of extensions\r\n\t\tif(\"extensions\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.extensions, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version,\r\n\t\t\tpolicy: this.policy,\r\n\t\t\tmessageImprint: this.messageImprint.toJSON(),\r\n\t\t\tserialNumber: this.serialNumber.toJSON(),\r\n\t\t\tgenTime: this.genTime\r\n\t\t};\r\n\r\n\t\tif(\"accuracy\" in this)\r\n\t\t\t_object.accuracy = this.accuracy.toJSON();\r\n\r\n\t\tif(\"ordering\" in this)\r\n\t\t\t_object.ordering = this.ordering;\r\n\r\n\t\tif(\"nonce\" in this)\r\n\t\t\t_object.nonce = this.nonce.toJSON();\r\n\r\n\t\tif(\"tsa\" in this)\r\n\t\t\t_object.tsa = this.tsa.toJSON();\r\n\r\n\t\tif(\"extensions\" in this)\r\n\t\t\t_object.extensions = Array.from(this.extensions, element => element.toJSON());\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify current TST Info value\r\n\t * @param {{data: ArrayBuffer, notBefore: Date, notAfter: Date}} parameters Input parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tverify(parameters = {})\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\r\n\t\tlet data;\r\n\r\n\t\tlet notBefore = null;\r\n\t\tlet notAfter = null;\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get initial parameters\r\n\t\tif(\"data\" in parameters)\r\n\t\t\tdata = parameters.data;\r\n\t\telse\r\n\t\t\treturn Promise.reject(\"\\\"data\\\" is a mandatory attribute for TST_INFO verification\");\r\n\r\n\t\tif(\"notBefore\" in parameters)\r\n\t\t\tnotBefore = parameters.notBefore;\r\n\r\n\t\tif(\"notAfter\" in parameters)\r\n\t\t\tnotAfter = parameters.notAfter;\r\n\t\t//endregion\r\n\r\n\t\t//region Check date\r\n\t\tif(notBefore !== null)\r\n\t\t{\r\n\t\t\tif(this.genTime < notBefore)\r\n\t\t\t\treturn Promise.reject(\"Generation time for TSTInfo object is less than notBefore value\");\r\n\t\t}\r\n\t\t\r\n\t\tif(notAfter !== null)\r\n\t\t{\r\n\t\t\tif(this.genTime > notAfter)\r\n\t\t\t\treturn Promise.reject(\"Generation time for TSTInfo object is more than notAfter value\");\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find hashing algorithm\r\n\t\tconst shaAlgorithm = getAlgorithmByOID(this.messageImprint.hashAlgorithm.algorithmId);\r\n\t\tif((\"name\" in shaAlgorithm) === false)\r\n\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${this.messageImprint.hashAlgorithm.algorithmId}`);\r\n\t\t//endregion\r\n\r\n\t\t//region Calculate message digest for input \"data\" buffer\r\n\t\t// noinspection JSCheckFunctionSignatures\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tcrypto.digest(shaAlgorithm.name, new Uint8Array(data))\r\n\t\t).then(\r\n\t\t\tresult => isEqualBuffer(result, this.messageImprint.hashedMessage.valueBlock.valueHex)\r\n\t\t);\r\n\t\t//endregion\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"TSTInfo.js"}