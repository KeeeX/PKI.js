{"version":3,"sources":["../src/ECPublicKey.js"],"names":["ECPublicKey","parameters","x","defaultValues","y","namedCurve","fromSchema","schema","fromJSON","json","ArrayBuffer","Error","view","Uint8Array","coordinateLength","byteLength","slice","asn1js","RawData","data","buffer","crvName","crv","coodinateLength","toUpperCase","convertBuffer","convertBufferView","set","memberName","memberValue"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, utilConcatBuf, isEqualBuffer, toBase64, fromBase64, arrayBufferToString, stringToArrayBuffer } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5480\r\n */\r\nexport default class ECPublicKey\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for ECCPublicKey class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc type\r\n\t\t */\r\n\t\tthis.x = getParametersValue(parameters, \"x\", ECPublicKey.defaultValues(\"x\"));\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc values\r\n\t\t */\r\n\t\tthis.y = getParametersValue(parameters, \"y\", ECPublicKey.defaultValues(\"y\"));\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc namedCurve\r\n\t\t */\r\n\t\tthis.namedCurve = getParametersValue(parameters, \"namedCurve\", ECPublicKey.defaultValues(\"namedCurve\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"x\":\r\n\t\t\tcase \"y\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"namedCurve\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ECCPublicKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"x\":\r\n\t\t\tcase \"y\":\r\n\t\t\t\treturn (isEqualBuffer(memberValue, ECPublicKey.defaultValues(memberName)));\r\n\t\t\tcase \"namedCurve\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ECCPublicKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\treturn new asn1js.RawData();\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert ArrayBuffer into current class\r\n\t * @param {!ArrayBuffer} schema Special case: schema is an ArrayBuffer\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tif((schema instanceof ArrayBuffer) === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ECPublicKey\");\r\n\r\n\t\tconst view = new Uint8Array(schema);\r\n\t\tif(view[0] !== 0x04)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ECPublicKey\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tlet coordinateLength;\r\n\r\n\t\tswitch(this.namedCurve)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.3.1.7\": // P-256\r\n\t\t\t\tcoordinateLength = 32;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.3.132.0.34\": // P-384\r\n\t\t\t\tcoordinateLength = 48;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.3.132.0.35\": // P-521\r\n\t\t\t\tcoordinateLength = 66;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Incorrect curve OID: ${this.namedCurve}`);\r\n\t\t}\r\n\r\n\t\tif(schema.byteLength !== (coordinateLength * 2 + 1))\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ECPublicKey\");\r\n\t\t\r\n\t\tthis.x = schema.slice(1, coordinateLength + 1);\r\n\t\tthis.y = schema.slice(1 + coordinateLength, coordinateLength * 2 + 1);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\treturn new asn1js.RawData({ data: utilConcatBuf(\r\n\t\t\t(new Uint8Array([0x04])).buffer,\r\n\t\t\tthis.x,\r\n\t\t\tthis.y\r\n\t\t)\r\n\t\t});\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet crvName = \"\";\r\n\r\n\t\tswitch(this.namedCurve)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.3.1.7\": // P-256\r\n\t\t\t\tcrvName = \"P-256\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.3.132.0.34\": // P-384\r\n\t\t\t\tcrvName = \"P-384\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.3.132.0.35\": // P-521\r\n\t\t\t\tcrvName = \"P-521\";\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tcrv: crvName,\r\n\t\t\tx: toBase64(arrayBufferToString(this.x), true, true, false),\r\n\t\t\ty: toBase64(arrayBufferToString(this.y), true, true, false)\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tlet coodinateLength = 0;\r\n\r\n\t\tif(\"crv\" in json)\r\n\t\t{\r\n\t\t\tswitch(json.crv.toUpperCase())\r\n\t\t\t{\r\n\t\t\t\tcase \"P-256\":\r\n\t\t\t\t\tthis.namedCurve = \"1.2.840.10045.3.1.7\";\r\n\t\t\t\t\tcoodinateLength = 32;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"P-384\":\r\n\t\t\t\t\tthis.namedCurve = \"1.3.132.0.34\";\r\n\t\t\t\t\tcoodinateLength = 48;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"P-521\":\r\n\t\t\t\t\tthis.namedCurve = \"1.3.132.0.35\";\r\n\t\t\t\t\tcoodinateLength = 66;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"crv\\\"\");\r\n\r\n\t\tif(\"x\" in json)\r\n\t\t{\r\n\t\t\tconst convertBuffer = stringToArrayBuffer(fromBase64(json.x, true));\r\n\t\t\t\r\n\t\t\tif(convertBuffer.byteLength < coodinateLength)\r\n\t\t\t{\r\n\t\t\t\tthis.x = new ArrayBuffer(coodinateLength);\r\n\t\t\t\tconst view = new Uint8Array(this.x);\r\n\t\t\t\tconst convertBufferView = new Uint8Array(convertBuffer);\r\n\t\t\t\tview.set(convertBufferView, 1);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tthis.x = convertBuffer.slice(0, coodinateLength);\r\n\t\t}\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"x\\\"\");\r\n\r\n\t\tif(\"y\" in json)\r\n\t\t{\r\n\t\t\tconst convertBuffer = stringToArrayBuffer(fromBase64(json.y, true));\r\n\t\t\t\r\n\t\t\tif(convertBuffer.byteLength < coodinateLength)\r\n\t\t\t{\r\n\t\t\t\tthis.y = new ArrayBuffer(coodinateLength);\r\n\t\t\t\tconst view = new Uint8Array(this.y);\r\n\t\t\t\tconst convertBufferView = new Uint8Array(convertBuffer);\r\n\t\t\t\tview.set(convertBufferView, 1);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tthis.y = convertBuffer.slice(0, coodinateLength);\r\n\t\t}\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"y\\\"\");\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"ECPublicKey.js"}