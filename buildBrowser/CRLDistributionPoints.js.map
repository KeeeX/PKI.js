{"version":3,"sources":["../src/CRLDistributionPoints.js"],"names":["CRLDistributionPoints","parameters","distributionPoints","defaultValues","fromSchema","schema","asn1","asn1js","compareSchema","names","verified","Error","Array","from","result","element","DistributionPoint","Sequence","value","toSchema","toJSON","memberName","name","blockName","Repeated"],"mappings":"6FAAA,sDACA,gCACA,iF,umCACA;AACA;;MAGqBA,CAAAA,qB,yBAEpB;AACA;;;;IAKA,gCACA,IADYC,CAAAA,UACZ,2DADyB,EACzB,6CACC;AACA;;;KAIA,KAAKC,kBAAL,CAA0B,gCAAmBD,UAAnB,CAA+B,oBAA/B,CAAqDD,qBAAqB,CAACG,aAAtB,CAAoC,oBAApC,CAArD,CAA1B,CACA;AAEA;AACA,GAAG,UAAYF,CAAAA,UAAf,CACC,KAAKG,UAAL,CAAgBH,UAAU,CAACI,MAA3B,EACD;AACA,CACD;AACA;;;0DA6CA;AACA;;;8BAIWA,M,CACX,CACC;AACA,wBAAWA,MAAX,CAAmB,CAClB,oBADkB,CAAnB,EAGA;AAEA;AACA,GAAMC,CAAAA,IAAI,CAAGC,MAAM,CAACC,aAAP,CAAqBH,MAArB,CACZA,MADY,CAEZL,qBAAqB,CAACK,MAAtB,CAA6B,CAC5BI,KAAK,CAAE,CACNP,kBAAkB,CAAE,oBADd,CADqB,CAA7B,CAFY,CAAb,CASA,GAAGI,IAAI,CAACI,QAAL,GAAkB,KAArB,CACC,KAAM,IAAIC,CAAAA,KAAJ,CAAU,+EAAV,CAAN,CACD;AAEA;AACA,KAAKT,kBAAL,CAA0BU,KAAK,CAACC,IAAN,CAAWP,IAAI,CAACQ,MAAL,CAAYZ,kBAAvB,CAA2C,SAAAa,OAAO,QAAI,IAAIC,2BAAJ,CAAsB,CAAEX,MAAM,CAAEU,OAAV,CAAtB,CAAJ,EAAlD,CAA1B,CACA;AACA,CACD;AACA;;;+CAKA,CACC;AACA,MAAQ,IAAIR,CAAAA,MAAM,CAACU,QAAX,CAAoB,CAC3BC,KAAK,CAAEN,KAAK,CAACC,IAAN,CAAW,KAAKX,kBAAhB,CAAoC,SAAAa,OAAO,QAAIA,CAAAA,OAAO,CAACI,QAAR,EAAJ,EAA3C,CADoB,CAApB,CAAR,CAGA;AACA,CACD;AACA;;;2CAKA,CACC,MAAO,CACNjB,kBAAkB,CAAEU,KAAK,CAACC,IAAN,CAAW,KAAKX,kBAAhB,CAAoC,SAAAa,OAAO,QAAIA,CAAAA,OAAO,CAACK,MAAR,EAAJ,EAA3C,CADd,CAAP,CAGA,CACD;sDAhGqBC,U,CACrB,CACC,OAAOA,UAAP,EAEC,IAAK,oBAAL,CACC,MAAO,EAAP,CACD,QACC,KAAM,IAAIV,CAAAA,KAAJ,gEAAkEU,UAAlE,EAAN,CALF,CAOA,CACD;AACA;;;;;;;;;;2CAYA,IADcpB,CAAAA,UACd,2DAD2B,EAC3B,CACC;;;;KAKA,GAAMQ,CAAAA,KAAK,CAAG,gCAAmBR,UAAnB,CAA+B,OAA/B,CAAwC,EAAxC,CAAd,CAEA,MAAQ,IAAIM,CAAAA,MAAM,CAACU,QAAX,CAAoB,CAC3BK,IAAI,CAAGb,KAAK,CAACc,SAAN,EAAmB,EADC,CAE3BL,KAAK,CAAE,CACN,GAAIX,CAAAA,MAAM,CAACiB,QAAX,CAAoB,CACnBF,IAAI,CAAGb,KAAK,CAACP,kBAAN,EAA4B,EADhB,CAEnBgB,KAAK,CAAEF,2BAAkBX,MAAlB,EAFY,CAApB,CADM,CAFoB,CAApB,CAAR,CASA,C,qCA0DF","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport DistributionPoint from \"./DistributionPoint.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class CRLDistributionPoints\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CRLDistributionPoints class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<DistributionPoint>}\r\n\t\t * @desc distributionPoints\r\n\t\t */\r\n\t\tthis.distributionPoints = getParametersValue(parameters, \"distributionPoints\", CRLDistributionPoints.defaultValues(\"distributionPoints\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"distributionPoints\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CRLDistributionPoints class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * CRLDistributionPoints ::= SEQUENCE SIZE (1..MAX) OF DistributionPoint\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [distributionPoints]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.distributionPoints || \"\"),\r\n\t\t\t\t\tvalue: DistributionPoint.schema()\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"distributionPoints\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCRLDistributionPoints.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tdistributionPoints: \"distributionPoints\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CRLDistributionPoints\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.distributionPoints = Array.from(asn1.result.distributionPoints, element => new DistributionPoint({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.distributionPoints, element => element.toSchema())\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tdistributionPoints: Array.from(this.distributionPoints, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"CRLDistributionPoints.js"}