{"version":3,"sources":["../src/CryptoEngine.js"],"names":["makePKCS12B2Key","cryptoEngine","hashAlgorithm","keyLength","password","salt","iterationCount","u","v","result","toUpperCase","Error","passwordViewInitial","Uint8Array","passwordTransformed","ArrayBuffer","byteLength","passwordTransformedView","i","length","slice","D","dView","saltLength","sLen","Math","ceil","S","sView","saltView","passwordLength","pLen","P","pView","passwordView","sPlusPLength","I","iView","set","c","internalSequence","Promise","resolve","then","_I","dAndI","dAndIView","j","roundBuffer","digest","name","B","bView","k","iRound","sliceStart","sliceLength","chunk","Array","from","x","l","push","resultBuffer","resultView","CryptoEngine","parameters","crypto","subtle","format","keyData","algorithm","extractable","keyUsages","jwk","buffer","toLowerCase","importKey","asn1","asn1js","fromBER","offset","reject","publicKeyInfo","PublicKeyInfo","fromSchema","ex","hash","alg","kty","ext","key_ops","algorithmId","publicKeyJSON","toJSON","Object","keys","key","privateKeyInfo","PrivateKeyInfo","privateKeyAlgorithm","privateKeyJSON","JSON","stringify","sequence","exportKey","parse","fromJSON","toSchema","toBER","inputFormat","outputFormat","encrypt","decrypt","sign","verify","generateKey","deriveKey","deriveBits","wrapKey","unwrapKey","view","getRandomValues","oid","kdf","algorithmName","operation","usages","modulusLength","publicExponent","namedCurve","public","counter","iv","info","iterations","signatureAlgorithm","params","RSASSAPSSParams","schema","algorithmParams","getAlgorithmByOID","contentEncryptionOID","getOIDByAlgorithm","contentEncryptionAlgorithm","pbkdf2OID","hmacOID","hmacHashAlgorithm","ivBuffer","ivView","saltBuffer","contentView","contentToEncrypt","pbkdf2Params","PBKDF2Params","OctetString","valueHex","prf","AlgorithmIdentifier","Null","error","pbes2Parameters","PBES2Params","keyDerivationFunc","encryptionScheme","EncryptedContentInfo","contentType","encryptedContent","encryptedContentInfo","valueBlock","dataBuffer","idBlock","isConstructed","value","content","hmacAlgorithm","contentToStamp","signatureToVerify","contentToVerify","privateKey","getAlgorithmParameters","paramsObject","hashAlgorithmOID","maskGenAlgorithm","pssParameters","data","shaAlgorithm","getHashAlgorithm","algorithmObject","algorithmParamsChecked","tagClass","tagNumber","curveObject","toString","fillPublicKeyParameters","publicKeyInfoSchema","publicKeyInfoBuffer","publicKeyInfoView","signature","getPublicKey","publicKey","signatureValue","hashAlgo"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, stringToArrayBuffer, arrayBufferToString, utilConcatBuf } from \"pvutils\";\r\nimport { createCMSECDSASignature, createECDSASignatureFromCMS } from \"./common.js\";\r\nimport PublicKeyInfo from \"./PublicKeyInfo.js\";\r\nimport PrivateKeyInfo from \"./PrivateKeyInfo.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport EncryptedContentInfo from \"./EncryptedContentInfo.js\";\r\nimport RSASSAPSSParams from \"./RSASSAPSSParams.js\";\r\nimport PBKDF2Params from \"./PBKDF2Params.js\";\r\nimport PBES2Params from \"./PBES2Params.js\";\r\n//**************************************************************************************\r\n/**\r\n * Making MAC key using algorithm described in B.2 of PKCS#12 standard.\r\n */\r\nfunction makePKCS12B2Key(cryptoEngine, hashAlgorithm, keyLength, password, salt, iterationCount)\r\n{\r\n\t//region Initial variables\r\n\tlet u;\r\n\tlet v;\r\n\t\r\n\tconst result = [];\r\n\t//endregion\r\n\t\r\n\t//region Get \"u\" and \"v\" values\r\n\tswitch(hashAlgorithm.toUpperCase())\r\n\t{\r\n\t\tcase \"SHA-1\":\r\n\t\t\tu = 20; // 160\r\n\t\t\tv = 64; // 512\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-256\":\r\n\t\t\tu = 32; // 256\r\n\t\t\tv = 64; // 512\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-384\":\r\n\t\t\tu = 48; // 384\r\n\t\t\tv = 128; // 1024\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-512\":\r\n\t\t\tu = 64; // 512\r\n\t\t\tv = 128; // 1024\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tthrow new Error(\"Unsupported hashing algorithm\");\r\n\t}\r\n\t//endregion\r\n\t\r\n\t//region Main algorithm making key\r\n\t//region Transform password to UTF-8 like string\r\n\tconst passwordViewInitial = new Uint8Array(password);\r\n\t\r\n\tconst passwordTransformed = new ArrayBuffer((password.byteLength * 2) + 2);\r\n\tconst passwordTransformedView = new Uint8Array(passwordTransformed);\r\n\t\r\n\tfor(let i = 0; i < passwordViewInitial.length; i++)\r\n\t{\r\n\t\tpasswordTransformedView[i * 2] = 0x00;\r\n\t\tpasswordTransformedView[i * 2 + 1] = passwordViewInitial[i];\r\n\t}\r\n\t\r\n\tpasswordTransformedView[passwordTransformedView.length - 2] = 0x00;\r\n\tpasswordTransformedView[passwordTransformedView.length - 1] = 0x00;\r\n\t\r\n\tpassword = passwordTransformed.slice(0);\r\n\t//endregion\r\n\t\r\n\t//region Construct a string D (the \"diversifier\") by concatenating v/8 copies of ID\r\n\tconst D = new ArrayBuffer(v);\r\n\tconst dView = new Uint8Array(D);\r\n\t\r\n\tfor(let i = 0; i < D.byteLength; i++)\r\n\t\tdView[i] = 3; // The ID value equal to \"3\" for MACing (see B.3 of standard)\r\n\t//endregion\r\n\t\r\n\t//region Concatenate copies of the salt together to create a string S of length v * ceil(s / v) bytes (the final copy of the salt may be trunacted to create S)\r\n\tconst saltLength = salt.byteLength;\r\n\t\r\n\tconst sLen = v * Math.ceil(saltLength / v);\r\n\tconst S = new ArrayBuffer(sLen);\r\n\tconst sView = new Uint8Array(S);\r\n\t\r\n\tconst saltView = new Uint8Array(salt);\r\n\t\r\n\tfor(let i = 0; i < sLen; i++)\r\n\t\tsView[i] = saltView[i % saltLength];\r\n\t//endregion\r\n\t\r\n\t//region Concatenate copies of the password together to create a string P of length v * ceil(p / v) bytes (the final copy of the password may be truncated to create P)\r\n\tconst passwordLength = password.byteLength;\r\n\t\r\n\tconst pLen = v * Math.ceil(passwordLength / v);\r\n\tconst P = new ArrayBuffer(pLen);\r\n\tconst pView = new Uint8Array(P);\r\n\t\r\n\tconst passwordView = new Uint8Array(password);\r\n\t\r\n\tfor(let i = 0; i < pLen; i++)\r\n\t\tpView[i] = passwordView[i % passwordLength];\r\n\t//endregion\r\n\t\r\n\t//region Set I=S||P to be the concatenation of S and P\r\n\tconst sPlusPLength = S.byteLength + P.byteLength;\r\n\t\r\n\tlet I = new ArrayBuffer(sPlusPLength);\r\n\tlet iView = new Uint8Array(I);\r\n\t\r\n\tiView.set(sView);\r\n\tiView.set(pView, sView.length);\r\n\t//endregion\r\n\t\r\n\t//region Set c=ceil(n / u)\r\n\tconst c = Math.ceil((keyLength >> 3) / u);\r\n\t//endregion\r\n\t\r\n\t//region Initial variables\r\n\tlet internalSequence = Promise.resolve(I);\r\n\t//endregion\r\n\t\r\n\t//region For i=1, 2, ..., c, do the following:\r\n\tfor(let i = 0; i <= c; i++)\r\n\t{\r\n\t\tinternalSequence = internalSequence.then(_I =>\r\n\t\t{\r\n\t\t\t//region Create contecanetion of D and I\r\n\t\t\tconst dAndI = new ArrayBuffer(D.byteLength + _I.byteLength);\r\n\t\t\tconst dAndIView = new Uint8Array(dAndI);\r\n\t\t\t\r\n\t\t\tdAndIView.set(dView);\r\n\t\t\tdAndIView.set(iView, dView.length);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn dAndI;\r\n\t\t});\r\n\t\t\r\n\t\t//region Make \"iterationCount\" rounds of hashing\r\n\t\tfor(let j = 0; j < iterationCount; j++)\r\n\t\t\tinternalSequence = internalSequence.then(roundBuffer => cryptoEngine.digest({ name: hashAlgorithm }, new Uint8Array(roundBuffer)));\r\n\t\t//endregion\r\n\t\t\r\n\t\tinternalSequence = internalSequence.then(roundBuffer =>\r\n\t\t{\r\n\t\t\t//region Concatenate copies of Ai to create a string B of length v bits (the final copy of Ai may be truncated to create B)\r\n\t\t\tconst B = new ArrayBuffer(v);\r\n\t\t\tconst bView = new Uint8Array(B);\r\n\t\t\t\r\n\t\t\tfor(let j = 0; j < B.byteLength; j++)\r\n\t\t\t\tbView[j] = roundBuffer[j % roundBuffer.length];\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Make new I value\r\n\t\t\tconst k = Math.ceil(saltLength / v) + Math.ceil(passwordLength / v);\r\n\t\t\tconst iRound = [];\r\n\t\t\t\r\n\t\t\tlet sliceStart = 0;\r\n\t\t\tlet sliceLength = v;\r\n\t\t\t\r\n\t\t\tfor(let j = 0; j < k; j++)\r\n\t\t\t{\r\n\t\t\t\tconst chunk = Array.from(new Uint8Array(I.slice(sliceStart, sliceStart + sliceLength)));\r\n\t\t\t\tsliceStart += v;\r\n\t\t\t\tif((sliceStart + v) > I.byteLength)\r\n\t\t\t\t\tsliceLength = I.byteLength - sliceStart;\r\n\t\t\t\t\r\n\t\t\t\tlet x = 0x1ff;\r\n\t\t\t\t\r\n\t\t\t\tfor(let l = (B.byteLength - 1); l >= 0; l--)\r\n\t\t\t\t{\r\n\t\t\t\t\tx >>= 8;\r\n\t\t\t\t\tx += bView[l] + chunk[l];\r\n\t\t\t\t\tchunk[l] = (x & 0xff);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tiRound.push(...chunk);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tI = new ArrayBuffer(iRound.length);\r\n\t\t\tiView = new Uint8Array(I);\r\n\t\t\t\r\n\t\t\tiView.set(iRound);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tresult.push(...(new Uint8Array(roundBuffer)));\r\n\t\t\t\r\n\t\t\treturn I;\r\n\t\t});\r\n\t}\r\n\t//endregion\r\n\t\r\n\t//region Initialize final key\r\n\tinternalSequence = internalSequence.then(() =>\r\n\t{\r\n\t\tconst resultBuffer = new ArrayBuffer(keyLength >> 3);\r\n\t\tconst resultView = new Uint8Array(resultBuffer);\r\n\t\t\r\n\t\tresultView.set((new Uint8Array(result)).slice(0, keyLength >> 3));\r\n\t\t\r\n\t\treturn resultBuffer;\r\n\t});\r\n\t//endregion\r\n\t//endregion\r\n\t\r\n\treturn internalSequence;\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Default cryptographic engine for Web Cryptography API\r\n */\r\nexport default class CryptoEngine\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CryptoEngine class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @desc Usually here we are expecting \"window.crypto\" or an equivalent from custom \"crypto engine\"\r\n\t\t */\r\n\t\tthis.crypto = getParametersValue(parameters, \"crypto\", {});\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @desc Usually here we are expecting \"window.crypto.subtle\" or an equivalent from custom \"crypto engine\"\r\n\t\t */\r\n\t\tthis.subtle = getParametersValue(parameters, \"subtle\", {});\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc Name of the \"crypto engine\"\r\n\t\t */\r\n\t\tthis.name = getParametersValue(parameters, \"name\", \"\");\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Import WebCrypto keys from different formats\r\n\t * @param {string} format\r\n\t * @param {ArrayBuffer|Uint8Array} keyData\r\n\t * @param {Object} algorithm\r\n\t * @param {boolean} extractable\r\n\t * @param {Array} keyUsages\r\n\t * @returns {Promise}\r\n\t */\r\n\timportKey(format, keyData, algorithm, extractable, keyUsages)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet jwk = {};\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Change \"keyData\" type if needed\r\n\t\tif(keyData instanceof Uint8Array)\r\n\t\t\tkeyData = keyData.buffer;\r\n\t\t//endregion\r\n\t\t\r\n\t\tswitch(format.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"raw\":\r\n\t\t\t\treturn this.subtle.importKey(\"raw\", keyData, algorithm, extractable, keyUsages);\r\n\t\t\tcase \"spki\":\r\n\t\t\t\t{\r\n\t\t\t\t\tconst asn1 = asn1js.fromBER(keyData);\r\n\t\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\r\n\t\t\t\t\tconst publicKeyInfo = new PublicKeyInfo();\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpublicKeyInfo.fromSchema(asn1.result);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\t// noinspection FallThroughInSwitchStatementJS\r\n\t\t\t\t\tswitch(algorithm.name.toUpperCase())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS1\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS256\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS384\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS512\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// break omitted\r\n\t\t\t\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeyUsages = [\"verify\"]; // Override existing keyUsages value since the key is a public key\r\n\r\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\r\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\r\n\r\n\t\t\t\t\t\t\t\tif(publicKeyInfo.algorithm.algorithmId !== \"1.2.840.113549.1.1.1\")\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif((\"alg\" in jwk) === false)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS1\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS256\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS384\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS512\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Create RSA Public Key elements\r\n\t\t\t\t\t\t\t\tconst publicKeyJSON = publicKeyInfo.toJSON();\r\n\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(publicKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = publicKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"ECDSA\":\r\n\t\t\t\t\t\t\tkeyUsages = [\"verify\"]; // Override existing keyUsages value since the key is a public key\r\n\t\t\t\t\t\t\t// break omitted\r\n\t\t\t\t\t\tcase \"ECDH\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\t\t\tjwk = {\r\n\t\t\t\t\t\t\t\t\tkty: \"EC\",\r\n\t\t\t\t\t\t\t\t\text: extractable,\r\n\t\t\t\t\t\t\t\t\tkey_ops: keyUsages\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about algorithm\r\n\t\t\t\t\t\t\t\tif(publicKeyInfo.algorithm.algorithmId !== \"1.2.840.10045.2.1\")\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Create ECDSA Public Key elements\r\n\t\t\t\t\t\t\t\tconst publicKeyJSON = publicKeyInfo.toJSON();\r\n\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(publicKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = publicKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"RSA-OAEP\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\r\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif(this.name.toLowerCase() === \"safari\")\r\n\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP\";\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-256\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-384\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-512\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t//region Create ECDSA Public Key elements\r\n\t\t\t\t\t\t\t\tconst publicKeyJSON = publicKeyInfo.toJSON();\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(publicKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = publicKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\treturn Promise.reject(`Incorrect algorithm name: ${algorithm.name.toUpperCase()}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pkcs8\":\r\n\t\t\t\t{\r\n\t\t\t\t\tconst privateKeyInfo = new PrivateKeyInfo();\r\n\r\n\t\t\t\t\t//region Parse \"PrivateKeyInfo\" object\r\n\t\t\t\t\tconst asn1 = asn1js.fromBER(keyData);\r\n\t\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprivateKeyInfo.fromSchema(asn1.result);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((\"parsedKey\" in privateKeyInfo) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t// noinspection FallThroughInSwitchStatementJS\r\n\t\t\t\t\t// noinspection FallThroughInSwitchStatementJS\r\n\t\t\t\t\tswitch(algorithm.name.toUpperCase())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS1\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS256\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS384\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS512\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// break omitted\r\n\t\t\t\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeyUsages = [\"sign\"]; // Override existing keyUsages value since the key is a private key\r\n\r\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\r\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif(privateKeyInfo.privateKeyAlgorithm.algorithmId !== \"1.2.840.113549.1.1.1\")\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect private key algorithm: ${privateKeyInfo.privateKeyAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif((\"alg\" in jwk) === false)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS1\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS256\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS384\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS512\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Create RSA Private Key elements\r\n\t\t\t\t\t\t\t\tconst privateKeyJSON = privateKeyInfo.toJSON();\r\n\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(privateKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = privateKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"ECDSA\":\r\n\t\t\t\t\t\t\tkeyUsages = [\"sign\"]; // Override existing keyUsages value since the key is a private key\r\n\t\t\t\t\t\t\t// break omitted\r\n\t\t\t\t\t\tcase \"ECDH\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\t\t\tjwk = {\r\n\t\t\t\t\t\t\t\t\tkty: \"EC\",\r\n\t\t\t\t\t\t\t\t\text: extractable,\r\n\t\t\t\t\t\t\t\t\tkey_ops: keyUsages\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif(privateKeyInfo.privateKeyAlgorithm.algorithmId !== \"1.2.840.10045.2.1\")\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect algorithm: ${privateKeyInfo.privateKeyAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Create ECDSA Private Key elements\r\n\t\t\t\t\t\t\t\tconst privateKeyJSON = privateKeyInfo.toJSON();\r\n\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(privateKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = privateKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"RSA-OAEP\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\r\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif(this.name.toLowerCase() === \"safari\")\r\n\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP\";\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-256\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-384\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-512\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t//region Create RSA Private Key elements\r\n\t\t\t\t\t\t\t\tconst privateKeyJSON = privateKeyInfo.toJSON();\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(privateKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = privateKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\treturn Promise.reject(`Incorrect algorithm name: ${algorithm.name.toUpperCase()}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"jwk\":\r\n\t\t\t\tjwk = keyData;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect format: ${format}`);\r\n\t\t}\r\n\t\t\r\n\t\t//region Special case for Safari browser (since its acting not as WebCrypto standard describes)\r\n\t\tif(this.name.toLowerCase() === \"safari\")\r\n\t\t{\r\n\t\t\t// Try to use both ways - import using ArrayBuffer and pure JWK (for Safari Technology Preview)\r\n\t\t\treturn Promise.resolve().then(() => this.subtle.importKey(\"jwk\", stringToArrayBuffer(JSON.stringify(jwk)), algorithm, extractable, keyUsages))\r\n\t\t\t\t.then(result => result, () => this.subtle.importKey(\"jwk\", jwk, algorithm, extractable, keyUsages));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn this.subtle.importKey(\"jwk\", jwk, algorithm, extractable, keyUsages);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Export WebCrypto keys to different formats\r\n\t * @param {string} format\r\n\t * @param {Object} key\r\n\t * @returns {Promise}\r\n\t */\r\n\texportKey(format, key)\r\n\t{\r\n\t\tlet sequence = this.subtle.exportKey(\"jwk\", key);\r\n\t\t\r\n\t\t//region Currently Safari returns ArrayBuffer as JWK thus we need an additional transformation\r\n\t\tif(this.name.toLowerCase() === \"safari\")\r\n\t\t{\r\n\t\t\tsequence = sequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t// Some additional checks for Safari Technology Preview\r\n\t\t\t\tif(result instanceof ArrayBuffer)\r\n\t\t\t\t\treturn JSON.parse(arrayBufferToString(result));\r\n\t\t\t\t\r\n\t\t\t\treturn result;\r\n\t\t\t});\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\tswitch(format.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"raw\":\r\n\t\t\t\treturn this.subtle.exportKey(\"raw\", key);\r\n\t\t\tcase \"spki\":\r\n\t\t\t\tsequence = sequence.then(result =>\r\n\t\t\t\t{\r\n\t\t\t\t\tconst publicKeyInfo = new PublicKeyInfo();\r\n\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpublicKeyInfo.fromJSON(result);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect key data\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn publicKeyInfo.toSchema().toBER(false);\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pkcs8\":\r\n\t\t\t\tsequence = sequence.then(result =>\r\n\t\t\t\t{\r\n\t\t\t\t\tconst privateKeyInfo = new PrivateKeyInfo();\r\n\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprivateKeyInfo.fromJSON(result);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect key data\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn privateKeyInfo.toSchema().toBER(false);\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"jwk\":\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect format: ${format}`);\r\n\t\t}\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert WebCrypto keys between different export formats\r\n\t * @param {string} inputFormat\r\n\t * @param {string} outputFormat\r\n\t * @param {ArrayBuffer|Object} keyData\r\n\t * @param {Object} algorithm\r\n\t * @param {boolean} extractable\r\n\t * @param {Array} keyUsages\r\n\t * @returns {Promise}\r\n\t */\r\n\tconvert(inputFormat, outputFormat, keyData, algorithm, extractable, keyUsages)\r\n\t{\r\n\t\tswitch(inputFormat.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"raw\":\r\n\t\t\t\tswitch(outputFormat.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"raw\":\r\n\t\t\t\t\t\treturn Promise.resolve(keyData);\r\n\t\t\t\t\tcase \"spki\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"raw\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"spki\", result));\r\n\t\t\t\t\tcase \"pkcs8\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"raw\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"pkcs8\", result));\r\n\t\t\t\t\tcase \"jwk\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"raw\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"jwk\", result));\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\r\n\t\t\t\t}\r\n\t\t\tcase \"spki\":\r\n\t\t\t\tswitch(outputFormat.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"raw\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"spki\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"raw\", result));\r\n\t\t\t\t\tcase \"spki\":\r\n\t\t\t\t\t\treturn Promise.resolve(keyData);\r\n\t\t\t\t\tcase \"pkcs8\":\r\n\t\t\t\t\t\treturn Promise.reject(\"Impossible to convert between SPKI/PKCS8\");\r\n\t\t\t\t\tcase \"jwk\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"spki\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"jwk\", result));\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\r\n\t\t\t\t}\r\n\t\t\tcase \"pkcs8\":\r\n\t\t\t\tswitch(outputFormat.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"raw\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"pkcs8\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"raw\", result));\r\n\t\t\t\t\tcase \"spki\":\r\n\t\t\t\t\t\treturn Promise.reject(\"Impossible to convert between SPKI/PKCS8\");\r\n\t\t\t\t\tcase \"pkcs8\":\r\n\t\t\t\t\t\treturn Promise.resolve(keyData);\r\n\t\t\t\t\tcase \"jwk\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"pkcs8\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"jwk\", result));\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\r\n\t\t\t\t}\r\n\t\t\tcase \"jwk\":\r\n\t\t\t\tswitch(outputFormat.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"raw\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"jwk\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"raw\", result));\r\n\t\t\t\t\tcase \"spki\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"jwk\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"spki\", result));\r\n\t\t\t\t\tcase \"pkcs8\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"jwk\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"pkcs8\", result));\r\n\t\t\t\t\tcase \"jwk\":\r\n\t\t\t\t\t\treturn Promise.resolve(keyData);\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\r\n\t\t\t\t}\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect inputFormat: ${inputFormat}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"encrypt\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tencrypt(...args)\r\n\t{\r\n\t\treturn this.subtle.encrypt(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"decrypt\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tdecrypt(...args)\r\n\t{\r\n\t\treturn this.subtle.decrypt(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"sign\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tsign(...args)\r\n\t{\r\n\t\treturn this.subtle.sign(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"verify\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tverify(...args)\r\n\t{\r\n\t\treturn this.subtle.verify(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"digest\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tdigest(...args)\r\n\t{\r\n\t\treturn this.subtle.digest(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"generateKey\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tgenerateKey(...args)\r\n\t{\r\n\t\treturn this.subtle.generateKey(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"deriveKey\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tderiveKey(...args)\r\n\t{\r\n\t\treturn this.subtle.deriveKey(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"deriveBits\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tderiveBits(...args)\r\n\t{\r\n\t\treturn this.subtle.deriveBits(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"wrapKey\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\twrapKey(...args)\r\n\t{\r\n\t\treturn this.subtle.wrapKey(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"unwrapKey\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tunwrapKey(...args)\r\n\t{\r\n\t\treturn this.subtle.unwrapKey(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Initialize input Uint8Array by random values (with help from current \"crypto engine\")\r\n\t * @param {!Uint8Array} view\r\n\t * @returns {*}\r\n\t */\r\n\tgetRandomValues(view)\r\n\t{\r\n\t\tif((\"getRandomValues\" in this.crypto) === false)\r\n\t\t\tthrow new Error(\"No support for getRandomValues\");\r\n\t\t\r\n\t\treturn this.crypto.getRandomValues(view);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get WebCrypto algorithm by wel-known OID\r\n\t * @param {string} oid well-known OID to search for\r\n\t * @returns {Object}\r\n\t */\r\n\tgetAlgorithmByOID(oid)\r\n\t{\r\n\t\tswitch(oid)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.113549.1.1.1\":\r\n\t\t\tcase \"1.2.840.113549.1.1.5\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.11\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.12\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-384\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.13\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-512\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.10\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSA-PSS\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.7\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSA-OAEP\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.10045.2.1\":\r\n\t\t\tcase \"1.2.840.10045.4.1\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.10045.4.3.2\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.10045.4.3.3\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-384\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.10045.4.3.4\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-512\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.133.16.840.63.0.2\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tkdf: \"SHA-1\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.132.1.11.1\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tkdf: \"SHA-256\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.132.1.11.2\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tkdf: \"SHA-384\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.132.1.11.3\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tkdf: \"SHA-512\"\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.2\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\t\tlength: 128\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.22\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\t\tlength: 192\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.42\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\t\tlength: 256\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.6\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\t\tlength: 128\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.26\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\t\tlength: 192\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.46\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\t\tlength: 256\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.4\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CFB\",\r\n\t\t\t\t\tlength: 128\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.24\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CFB\",\r\n\t\t\t\t\tlength: 192\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.44\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CFB\",\r\n\t\t\t\t\tlength: 256\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.5\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\t\tlength: 128\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.25\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\t\tlength: 192\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.45\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\t\tlength: 256\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.2.7\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.2.9\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.2.10\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-384\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.2.11\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-512\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.9.16.3.5\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"DH\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.14.3.2.26\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.2.1\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.2.2\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"SHA-384\"\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.2.3\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"SHA-512\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.5.12\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"PBKDF2\"\r\n\t\t\t\t};\r\n\t\t\t//region Special case - OIDs for ECC curves\r\n\t\t\tcase \"1.2.840.10045.3.1.7\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"P-256\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.132.0.34\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"P-384\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.132.0.35\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"P-521\"\r\n\t\t\t\t};\r\n\t\t\t//endregion\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t\r\n\t\treturn {};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get OID for each specific algorithm\r\n\t * @param {Object} algorithm\r\n\t * @returns {string}\r\n\t */\r\n\tgetOIDByAlgorithm(algorithm)\r\n\t{\r\n\t\tlet result = \"\";\r\n\t\t\r\n\t\tswitch(algorithm.name.toUpperCase())\r\n\t\t{\r\n\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.1.1.5\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.1.1.11\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.1.1.12\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.1.1.13\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\tresult = \"1.2.840.113549.1.1.10\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-OAEP\":\r\n\t\t\t\tresult = \"1.2.840.113549.1.1.7\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ECDSA\":\r\n\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\tresult = \"1.2.840.10045.4.1\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\tresult = \"1.2.840.10045.4.3.2\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\tresult = \"1.2.840.10045.4.3.3\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\tresult = \"1.2.840.10045.4.3.4\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ECDH\":\r\n\t\t\t\tswitch(algorithm.kdf.toUpperCase()) // Non-standard addition - hash algorithm of KDF function\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\tresult = \"1.3.133.16.840.63.0.2\"; // dhSinglePass-stdDH-sha1kdf-scheme\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\tresult = \"1.3.132.1.11.1\"; // dhSinglePass-stdDH-sha256kdf-scheme\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\tresult = \"1.3.132.1.11.2\"; // dhSinglePass-stdDH-sha384kdf-scheme\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\tresult = \"1.3.132.1.11.3\"; // dhSinglePass-stdDH-sha512kdf-scheme\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CTR\":\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CBC\":\r\n\t\t\t\tswitch(algorithm.length)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 128:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.2\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 192:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.22\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 256:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.42\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CMAC\":\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-GCM\":\r\n\t\t\t\tswitch(algorithm.length)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 128:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.6\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 192:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.26\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 256:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.46\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CFB\":\r\n\t\t\t\tswitch(algorithm.length)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 128:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.4\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 192:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.24\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 256:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.44\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-KW\":\r\n\t\t\t\tswitch(algorithm.length)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 128:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.5\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 192:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.25\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 256:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.45\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"HMAC\":\r\n\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.2.7\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.2.9\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.2.10\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.2.11\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"DH\":\r\n\t\t\t\tresult = \"1.2.840.113549.1.9.16.3.5\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"SHA-1\":\r\n\t\t\t\tresult = \"1.3.14.3.2.26\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"SHA-256\":\r\n\t\t\t\tresult = \"2.16.840.1.101.3.4.2.1\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"SHA-384\":\r\n\t\t\t\tresult = \"2.16.840.1.101.3.4.2.2\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"SHA-512\":\r\n\t\t\t\tresult = \"2.16.840.1.101.3.4.2.3\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"CONCAT\":\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"HKDF\":\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"PBKDF2\":\r\n\t\t\t\tresult = \"1.2.840.113549.1.5.12\";\r\n\t\t\t\tbreak;\r\n\t\t\t//region Special case - OIDs for ECC curves\r\n\t\t\tcase \"P-256\":\r\n\t\t\t\tresult = \"1.2.840.10045.3.1.7\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"P-384\":\r\n\t\t\t\tresult = \"1.3.132.0.34\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"P-521\":\r\n\t\t\t\tresult = \"1.3.132.0.35\";\r\n\t\t\t\tbreak;\r\n\t\t\t//endregion\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get default algorithm parameters for each kind of operation\r\n\t * @param {string} algorithmName Algorithm name to get common parameters for\r\n\t * @param {string} operation Kind of operation: \"sign\", \"encrypt\", \"generatekey\", \"importkey\", \"exportkey\", \"verify\"\r\n\t * @returns {*}\r\n\t */\r\n\tgetAlgorithmParameters(algorithmName, operation)\r\n\t{\r\n\t\tlet result = {\r\n\t\t\talgorithm: {},\r\n\t\t\tusages: []\r\n\t\t};\r\n\t\t\r\n\t\tswitch(algorithmName.toUpperCase())\r\n\t\t{\r\n\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\t\t\t\tmodulusLength: 2048,\r\n\t\t\t\t\t\t\t\tpublicExponent: new Uint8Array([0x01, 0x00, 0x01]),\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"verify\":\r\n\t\t\t\t\tcase \"sign\":\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"verify\"] // For importKey(\"pkcs8\") usage must be \"sign\" only\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"sign\":\r\n\t\t\t\t\tcase \"verify\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-PSS\",\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tsaltLength: 20\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-PSS\",\r\n\t\t\t\t\t\t\t\tmodulusLength: 2048,\r\n\t\t\t\t\t\t\t\tpublicExponent: new Uint8Array([0x01, 0x00, 0x01]),\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-PSS\",\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"verify\"] // For importKey(\"pkcs8\") usage must be \"sign\" only\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-PSS\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-OAEP\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"encrypt\":\r\n\t\t\t\t\tcase \"decrypt\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-OAEP\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-OAEP\",\r\n\t\t\t\t\t\t\t\tmodulusLength: 2048,\r\n\t\t\t\t\t\t\t\tpublicExponent: new Uint8Array([0x01, 0x00, 0x01]),\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-OAEP\",\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\"] // encrypt for \"spki\" and decrypt for \"pkcs8\"\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-OAEP\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ECDSA\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\t\t\t\tnamedCurve: \"P-256\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\t\t\t\tnamedCurve: \"P-256\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"verify\"] // \"sign\" for \"pkcs8\"\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"verify\":\r\n\t\t\t\t\tcase \"sign\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDSA\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ECDH\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\t\t\tnamedCurve: \"P-256\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"deriveKey\", \"deriveBits\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"derivekey\":\r\n\t\t\t\t\tcase \"derivebits\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\t\t\tnamedCurve: \"P-256\",\r\n\t\t\t\t\t\t\t\tpublic: [] // Must be a \"publicKey\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDH\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CTR\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CTR\",\r\n\t\t\t\t\t\t\t\tlength: 256\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"decrypt\":\r\n\t\t\t\t\tcase \"encrypt\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CTR\",\r\n\t\t\t\t\t\t\t\tcounter: new Uint8Array(16),\r\n\t\t\t\t\t\t\t\tlength: 10\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CTR\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CBC\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\t\t\t\t\tlength: 256\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"decrypt\":\r\n\t\t\t\t\tcase \"encrypt\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\t\t\t\t\tiv: this.getRandomValues(new Uint8Array(16)) // For \"decrypt\" the value should be replaced with value got on \"encrypt\" step\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CBC\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-GCM\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\t\t\t\t\tlength: 256\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"decrypt\":\r\n\t\t\t\t\tcase \"encrypt\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\t\t\t\t\tiv: this.getRandomValues(new Uint8Array(16)) // For \"decrypt\" the value should be replaced with value got on \"encrypt\" step\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-GCM\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-KW\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\tcase \"wrapkey\":\r\n\t\t\t\t\tcase \"unwrapkey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\t\t\t\t\tlength: 256\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-KW\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"HMAC\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"sign\":\r\n\t\t\t\t\tcase \"verify\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"HMAC\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\t\t\t\tlength: 32,\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"HMAC\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"HKDF\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"derivekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"HKDF\",\r\n\t\t\t\t\t\t\t\thash: \"SHA-256\",\r\n\t\t\t\t\t\t\t\tsalt: new Uint8Array([]),\r\n\t\t\t\t\t\t\t\tinfo: new Uint8Array([])\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"HKDF\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"PBKDF2\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"derivekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\t\t\t\t\thash: { name: \"SHA-256\" },\r\n\t\t\t\t\t\t\t\tsalt: new Uint8Array([]),\r\n\t\t\t\t\t\t\t\titerations: 10000\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"PBKDF2\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Getting hash algorithm by signature algorithm\r\n\t * @param {AlgorithmIdentifier} signatureAlgorithm Signature algorithm\r\n\t * @returns {string}\r\n\t */\r\n\tgetHashAlgorithm(signatureAlgorithm)\r\n\t{\r\n\t\tlet result = \"\";\r\n\t\t\r\n\t\tswitch(signatureAlgorithm.algorithmId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.4.1\": // ecdsa-with-SHA1\r\n\t\t\tcase \"1.2.840.113549.1.1.5\":\r\n\t\t\t\tresult = \"SHA-1\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.10045.4.3.2\": // ecdsa-with-SHA256\r\n\t\t\tcase \"1.2.840.113549.1.1.11\":\r\n\t\t\t\tresult = \"SHA-256\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.10045.4.3.3\": // ecdsa-with-SHA384\r\n\t\t\tcase \"1.2.840.113549.1.1.12\":\r\n\t\t\t\tresult = \"SHA-384\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.10045.4.3.4\": // ecdsa-with-SHA512\r\n\t\t\tcase \"1.2.840.113549.1.1.13\":\r\n\t\t\t\tresult = \"SHA-512\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.1.10\": // RSA-PSS\r\n\t\t\t\t{\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst params = new RSASSAPSSParams({ schema: signatureAlgorithm.algorithmParams });\r\n\t\t\t\t\t\tif(\"hashAlgorithm\" in params)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tconst algorithm = this.getAlgorithmByOID(params.hashAlgorithm.algorithmId);\r\n\t\t\t\t\t\t\tif((\"name\" in algorithm) === false)\r\n\t\t\t\t\t\t\t\treturn \"\";\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tresult = algorithm.name;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tresult = \"SHA-1\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Specialized function encrypting \"EncryptedContentInfo\" object using parameters\r\n\t * @param {Object} parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tencryptEncryptedContentInfo(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t\r\n\t\tif((\"password\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\r\n\t\tif((\"contentEncryptionAlgorithm\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"contentEncryptionAlgorithm\\\"\");\r\n\t\t\r\n\t\tif((\"hmacHashAlgorithm\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"hmacHashAlgorithm\\\"\");\r\n\t\t\r\n\t\tif((\"iterationCount\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"iterationCount\\\"\");\r\n\t\t\r\n\t\tif((\"contentToEncrypt\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"contentToEncrypt\\\"\");\r\n\t\t\r\n\t\tif((\"contentType\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"contentType\\\"\");\r\n\r\n\t\tconst contentEncryptionOID = this.getOIDByAlgorithm(parameters.contentEncryptionAlgorithm);\r\n\t\tif(contentEncryptionOID === \"\")\r\n\t\t\treturn Promise.reject(\"Wrong \\\"contentEncryptionAlgorithm\\\" value\");\r\n\t\t\r\n\t\tconst pbkdf2OID = this.getOIDByAlgorithm({\r\n\t\t\tname: \"PBKDF2\"\r\n\t\t});\r\n\t\tif(pbkdf2OID === \"\")\r\n\t\t\treturn Promise.reject(\"Can not find OID for PBKDF2\");\r\n\t\t\r\n\t\tconst hmacOID = this.getOIDByAlgorithm({\r\n\t\t\tname: \"HMAC\",\r\n\t\t\thash: {\r\n\t\t\t\tname: parameters.hmacHashAlgorithm\r\n\t\t\t}\r\n\t\t});\r\n\t\tif(hmacOID === \"\")\r\n\t\t\treturn Promise.reject(`Incorrect value for \"hmacHashAlgorithm\": ${parameters.hmacHashAlgorithm}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst ivBuffer = new ArrayBuffer(16); // For AES we need IV 16 bytes long\r\n\t\tconst ivView = new Uint8Array(ivBuffer);\r\n\t\tthis.getRandomValues(ivView);\r\n\t\t\r\n\t\tconst saltBuffer = new ArrayBuffer(64);\r\n\t\tconst saltView = new Uint8Array(saltBuffer);\r\n\t\tthis.getRandomValues(saltView);\r\n\t\t\r\n\t\tconst contentView = new Uint8Array(parameters.contentToEncrypt);\r\n\t\t\r\n\t\tconst pbkdf2Params = new PBKDF2Params({\r\n\t\t\tsalt: new asn1js.OctetString({ valueHex: saltBuffer }),\r\n\t\t\titerationCount: parameters.iterationCount,\r\n\t\t\tprf: new AlgorithmIdentifier({\r\n\t\t\t\talgorithmId: hmacOID,\r\n\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t})\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Derive PBKDF2 key from \"password\" buffer\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tconst passwordView = new Uint8Array(parameters.password);\r\n\t\t\t\r\n\t\t\treturn this.importKey(\"raw\",\r\n\t\t\t\tpasswordView,\r\n\t\t\t\t\"PBKDF2\",\r\n\t\t\t\tfalse,\r\n\t\t\t\t[\"deriveKey\"]);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Derive key for \"contentEncryptionAlgorithm\"\r\n\t\tsequence = sequence.then(result =>\r\n\t\t\tthis.deriveKey({\r\n\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\thash: {\r\n\t\t\t\t\tname: parameters.hmacHashAlgorithm\r\n\t\t\t\t},\r\n\t\t\t\tsalt: saltView,\r\n\t\t\t\titerations: parameters.iterationCount\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tparameters.contentEncryptionAlgorithm,\r\n\t\t\tfalse,\r\n\t\t\t[\"encrypt\"]),\r\n\t\terror =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Encrypt content\r\n\t\tsequence = sequence.then(result =>\r\n\t\t\tthis.encrypt({\r\n\t\t\t\tname: parameters.contentEncryptionAlgorithm.name,\r\n\t\t\t\tiv: ivView\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tcontentView),\r\n\t\terror =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Store all parameters in EncryptedData object\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tconst pbes2Parameters = new PBES2Params({\r\n\t\t\t\tkeyDerivationFunc: new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: pbkdf2OID,\r\n\t\t\t\t\talgorithmParams: pbkdf2Params.toSchema()\r\n\t\t\t\t}),\r\n\t\t\t\tencryptionScheme: new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: contentEncryptionOID,\r\n\t\t\t\t\talgorithmParams: new asn1js.OctetString({ valueHex: ivBuffer })\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\treturn new EncryptedContentInfo({\r\n\t\t\t\tcontentType: parameters.contentType,\r\n\t\t\t\tcontentEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: \"1.2.840.113549.1.5.13\", // pkcs5PBES2\r\n\t\t\t\t\talgorithmParams: pbes2Parameters.toSchema()\r\n\t\t\t\t}),\r\n\t\t\t\tencryptedContent: new asn1js.OctetString({ valueHex: result })\r\n\t\t\t});\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Decrypt data stored in \"EncryptedContentInfo\" object using parameters\r\n\t * @param parameters\r\n\t * @return {Promise}\r\n\t */\r\n\tdecryptEncryptedContentInfo(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t\r\n\t\tif((\"password\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\r\n\t\tif((\"encryptedContentInfo\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"encryptedContentInfo\\\"\");\r\n\r\n\t\tif(parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId !== \"1.2.840.113549.1.5.13\") // pkcs5PBES2\r\n\t\t\treturn Promise.reject(`Unknown \"contentEncryptionAlgorithm\": ${parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tlet pbes2Parameters;\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tpbes2Parameters = new PBES2Params({ schema: parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmParams });\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"pbes2Parameters\\\"\");\r\n\t\t}\r\n\t\t\r\n\t\tlet pbkdf2Params;\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tpbkdf2Params = new PBKDF2Params({ schema: pbes2Parameters.keyDerivationFunc.algorithmParams });\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"pbkdf2Params\\\"\");\r\n\t\t}\r\n\t\t\r\n\t\tconst contentEncryptionAlgorithm = this.getAlgorithmByOID(pbes2Parameters.encryptionScheme.algorithmId);\r\n\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\treturn Promise.reject(`Incorrect OID for \"contentEncryptionAlgorithm\": ${pbes2Parameters.encryptionScheme.algorithmId}`);\r\n\t\t\r\n\t\tconst ivBuffer = pbes2Parameters.encryptionScheme.algorithmParams.valueBlock.valueHex;\r\n\t\tconst ivView = new Uint8Array(ivBuffer);\r\n\t\t\r\n\t\tconst saltBuffer = pbkdf2Params.salt.valueBlock.valueHex;\r\n\t\tconst saltView = new Uint8Array(saltBuffer);\r\n\t\t\r\n\t\tconst iterationCount = pbkdf2Params.iterationCount;\r\n\t\t\r\n\t\tlet hmacHashAlgorithm = \"SHA-1\";\r\n\t\t\r\n\t\tif(\"prf\" in pbkdf2Params)\r\n\t\t{\r\n\t\t\tconst algorithm = this.getAlgorithmByOID(pbkdf2Params.prf.algorithmId);\r\n\t\t\tif((\"name\" in algorithm) === false)\r\n\t\t\t\treturn Promise.reject(\"Incorrect OID for HMAC hash algorithm\");\r\n\t\t\t\r\n\t\t\thmacHashAlgorithm = algorithm.hash.name;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Derive PBKDF2 key from \"password\" buffer\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tthis.importKey(\"raw\",\r\n\t\t\t\tparameters.password,\r\n\t\t\t\t\"PBKDF2\",\r\n\t\t\t\tfalse,\r\n\t\t\t\t[\"deriveKey\"]),\r\n\t\terror =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Derive key for \"contentEncryptionAlgorithm\"\r\n\t\tsequence = sequence.then(result =>\r\n\t\t\tthis.deriveKey({\r\n\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\thash: {\r\n\t\t\t\t\tname: hmacHashAlgorithm\r\n\t\t\t\t},\r\n\t\t\t\tsalt: saltView,\r\n\t\t\t\titerations: iterationCount\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tcontentEncryptionAlgorithm,\r\n\t\t\tfalse,\r\n\t\t\t[\"decrypt\"]),\r\n\t\terror =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Decrypt internal content using derived key\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Create correct data block for decryption\r\n\t\t\tlet dataBuffer = new ArrayBuffer(0);\r\n\t\t\t\r\n\t\t\tif(parameters.encryptedContentInfo.encryptedContent.idBlock.isConstructed === false)\r\n\t\t\t\tdataBuffer = parameters.encryptedContentInfo.encryptedContent.valueBlock.valueHex;\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tfor(const content of parameters.encryptedContentInfo.encryptedContent.valueBlock.value)\r\n\t\t\t\t\tdataBuffer = utilConcatBuf(dataBuffer, content.valueBlock.valueHex);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn this.decrypt({\r\n\t\t\t\tname: contentEncryptionAlgorithm.name,\r\n\t\t\t\tiv: ivView\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tdataBuffer);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Stamping (signing) data using algorithm simular to HMAC\r\n\t * @param {Object} parameters\r\n\t * @return {Promise.<T>|Promise}\r\n\t */\r\n\tstampDataWithPassword(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t\r\n\t\tif((\"password\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\r\n\t\tif((\"hashAlgorithm\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"hashAlgorithm\\\"\");\r\n\t\t\r\n\t\tif((\"salt\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"iterationCount\\\"\");\r\n\t\t\r\n\t\tif((\"iterationCount\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"salt\\\"\");\r\n\t\t\r\n\t\tif((\"contentToStamp\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"contentToStamp\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Choose correct length for HMAC key\r\n\t\tlet length;\r\n\t\t\r\n\t\tswitch(parameters.hashAlgorithm.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"sha-1\":\r\n\t\t\t\tlength = 160;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-256\":\r\n\t\t\t\tlength = 256;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-384\":\r\n\t\t\t\tlength = 384;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-512\":\r\n\t\t\t\tlength = 512;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect \"parameters.hashAlgorithm\" parameter: ${parameters.hashAlgorithm}`);\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst hmacAlgorithm = {\r\n\t\t\tname: \"HMAC\",\r\n\t\t\tlength,\r\n\t\t\thash: {\r\n\t\t\t\tname: parameters.hashAlgorithm\r\n\t\t\t}\r\n\t\t};\r\n\t\t//endregion\r\n\r\n\t\t//region Create PKCS#12 key for integrity checking\r\n\t\tsequence = sequence.then(() => makePKCS12B2Key(this, parameters.hashAlgorithm, length, parameters.password, parameters.salt, parameters.iterationCount));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Import HMAC key\r\n\t\t// noinspection JSCheckFunctionSignatures\r\n\t\tsequence = sequence.then(\r\n\t\t\tresult =>\r\n\t\t\t\tthis.importKey(\"raw\",\r\n\t\t\t\t\tnew Uint8Array(result),\r\n\t\t\t\t\thmacAlgorithm,\r\n\t\t\t\t\tfalse,\r\n\t\t\t\t\t[\"sign\"])\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Make signed HMAC value\r\n\t\tsequence = sequence.then(\r\n\t\t\tresult =>\r\n\t\t\t\tthis.sign(hmacAlgorithm, result, new Uint8Array(parameters.contentToStamp)),\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\tverifyDataStampedWithPassword(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t\r\n\t\tif((\"password\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\r\n\t\tif((\"hashAlgorithm\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"hashAlgorithm\\\"\");\r\n\t\t\r\n\t\tif((\"salt\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"iterationCount\\\"\");\r\n\t\t\r\n\t\tif((\"iterationCount\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"salt\\\"\");\r\n\t\t\r\n\t\tif((\"contentToVerify\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"contentToVerify\\\"\");\r\n\t\t\r\n\t\tif((\"signatureToVerify\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"signatureToVerify\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Choose correct length for HMAC key\r\n\t\tlet length;\r\n\t\t\r\n\t\tswitch(parameters.hashAlgorithm.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"sha-1\":\r\n\t\t\t\tlength = 160;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-256\":\r\n\t\t\t\tlength = 256;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-384\":\r\n\t\t\t\tlength = 384;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-512\":\r\n\t\t\t\tlength = 512;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect \"parameters.hashAlgorithm\" parameter: ${parameters.hashAlgorithm}`);\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst hmacAlgorithm = {\r\n\t\t\tname: \"HMAC\",\r\n\t\t\tlength,\r\n\t\t\thash: {\r\n\t\t\t\tname: parameters.hashAlgorithm\r\n\t\t\t}\r\n\t\t};\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create PKCS#12 key for integrity checking\r\n\t\tsequence = sequence.then(() => makePKCS12B2Key(this, parameters.hashAlgorithm, length, parameters.password, parameters.salt, parameters.iterationCount));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Import HMAC key\r\n\t\t// noinspection JSCheckFunctionSignatures\r\n\t\tsequence = sequence.then(result =>\r\n\t\t\tthis.importKey(\"raw\",\r\n\t\t\t\tnew Uint8Array(result),\r\n\t\t\t\thmacAlgorithm,\r\n\t\t\t\tfalse,\r\n\t\t\t\t[\"verify\"])\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Make signed HMAC value\r\n\t\tsequence = sequence.then(\r\n\t\t\tresult =>\r\n\t\t\t\tthis.verify(hmacAlgorithm, result, new Uint8Array(parameters.signatureToVerify), new Uint8Array(parameters.contentToVerify)),\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get signature parameters by analyzing private key algorithm\r\n\t * @param {Object} privateKey The private key user would like to use\r\n\t * @param {string} [hashAlgorithm=\"SHA-1\"] Hash algorithm user would like to use\r\n\t * @return {Promise.<T>|Promise}\r\n\t */\r\n\tgetSignatureParameters(privateKey, hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Check hashing algorithm\r\n\t\tconst oid = this.getOIDByAlgorithm({ name: hashAlgorithm });\r\n\t\tif(oid === \"\")\r\n\t\t\treturn Promise.reject(`Unsupported hash algorithm: ${hashAlgorithm}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tconst signatureAlgorithm = new AlgorithmIdentifier();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"default parameters\" for current algorithm\r\n\t\tconst parameters = this.getAlgorithmParameters(privateKey.algorithm.name, \"sign\");\r\n\t\tparameters.algorithm.hash.name = hashAlgorithm;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Fill internal structures base on \"privateKey\" and \"hashAlgorithm\"\r\n\t\tswitch(privateKey.algorithm.name.toUpperCase())\r\n\t\t{\r\n\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\tcase \"ECDSA\":\r\n\t\t\t\tsignatureAlgorithm.algorithmId = this.getOIDByAlgorithm(parameters.algorithm);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Set \"saltLength\" as a length (in octets) of hash function result\r\n\t\t\t\t\tswitch(hashAlgorithm.toUpperCase())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\tparameters.algorithm.saltLength = 32;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\tparameters.algorithm.saltLength = 48;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\tparameters.algorithm.saltLength = 64;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Fill \"RSASSA_PSS_params\" object\r\n\t\t\t\t\tconst paramsObject = {};\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(hashAlgorithm.toUpperCase() !== \"SHA-1\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst hashAlgorithmOID = this.getOIDByAlgorithm({ name: hashAlgorithm });\r\n\t\t\t\t\t\tif(hashAlgorithmOID === \"\")\r\n\t\t\t\t\t\t\treturn Promise.reject(`Unsupported hash algorithm: ${hashAlgorithm}`);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tparamsObject.hashAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: hashAlgorithmOID,\r\n\t\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tparamsObject.maskGenAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.8\", // MGF1\r\n\t\t\t\t\t\t\talgorithmParams: paramsObject.hashAlgorithm.toSchema()\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(parameters.algorithm.saltLength !== 20)\r\n\t\t\t\t\t\tparamsObject.saltLength = parameters.algorithm.saltLength;\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst pssParameters = new RSASSAPSSParams(paramsObject);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Automatically set signature algorithm\r\n\t\t\t\t\tsignatureAlgorithm.algorithmId = \"1.2.840.113549.1.1.10\";\r\n\t\t\t\t\tsignatureAlgorithm.algorithmParams = pssParameters.toSchema();\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${privateKey.algorithm.name}`);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\treturn Promise.resolve().then(() => ({\r\n\t\t\tsignatureAlgorithm,\r\n\t\t\tparameters\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Sign data with pre-defined private key\r\n\t * @param {ArrayBuffer} data Data to be signed\r\n\t * @param {Object} privateKey Private key to use\r\n\t * @param {Object} parameters Parameters for used algorithm\r\n\t * @return {Promise.<T>|Promise}\r\n\t */\r\n\tsignWithPrivateKey(data, privateKey, parameters)\r\n\t{\r\n\t\treturn this.sign(parameters.algorithm,\r\n\t\t\tprivateKey,\r\n\t\t\tnew Uint8Array(data))\r\n\t\t\t.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Special case for ECDSA algorithm\r\n\t\t\t\tif(parameters.algorithm.name === \"ECDSA\")\r\n\t\t\t\t\tresult = createCMSECDSASignature(result);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\treturn result;\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(`Signing error: ${error}`)\r\n\t\t\t);\r\n\t}\r\n\t//**********************************************************************************\r\n\tfillPublicKeyParameters(publicKeyInfo, signatureAlgorithm)\r\n\t{\r\n\t\tconst parameters = {};\r\n\t\t\r\n\t\t//region Find signer's hashing algorithm\r\n\t\tconst shaAlgorithm = this.getHashAlgorithm(signatureAlgorithm);\r\n\t\tif(shaAlgorithm === \"\")\r\n\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${signatureAlgorithm.algorithmId}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get information about public key algorithm and default parameters for import\r\n\t\tlet algorithmId;\r\n\t\tif(signatureAlgorithm.algorithmId === \"1.2.840.113549.1.1.10\")\r\n\t\t\talgorithmId = signatureAlgorithm.algorithmId;\r\n\t\telse\r\n\t\t\talgorithmId = publicKeyInfo.algorithm.algorithmId;\r\n\t\t\r\n\t\tconst algorithmObject = this.getAlgorithmByOID(algorithmId);\r\n\t\tif((\"name\" in algorithmObject) === \"\")\r\n\t\t\treturn Promise.reject(`Unsupported public key algorithm: ${signatureAlgorithm.algorithmId}`);\r\n\t\t\r\n\t\tparameters.algorithm = this.getAlgorithmParameters(algorithmObject.name, \"importkey\");\r\n\t\tif(\"hash\" in parameters.algorithm.algorithm)\r\n\t\t\tparameters.algorithm.algorithm.hash.name = shaAlgorithm;\r\n\t\t\r\n\t\t//region Special case for ECDSA\r\n\t\tif(algorithmObject.name === \"ECDSA\")\r\n\t\t{\r\n\t\t\t//region Get information about named curve\r\n\t\t\tlet algorithmParamsChecked = false;\r\n\t\t\t\r\n\t\t\tif((\"algorithmParams\" in publicKeyInfo.algorithm) === true)\r\n\t\t\t{\r\n\t\t\t\tif(\"idBlock\" in publicKeyInfo.algorithm.algorithmParams)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((publicKeyInfo.algorithm.algorithmParams.idBlock.tagClass === 1) && (publicKeyInfo.algorithm.algorithmParams.idBlock.tagNumber === 6))\r\n\t\t\t\t\t\talgorithmParamsChecked = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(algorithmParamsChecked === false)\r\n\t\t\t\treturn Promise.reject(\"Incorrect type for ECDSA public key parameters\");\r\n\t\t\t\r\n\t\t\tconst curveObject = this.getAlgorithmByOID(publicKeyInfo.algorithm.algorithmParams.valueBlock.toString());\r\n\t\t\tif((\"name\" in curveObject) === false)\r\n\t\t\t\treturn Promise.reject(`Unsupported named curve algorithm: ${publicKeyInfo.algorithm.algorithmParams.valueBlock.toString()}`);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tparameters.algorithm.algorithm.namedCurve = curveObject.name;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn parameters;\r\n\t}\r\n\t//**********************************************************************************\r\n\tgetPublicKey(publicKeyInfo, signatureAlgorithm, parameters = null)\r\n\t{\r\n\t\tif(parameters === null)\r\n\t\t\tparameters = this.fillPublicKeyParameters(publicKeyInfo, signatureAlgorithm);\r\n\t\t\r\n\t\tconst publicKeyInfoSchema = publicKeyInfo.toSchema();\r\n\t\tconst publicKeyInfoBuffer = publicKeyInfoSchema.toBER(false);\r\n\t\tconst publicKeyInfoView = new Uint8Array(publicKeyInfoBuffer);\r\n\t\t\r\n\t\treturn this.importKey(\"spki\",\r\n\t\t\tpublicKeyInfoView,\r\n\t\t\tparameters.algorithm.algorithm,\r\n\t\t\ttrue,\r\n\t\t\tparameters.algorithm.usages\r\n\t\t);\r\n\t}\r\n\t//**********************************************************************************\r\n\tverifyWithPublicKey(data, signature, publicKeyInfo, signatureAlgorithm, shaAlgorithm = null)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find signer's hashing algorithm\r\n\t\tif(shaAlgorithm === null)\r\n\t\t{\r\n\t\t\tshaAlgorithm = this.getHashAlgorithm(signatureAlgorithm);\r\n\t\t\tif(shaAlgorithm === \"\")\r\n\t\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${signatureAlgorithm.algorithmId}`);\r\n\t\t\t\r\n\t\t\t//region Import public key\r\n\t\t\tsequence = sequence.then(() =>\r\n\t\t\t\tthis.getPublicKey(publicKeyInfo, signatureAlgorithm));\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tconst parameters = {};\r\n\t\t\t\r\n\t\t\t//region Get information about public key algorithm and default parameters for import\r\n\t\t\tlet algorithmId;\r\n\t\t\tif(signatureAlgorithm.algorithmId === \"1.2.840.113549.1.1.10\")\r\n\t\t\t\talgorithmId = signatureAlgorithm.algorithmId;\r\n\t\t\telse\r\n\t\t\t\talgorithmId = publicKeyInfo.algorithm.algorithmId;\r\n\t\t\t\r\n\t\t\tconst algorithmObject = this.getAlgorithmByOID(algorithmId);\r\n\t\t\tif((\"name\" in algorithmObject) === \"\")\r\n\t\t\t\treturn Promise.reject(`Unsupported public key algorithm: ${signatureAlgorithm.algorithmId}`);\r\n\t\t\t\r\n\t\t\tparameters.algorithm = this.getAlgorithmParameters(algorithmObject.name, \"importkey\");\r\n\t\t\tif(\"hash\" in parameters.algorithm.algorithm)\r\n\t\t\t\tparameters.algorithm.algorithm.hash.name = shaAlgorithm;\r\n\t\t\t\r\n\t\t\t//region Special case for ECDSA\r\n\t\t\tif(algorithmObject.name === \"ECDSA\")\r\n\t\t\t{\r\n\t\t\t\t//region Get information about named curve\r\n\t\t\t\tlet algorithmParamsChecked = false;\r\n\t\t\t\t\r\n\t\t\t\tif((\"algorithmParams\" in publicKeyInfo.algorithm) === true)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(\"idBlock\" in publicKeyInfo.algorithm.algorithmParams)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif((publicKeyInfo.algorithm.algorithmParams.idBlock.tagClass === 1) && (publicKeyInfo.algorithm.algorithmParams.idBlock.tagNumber === 6))\r\n\t\t\t\t\t\t\talgorithmParamsChecked = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(algorithmParamsChecked === false)\r\n\t\t\t\t\treturn Promise.reject(\"Incorrect type for ECDSA public key parameters\");\r\n\t\t\t\t\r\n\t\t\t\tconst curveObject = this.getAlgorithmByOID(publicKeyInfo.algorithm.algorithmParams.valueBlock.toString());\r\n\t\t\t\tif((\"name\" in curveObject) === false)\r\n\t\t\t\t\treturn Promise.reject(`Unsupported named curve algorithm: ${publicKeyInfo.algorithm.algorithmParams.valueBlock.toString()}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tparameters.algorithm.algorithm.namedCurve = curveObject.name;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Import public key\r\n\t\t\tsequence = sequence.then(() =>\r\n\t\t\t\tthis.getPublicKey(publicKeyInfo, null, parameters));\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Verify signature\r\n\t\tsequence = sequence.then(publicKey =>\r\n\t\t{\r\n\t\t\t//region Get default algorithm parameters for verification\r\n\t\t\tconst algorithm = this.getAlgorithmParameters(publicKey.algorithm.name, \"verify\");\r\n\t\t\tif(\"hash\" in algorithm.algorithm)\r\n\t\t\t\talgorithm.algorithm.hash.name = shaAlgorithm;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Special case for ECDSA signatures\r\n\t\t\tlet signatureValue = signature.valueBlock.valueHex;\r\n\t\t\t\r\n\t\t\tif(publicKey.algorithm.name === \"ECDSA\")\r\n\t\t\t{\r\n\t\t\t\tconst asn1 = asn1js.fromBER(signatureValue);\r\n\t\t\t\t// noinspection JSCheckFunctionSignatures\r\n\t\t\t\tsignatureValue = createECDSASignatureFromCMS(asn1.result);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Special case for RSA-PSS\r\n\t\t\tif(publicKey.algorithm.name === \"RSA-PSS\")\r\n\t\t\t{\r\n\t\t\t\tlet pssParameters;\r\n\t\t\t\t\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tpssParameters = new RSASSAPSSParams({ schema: signatureAlgorithm.algorithmParams });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject(ex);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(\"saltLength\" in pssParameters)\r\n\t\t\t\t\talgorithm.algorithm.saltLength = pssParameters.saltLength;\r\n\t\t\t\telse\r\n\t\t\t\t\talgorithm.algorithm.saltLength = 20;\r\n\t\t\t\t\r\n\t\t\t\tlet hashAlgo = \"SHA-1\";\r\n\t\t\t\t\r\n\t\t\t\tif(\"hashAlgorithm\" in pssParameters)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst hashAlgorithm = this.getAlgorithmByOID(pssParameters.hashAlgorithm.algorithmId);\r\n\t\t\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(`Unrecognized hash algorithm: ${pssParameters.hashAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\r\n\t\t\t\t\thashAlgo = hashAlgorithm.name;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\talgorithm.algorithm.hash.name = hashAlgo;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn this.verify(algorithm.algorithm,\r\n\t\t\t\tpublicKey,\r\n\t\t\t\tnew Uint8Array(signatureValue),\r\n\t\t\t\tnew Uint8Array(data)\r\n\t\t\t);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"CryptoEngine.js"}