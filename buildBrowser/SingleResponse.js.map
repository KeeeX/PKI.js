{"version":3,"sources":["../src/SingleResponse.js"],"names":["SingleResponse","parameters","certID","defaultValues","certStatus","thisUpdate","nextUpdate","singleExtensions","fromSchema","schema","asn1","asn1js","compareSchema","names","blockName","verified","Error","CertID","result","toDate","Array","from","valueBlock","value","element","Extension","outputArray","push","toSchema","GeneralizedTime","valueDate","Constructed","idBlock","tagClass","tagNumber","Sequence","_object","toJSON","memberName","Date","memberValue","compareWithDefault","hashAlgorithm","issuerNameHash","issuerKeyHash","serialNumber","Object","keys","length","name","Choice","Primitive","lenBlockLength","optional","Enumerated","lenBlock","Extensions"],"mappings":"2TAAA,sDACA,gCACA,2DACA,iEACA,mE,umCACA;AACA;;MAGqBA,CAAAA,c,yBAEpB;AACA;;;;IAKA,yBACA,IADYC,CAAAA,UACZ,2DADyB,EACzB,sCACC;AACA;;;KAIA,KAAKC,MAAL,CAAc,gCAAmBD,UAAnB,CAA+B,QAA/B,CAAyCD,cAAc,CAACG,aAAf,CAA6B,QAA7B,CAAzC,CAAd,CACA;;;KAIA,KAAKC,UAAL,CAAkB,gCAAmBH,UAAnB,CAA+B,YAA/B,CAA6CD,cAAc,CAACG,aAAf,CAA6B,YAA7B,CAA7C,CAAlB,CACA;;;KAIA,KAAKE,UAAL,CAAkB,gCAAmBJ,UAAnB,CAA+B,YAA/B,CAA6CD,cAAc,CAACG,aAAf,CAA6B,YAA7B,CAA7C,CAAlB,CAEA,GAAG,cAAgBF,CAAAA,UAAnB,CACC;;;MAIA,KAAKK,UAAL,CAAkB,gCAAmBL,UAAnB,CAA+B,YAA/B,CAA6CD,cAAc,CAACG,aAAf,CAA6B,YAA7B,CAA7C,CAAlB,CAED,GAAG,oBAAsBF,CAAAA,UAAzB,CACC;;;MAIA,KAAKM,gBAAL,CAAwB,gCAAmBN,UAAnB,CAA+B,kBAA/B,CAAmDD,cAAc,CAACG,aAAf,CAA6B,kBAA7B,CAAnD,CAAxB,CACD;AAEA;AACA,GAAG,UAAYF,CAAAA,UAAf,CACC,KAAKO,UAAL,CAAgBP,UAAU,CAACQ,MAA3B,EACD;AACA,CACD;AACA;;;mDAqJA;AACA;;;8BAIWA,M,CACX,CACC;AACA,wBAAWA,MAAX,CAAmB,CAClB,QADkB,CAElB,YAFkB,CAGlB,YAHkB,CAIlB,YAJkB,CAKlB,kBALkB,CAAnB,EAOA;AAEA;AACA,GAAMC,CAAAA,IAAI,CAAGC,MAAM,CAACC,aAAP,CAAqBH,MAArB,CACZA,MADY,CAEZT,cAAc,CAACS,MAAf,CAAsB,CACrBI,KAAK,CAAE,CACNX,MAAM,CAAE,CACPW,KAAK,CAAE,CACNC,SAAS,CAAE,QADL,CADA,CADF,CAMNV,UAAU,CAAE,YANN,CAONC,UAAU,CAAE,YAPN,CAQNC,UAAU,CAAE,YARN,CASNC,gBAAgB,CAAE,CACjBM,KAAK,CAAE,CACNC,SAAS,CACR,kBAFK,CADU,CATZ,CADc,CAAtB,CAFY,CAAb,CAsBA,GAAGJ,IAAI,CAACK,QAAL,GAAkB,KAArB,CACC,KAAM,IAAIC,CAAAA,KAAJ,CAAU,wEAAV,CAAN,CACD;AAEA;AACA,KAAKd,MAAL,CAAc,GAAIe,gBAAJ,CAAW,CAAER,MAAM,CAAEC,IAAI,CAACQ,MAAL,CAAYhB,MAAtB,CAAX,CAAd,CACA,KAAKE,UAAL,CAAkBM,IAAI,CAACQ,MAAL,CAAYd,UAA9B,CACA,KAAKC,UAAL,CAAkBK,IAAI,CAACQ,MAAL,CAAYb,UAAZ,CAAuBc,MAAvB,EAAlB,CACA,GAAG,cAAgBT,CAAAA,IAAI,CAACQ,MAAxB,CACC,KAAKZ,UAAL,CAAkBI,IAAI,CAACQ,MAAL,CAAYZ,UAAZ,CAAuBa,MAAvB,EAAlB,CAED,GAAG,oBAAsBT,CAAAA,IAAI,CAACQ,MAA9B,CACC,KAAKX,gBAAL,CAAwBa,KAAK,CAACC,IAAN,CAAWX,IAAI,CAACQ,MAAL,CAAYX,gBAAZ,CAA6Be,UAA7B,CAAwCC,KAAnD,CAA0D,SAAAC,OAAO,QAAI,IAAIC,mBAAJ,CAAc,CAAEhB,MAAM,CAAEe,OAAV,CAAd,CAAJ,EAAjE,CAAxB,CACD;AACA,CACD;AACA;;;+CAKA,CACC;AACA,GAAME,CAAAA,WAAW,CAAG,EAApB,CAEAA,WAAW,CAACC,IAAZ,CAAiB,KAAKzB,MAAL,CAAY0B,QAAZ,EAAjB,EACAF,WAAW,CAACC,IAAZ,CAAiB,KAAKvB,UAAtB,EACAsB,WAAW,CAACC,IAAZ,CAAiB,GAAIhB,CAAAA,MAAM,CAACkB,eAAX,CAA2B,CAAEC,SAAS,CAAE,KAAKzB,UAAlB,CAA3B,CAAjB,EACA,GAAG,cAAgB,KAAnB,CACA,CACCqB,WAAW,CAACC,IAAZ,CAAiB,GAAIhB,CAAAA,MAAM,CAACoB,WAAX,CAAuB,CACvCC,OAAO,CAAE,CACRC,QAAQ,CAAE,CADF,CACK;AACbC,SAAS,CAAE,CAAE;AAFL,CAD8B,CAKvCX,KAAK,CAAE,CAAC,GAAIZ,CAAAA,MAAM,CAACkB,eAAX,CAA2B,CAAEC,SAAS,CAAE,KAAKxB,UAAlB,CAA3B,CAAD,CALgC,CAAvB,CAAjB,EAOA,CAED,GAAG,oBAAsB,KAAzB,CACA,CACCoB,WAAW,CAACC,IAAZ,CAAiB,GAAIhB,CAAAA,MAAM,CAACwB,QAAX,CAAoB,CACpCZ,KAAK,CAAEH,KAAK,CAACC,IAAN,CAAW,KAAKd,gBAAhB,CAAkC,SAAAiB,OAAO,QAAIA,CAAAA,OAAO,CAACI,QAAR,EAAJ,EAAzC,CAD6B,CAApB,CAAjB,EAGA,CACD;AAEA;AACA,MAAQ,IAAIjB,CAAAA,MAAM,CAACwB,QAAX,CAAoB,CAC3BZ,KAAK,CAAEG,WADoB,CAApB,CAAR,CAGA;AACA,CACD;AACA;;;2CAKA,CACC,GAAMU,CAAAA,OAAO,CAAG,CACflC,MAAM,CAAE,KAAKA,MAAL,CAAYmC,MAAZ,EADO,CAEfjC,UAAU,CAAE,KAAKA,UAAL,CAAgBiC,MAAhB,EAFG,CAGfhC,UAAU,CAAE,KAAKA,UAHF,CAAhB,CAMA,GAAG,cAAgB,KAAnB,CACC+B,OAAO,CAAC9B,UAAR,CAAqB,KAAKA,UAA1B,CAED,GAAG,oBAAsB,KAAzB,CACC8B,OAAO,CAAC7B,gBAAR,CAA2Ba,KAAK,CAACC,IAAN,CAAW,KAAKd,gBAAhB,CAAkC,SAAAiB,OAAO,QAAIA,CAAAA,OAAO,CAACa,MAAR,EAAJ,EAAzC,CAA3B,CAED,MAAOD,CAAAA,OAAP,CACA,CACD;sDAnQqBE,U,CACrB,CACC,OAAOA,UAAP,EAEC,IAAK,QAAL,CACC,MAAO,IAAIrB,gBAAJ,EAAP,CACD,IAAK,YAAL,CACC,MAAO,EAAP,CACD,IAAK,YAAL,CACA,IAAK,YAAL,CACC,MAAO,IAAIsB,CAAAA,IAAJ,CAAS,CAAT,CAAY,CAAZ,CAAe,CAAf,CAAP,CACD,IAAK,kBAAL,CACC,MAAO,EAAP,CACD,QACC,KAAM,IAAIvB,CAAAA,KAAJ,yDAA2DsB,UAA3D,EAAN,CAZF,CAcA,CACD;AACA;;;;kEAK0BA,U,CAAYE,W,CACtC,CACC,OAAOF,UAAP,EAEC,IAAK,QAAL,CACC;AACA,MAASrB,iBAAOwB,kBAAP,CAA0B,eAA1B,CAA2CD,WAAW,CAACE,aAAvD,CAAD,EACLzB,gBAAOwB,kBAAP,CAA0B,gBAA1B,CAA4CD,WAAW,CAACG,cAAxD,CADK,EAEL1B,gBAAOwB,kBAAP,CAA0B,eAA1B,CAA2CD,WAAW,CAACI,aAAvD,CAFK,EAGL3B,gBAAOwB,kBAAP,CAA0B,cAA1B,CAA0CD,WAAW,CAACK,YAAtD,CAHH,CAID,IAAK,YAAL,CACC,MAAQC,CAAAA,MAAM,CAACC,IAAP,CAAYP,WAAZ,EAAyBQ,MAAzB,GAAoC,CAA5C,CACD,IAAK,YAAL,CACA,IAAK,YAAL,CACC,MAAQR,CAAAA,WAAW,GAAKxC,cAAc,CAACG,aAAf,CAA6BmC,UAA7B,CAAxB,CACD,QACC,KAAM,IAAItB,CAAAA,KAAJ,yDAA2DsB,UAA3D,EAAN,CAdF,CAgBA,CACD;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;2CA4BA,IADcrC,CAAAA,UACd,2DAD2B,EAC3B,CACC;;;;;;;;KASA,GAAMY,CAAAA,KAAK,CAAG,gCAAmBZ,UAAnB,CAA+B,OAA/B,CAAwC,EAAxC,CAAd,CAEA,MAAQ,IAAIU,CAAAA,MAAM,CAACwB,QAAX,CAAoB,CAC3Bc,IAAI,CAAGpC,KAAK,CAACC,SAAN,EAAmB,EADC,CAE3BS,KAAK,CAAE,CACNN,gBAAOR,MAAP,CAAcI,KAAK,CAACX,MAAN,EAAgB,EAA9B,CADM,CAEN,GAAIS,CAAAA,MAAM,CAACuC,MAAX,CAAkB,CACjB3B,KAAK,CAAE,CACN,GAAIZ,CAAAA,MAAM,CAACwC,SAAX,CAAqB,CACpBF,IAAI,CAAGpC,KAAK,CAACT,UAAN,EAAoB,EADP,CAEpB4B,OAAO,CAAE,CACRC,QAAQ,CAAE,CADF,CACK;AACbC,SAAS,CAAE,CAAE;AAFL,CAFW,CAMpBkB,cAAc,CAAE,CAAE;AANE,CAArB,CADM,CAQF;AACJ,GAAIzC,CAAAA,MAAM,CAACoB,WAAX,CAAuB,CACtBkB,IAAI,CAAGpC,KAAK,CAACT,UAAN,EAAoB,EADL,CAEtB4B,OAAO,CAAE,CACRC,QAAQ,CAAE,CADF,CACK;AACbC,SAAS,CAAE,CAAE;AAFL,CAFa,CAMtBX,KAAK,CAAE,CACN,GAAIZ,CAAAA,MAAM,CAACkB,eAAX,EADM,CAEN,GAAIlB,CAAAA,MAAM,CAACoB,WAAX,CAAuB,CACtBsB,QAAQ,CAAE,IADY,CAEtBrB,OAAO,CAAE,CACRC,QAAQ,CAAE,CADF,CACK;AACbC,SAAS,CAAE,CAAE;AAFL,CAFa,CAMtBX,KAAK,CAAE,CAAC,GAAIZ,CAAAA,MAAM,CAAC2C,UAAX,EAAD,CANe,CAAvB,CAFM,CANe,CAAvB,CATM,CA2BN,GAAI3C,CAAAA,MAAM,CAACwC,SAAX,CAAqB,CACpBF,IAAI,CAAGpC,KAAK,CAACT,UAAN,EAAoB,EADP,CAEpB4B,OAAO,CAAE,CACRC,QAAQ,CAAE,CADF,CACK;AACbC,SAAS,CAAE,CAAE;AAFL,CAFW,CAMpBqB,QAAQ,CAAE,CAAEP,MAAM,CAAE,CAAV,CANU,CAArB,CAOG;AAlCG,CADU,CAAlB,CAFM,CAwCN,GAAIrC,CAAAA,MAAM,CAACkB,eAAX,CAA2B,CAAEoB,IAAI,CAAGpC,KAAK,CAACR,UAAN,EAAoB,EAA7B,CAA3B,CAxCM,CAyCN,GAAIM,CAAAA,MAAM,CAACoB,WAAX,CAAuB,CACtBsB,QAAQ,CAAE,IADY,CAEtBrB,OAAO,CAAE,CACRC,QAAQ,CAAE,CADF,CACK;AACbC,SAAS,CAAE,CAAE;AAFL,CAFa,CAMtBX,KAAK,CAAE,CAAC,GAAIZ,CAAAA,MAAM,CAACkB,eAAX,CAA2B,CAAEoB,IAAI,CAAGpC,KAAK,CAACP,UAAN,EAAoB,EAA7B,CAA3B,CAAD,CANe,CAAvB,CAzCM,CAiDN,GAAIK,CAAAA,MAAM,CAACoB,WAAX,CAAuB,CACtBsB,QAAQ,CAAE,IADY,CAEtBrB,OAAO,CAAE,CACRC,QAAQ,CAAE,CADF,CACK;AACbC,SAAS,CAAE,CAAE;AAFL,CAFa,CAMtBX,KAAK,CAAE,CAACiC,oBAAW/C,MAAX,CAAkBI,KAAK,CAACN,gBAAN,EAA0B,EAA5C,CAAD,CANe,CAAvB,CAOG;AAxDG,CAFoB,CAApB,CAAR,CA6DA,C,8BAqHF","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport CertID from \"./CertID.js\";\r\nimport Extension from \"./Extension.js\";\r\nimport Extensions from \"./Extensions.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class SingleResponse\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SingleResponse class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {CertID}\r\n\t\t * @desc certID\r\n\t\t */\r\n\t\tthis.certID = getParametersValue(parameters, \"certID\", SingleResponse.defaultValues(\"certID\"));\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @desc certStatus\r\n\t\t */\r\n\t\tthis.certStatus = getParametersValue(parameters, \"certStatus\", SingleResponse.defaultValues(\"certStatus\"));\r\n\t\t/**\r\n\t\t * @type {Date}\r\n\t\t * @desc thisUpdate\r\n\t\t */\r\n\t\tthis.thisUpdate = getParametersValue(parameters, \"thisUpdate\", SingleResponse.defaultValues(\"thisUpdate\"));\r\n\r\n\t\tif(\"nextUpdate\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Date}\r\n\t\t\t * @desc nextUpdate\r\n\t\t\t */\r\n\t\t\tthis.nextUpdate = getParametersValue(parameters, \"nextUpdate\", SingleResponse.defaultValues(\"nextUpdate\"));\r\n\r\n\t\tif(\"singleExtensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Extension>}\r\n\t\t\t * @desc singleExtensions\r\n\t\t\t */\r\n\t\t\tthis.singleExtensions = getParametersValue(parameters, \"singleExtensions\", SingleResponse.defaultValues(\"singleExtensions\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certID\":\r\n\t\t\t\treturn new CertID();\r\n\t\t\tcase \"certStatus\":\r\n\t\t\t\treturn {};\r\n\t\t\tcase \"thisUpdate\":\r\n\t\t\tcase \"nextUpdate\":\r\n\t\t\t\treturn new Date(0, 0, 0);\r\n\t\t\tcase \"singleExtensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SingleResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certID\":\r\n\t\t\t\t// noinspection OverlyComplexBooleanExpressionJS\r\n\t\t\t\treturn ((CertID.compareWithDefault(\"hashAlgorithm\", memberValue.hashAlgorithm)) &&\r\n\t\t\t\t\t\t(CertID.compareWithDefault(\"issuerNameHash\", memberValue.issuerNameHash)) &&\r\n\t\t\t\t\t\t(CertID.compareWithDefault(\"issuerKeyHash\", memberValue.issuerKeyHash)) &&\r\n\t\t\t\t\t\t(CertID.compareWithDefault(\"serialNumber\", memberValue.serialNumber)));\r\n\t\t\tcase \"certStatus\":\r\n\t\t\t\treturn (Object.keys(memberValue).length === 0);\r\n\t\t\tcase \"thisUpdate\":\r\n\t\t\tcase \"nextUpdate\":\r\n\t\t\t\treturn (memberValue === SingleResponse.defaultValues(memberName));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SingleResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * SingleResponse ::= SEQUENCE {\r\n\t *    certID                       CertID,\r\n\t *    certStatus                   CertStatus,\r\n\t *    thisUpdate                   GeneralizedTime,\r\n\t *    nextUpdate         [0]       EXPLICIT GeneralizedTime OPTIONAL,\r\n\t *    singleExtensions   [1]       EXPLICIT Extensions OPTIONAL }\r\n\t *\r\n\t * CertStatus ::= CHOICE {\r\n\t *    good        [0]     IMPLICIT NULL,\r\n\t *    revoked     [1]     IMPLICIT RevokedInfo,\r\n\t *    unknown     [2]     IMPLICIT UnknownInfo }\r\n\t *\r\n\t * RevokedInfo ::= SEQUENCE {\r\n\t *    revocationTime              GeneralizedTime,\r\n\t *    revocationReason    [0]     EXPLICIT CRLReason OPTIONAL }\r\n\t *\r\n\t * UnknownInfo ::= NULL\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [certID]\r\n\t\t * @property {string} [certStatus]\r\n\t\t * @property {string} [thisUpdate]\r\n\t\t * @property {string} [nextUpdate]\r\n\t\t * @property {string} [singleExtensions]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tCertID.schema(names.certID || {}),\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\t\t\tname: (names.certStatus || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tlenBlockLength: 1 // The length contains one byte 0x00\r\n\t\t\t\t\t\t}), // IMPLICIT NULL (no \"valueBlock\")\r\n\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\tname: (names.certStatus || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\tnew asn1js.GeneralizedTime(),\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\toptional: true,\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: [new asn1js.Enumerated()]\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\t\t\tname: (names.certStatus || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tlenBlock: { length: 1 }\r\n\t\t\t\t\t\t}) // IMPLICIT NULL (no \"valueBlock\")\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.GeneralizedTime({ name: (names.thisUpdate || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.GeneralizedTime({ name: (names.nextUpdate || \"\") })]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [Extensions.schema(names.singleExtensions || {})]\r\n\t\t\t\t}) // EXPLICIT SEQUENCE value\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"certID\",\r\n\t\t\t\"certStatus\",\r\n\t\t\t\"thisUpdate\",\r\n\t\t\t\"nextUpdate\",\r\n\t\t\t\"singleExtensions\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSingleResponse.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcertID: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"certID\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tcertStatus: \"certStatus\",\r\n\t\t\t\t\tthisUpdate: \"thisUpdate\",\r\n\t\t\t\t\tnextUpdate: \"nextUpdate\",\r\n\t\t\t\t\tsingleExtensions: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName:\r\n\t\t\t\t\t\t\t\t\"singleExtensions\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SingleResponse\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.certID = new CertID({ schema: asn1.result.certID });\r\n\t\tthis.certStatus = asn1.result.certStatus;\r\n\t\tthis.thisUpdate = asn1.result.thisUpdate.toDate();\r\n\t\tif(\"nextUpdate\" in asn1.result)\r\n\t\t\tthis.nextUpdate = asn1.result.nextUpdate.toDate();\r\n\r\n\t\tif(\"singleExtensions\" in asn1.result)\r\n\t\t\tthis.singleExtensions = Array.from(asn1.result.singleExtensions.valueBlock.value, element => new Extension({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create value array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(this.certID.toSchema());\r\n\t\toutputArray.push(this.certStatus);\r\n\t\toutputArray.push(new asn1js.GeneralizedTime({ valueDate: this.thisUpdate }));\r\n\t\tif(\"nextUpdate\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [new asn1js.GeneralizedTime({ valueDate: this.nextUpdate })]\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\tif(\"singleExtensions\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\t\tvalue: Array.from(this.singleExtensions, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tcertID: this.certID.toJSON(),\r\n\t\t\tcertStatus: this.certStatus.toJSON(),\r\n\t\t\tthisUpdate: this.thisUpdate\r\n\t\t};\r\n\r\n\t\tif(\"nextUpdate\" in this)\r\n\t\t\t_object.nextUpdate = this.nextUpdate;\r\n\r\n\t\tif(\"singleExtensions\" in this)\r\n\t\t\t_object.singleExtensions = Array.from(this.singleExtensions, element => element.toJSON());\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"SingleResponse.js"}