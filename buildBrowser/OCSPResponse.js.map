{"version":3,"sources":["../src/OCSPResponse.js"],"names":["OCSPResponse","parameters","responseStatus","defaultValues","responseBytes","fromSchema","schema","asn1","asn1js","compareSchema","verified","Error","result","ResponseBytes","outputArray","push","Constructed","idBlock","tagClass","tagNumber","value","toSchema","Sequence","_object","toJSON","certificate","issuerCertificate","basicResponse","isForCertificate","status","responseType","asn1Basic","fromBER","response","valueBlock","valueHex","BasicOCSPResponse","ex","getCertificateStatus","privateKey","hashAlgorithm","sign","Promise","reject","certs","verify","memberName","Enumerated","memberValue","isEqual","compareWithDefault","names","name","blockName","optional"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport ResponseBytes from \"./ResponseBytes.js\";\r\nimport BasicOCSPResponse from \"./BasicOCSPResponse.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class OCSPResponse\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OCSPResponse class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Enumerated}\r\n\t\t * @desc responseStatus\r\n\t\t */\r\n\t\tthis.responseStatus = getParametersValue(parameters, \"responseStatus\", OCSPResponse.defaultValues(\"responseStatus\"));\r\n\r\n\t\tif(\"responseBytes\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ResponseBytes}\r\n\t\t\t * @desc responseBytes\r\n\t\t\t */\r\n\t\t\tthis.responseBytes = getParametersValue(parameters, \"responseBytes\", OCSPResponse.defaultValues(\"responseBytes\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"responseStatus\":\r\n\t\t\t\treturn new asn1js.Enumerated();\r\n\t\t\tcase \"responseBytes\":\r\n\t\t\t\treturn new ResponseBytes();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OCSPResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"responseStatus\":\r\n\t\t\t\treturn (memberValue.isEqual(OCSPResponse.defaultValues(memberName)));\r\n\t\t\tcase \"responseBytes\":\r\n\t\t\t\treturn ((ResponseBytes.compareWithDefault(\"responseType\", memberValue.responseType)) &&\r\n\t\t\t\t\t\t(ResponseBytes.compareWithDefault(\"response\", memberValue.response)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OCSPResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * OCSPResponse ::= SEQUENCE {\r\n\t *    responseStatus         OCSPResponseStatus,\r\n\t *    responseBytes          [0] EXPLICIT ResponseBytes OPTIONAL }\r\n\t *\r\n\t * OCSPResponseStatus ::= ENUMERATED {\r\n\t *    successful            (0),  -- Response has valid confirmations\r\n\t *    malformedRequest      (1),  -- Illegal confirmation request\r\n\t *    internalError         (2),  -- Internal error in issuer\r\n\t *    tryLater              (3),  -- Try again later\r\n\t *    -- (4) is not used\r\n\t *    sigRequired           (5),  -- Must sign the request\r\n\t *    unauthorized          (6)   -- Request unauthorized\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [responseStatus]\r\n\t\t * @property {string} [responseBytes]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"OCSPResponse\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Enumerated({ name: (names.responseStatus || \"responseStatus\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tResponseBytes.schema(names.responseBytes || {\r\n\t\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\t\tblockName: \"responseBytes\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"responseStatus\",\r\n\t\t\t\"responseBytes\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOCSPResponse.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OCSPResponse\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.responseStatus = asn1.result.responseStatus;\r\n\t\tif(\"responseBytes\" in asn1.result)\r\n\t\t\tthis.responseBytes = new ResponseBytes({ schema: asn1.result.responseBytes });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(this.responseStatus);\r\n\t\tif(\"responseBytes\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [this.responseBytes.toSchema()]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tresponseStatus: this.responseStatus.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"responseBytes\" in this)\r\n\t\t\t_object.responseBytes = this.responseBytes.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get OCSP response status for specific certificate\r\n\t * @param {Certificate} certificate\r\n\t * @param {Certificate} issuerCertificate\r\n\t * @returns {*}\r\n\t */\r\n\tgetCertificateStatus(certificate, issuerCertificate)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet basicResponse;\r\n\r\n\t\tconst result = {\r\n\t\t\tisForCertificate: false,\r\n\t\t\tstatus: 2 // 0 = good, 1 = revoked, 2 = unknown\r\n\t\t};\r\n\t\t//endregion\r\n\r\n\t\t//region Check that \"ResponseBytes\" contain \"OCSP_BASIC_RESPONSE\"\r\n\t\tif((\"responseBytes\" in this) === false)\r\n\t\t\treturn result;\r\n\r\n\t\tif(this.responseBytes.responseType !== \"1.3.6.1.5.5.7.48.1.1\") // id-pkix-ocsp-basic\r\n\t\t\treturn result;\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\tconst asn1Basic = asn1js.fromBER(this.responseBytes.response.valueBlock.valueHex);\r\n\t\t\tbasicResponse = new BasicOCSPResponse({ schema: asn1Basic.result });\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\treturn basicResponse.getCertificateStatus(certificate, issuerCertificate);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Make a signature for current OCSP Response\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1\r\n\t * @returns {Promise}\r\n\t */\r\n\tsign(privateKey, hashAlgorithm)\r\n\t{\r\n\t\t//region Check that ResponseData has type BasicOCSPResponse and sign it\r\n\t\tif(this.responseBytes.responseType === \"1.3.6.1.5.5.7.48.1.1\")\r\n\t\t{\r\n\t\t\tconst asn1 = asn1js.fromBER(this.responseBytes.response.valueBlock.valueHex);\r\n\t\t\tconst basicResponse = new BasicOCSPResponse({ schema: asn1.result });\r\n\r\n\t\t\treturn basicResponse.sign(privateKey, hashAlgorithm);\r\n\t\t}\r\n\r\n\t\treturn Promise.reject(`Unknown ResponseBytes type: ${this.responseBytes.responseType}`);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify current OCSP Response\r\n\t * @param {Certificate|null} issuerCertificate In order to decrease size of resp issuer cert could be ommited. In such case you need manually provide it.\r\n\t * @returns {Promise}\r\n\t */\r\n\tverify(issuerCertificate = null)\r\n\t{\r\n\t\t//region Check that ResponseBytes exists in the object\r\n\t\tif((\"responseBytes\" in this) === false)\r\n\t\t\treturn Promise.reject(\"Empty ResponseBytes field\");\r\n\t\t//endregion\r\n\r\n\t\t//region Check that ResponceData has type BasicOCSPResponse and verify it\r\n\t\tif(this.responseBytes.responseType === \"1.3.6.1.5.5.7.48.1.1\")\r\n\t\t{\r\n\t\t\tconst asn1 = asn1js.fromBER(this.responseBytes.response.valueBlock.valueHex);\r\n\t\t\tconst basicResponse = new BasicOCSPResponse({ schema: asn1.result });\r\n\r\n\t\t\tif(issuerCertificate !== null)\r\n\t\t\t{\r\n\t\t\t\tif((\"certs\" in basicResponse) === false)\r\n\t\t\t\t\tbasicResponse.certs = [];\r\n\t\t\t\t\r\n\t\t\t\tbasicResponse.certs.push(issuerCertificate);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn basicResponse.verify();\r\n\t\t}\r\n\r\n\t\treturn Promise.reject(`Unknown ResponseBytes type: ${this.responseBytes.responseType}`);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"OCSPResponse.js"}