{"version":3,"sources":["../src/OtherKeyAttribute.js"],"names":["OtherKeyAttribute","parameters","keyAttrId","defaultValues","keyAttr","fromSchema","schema","asn1","asn1js","compareSchema","names","verified","Error","result","valueBlock","toString","outputArray","push","ObjectIdentifier","value","toSchema","Sequence","_object","toJSON","memberName","memberValue","Object","keys","length","optional","name","blockName","Any"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class OtherKeyAttribute\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OtherKeyAttribute class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc keyAttrId\r\n\t\t */\r\n\t\tthis.keyAttrId = getParametersValue(parameters, \"keyAttrId\", OtherKeyAttribute.defaultValues(\"keyAttrId\"));\r\n\r\n\t\tif(\"keyAttr\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {*}\r\n\t\t\t * @desc keyAttr\r\n\t\t\t */\r\n\t\t\tthis.keyAttr = getParametersValue(parameters, \"keyAttr\", OtherKeyAttribute.defaultValues(\"keyAttr\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"keyAttrId\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"keyAttr\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OtherKeyAttribute class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"keyAttrId\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"keyAttr\":\r\n\t\t\t\treturn (Object.keys(memberValue).length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OtherKeyAttribute class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * OtherKeyAttribute ::= SEQUENCE {\r\n\t *    keyAttrId OBJECT IDENTIFIER,\r\n\t *    keyAttr ANY DEFINED BY keyAttrId OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [optional]\r\n\t\t * @property {string} [keyAttrId]\r\n\t\t * @property {string} [keyAttr]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\toptional: (names.optional || true),\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.keyAttrId || \"\") }),\r\n\t\t\t\tnew asn1js.Any({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.keyAttr || \"\")\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"keyAttrId\",\r\n\t\t\t\"keyAttr\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOtherKeyAttribute.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tkeyAttrId: \"keyAttrId\",\r\n\t\t\t\t\tkeyAttr: \"keyAttr\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OtherKeyAttribute\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.keyAttrId = asn1.result.keyAttrId.valueBlock.toString();\r\n\r\n\t\tif(\"keyAttr\" in asn1.result)\r\n\t\t\tthis.keyAttr = asn1.result.keyAttr;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.keyAttrId }));\r\n\r\n\t\tif(\"keyAttr\" in this)\r\n\t\t\toutputArray.push(this.keyAttr.toSchema());\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tkeyAttrId: this.keyAttrId\r\n\t\t};\r\n\r\n\t\tif(\"keyAttr\" in this)\r\n\t\t\t_object.keyAttr = this.keyAttr.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"OtherKeyAttribute.js"}