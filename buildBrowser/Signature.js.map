{"version":3,"sources":["../src/Signature.js"],"names":["Signature","parameters","signatureAlgorithm","defaultValues","signature","certs","fromSchema","schema","asn1","asn1js","compareSchema","names","blockName","verified","Error","AlgorithmIdentifier","result","Array","from","element","Certificate","outputArray","push","toSchema","Constructed","optional","idBlock","tagClass","tagNumber","value","Sequence","_object","toJSON","memberName","BitString","memberValue","algorithmId","isEqual","length","name","Repeated"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport Certificate from \"./Certificate.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class Signature\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Signature class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", Signature.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @desc signature\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", Signature.defaultValues(\"signature\"));\r\n\r\n\t\tif(\"certs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Certificate>}\r\n\t\t\t * @desc certs\r\n\t\t\t */\r\n\t\t\tthis.certs = getParametersValue(parameters, \"certs\", Signature.defaultValues(\"certs\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Signature class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn (memberValue.isEqual(Signature.defaultValues(memberName)));\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Signature class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * Signature       ::=     SEQUENCE {\r\n\t *    signatureAlgorithm      AlgorithmIdentifier,\r\n\t *    signature               BIT STRING,\r\n\t *    certs               [0] EXPLICIT SEQUENCE OF Certificate OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [signatureAlgorithm]\r\n\t\t * @property {string} [signature]\r\n\t\t * @property {string} [certs]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.signature || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\t\tvalue: [new asn1js.Repeated({\r\n\t\t\t\t\t\t\t\tname: (names.certs || \"\"),\r\n\t\t\t\t\t\t\t\tvalue: Certificate.schema(names.certs || {})\r\n\t\t\t\t\t\t\t})]\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"signatureAlgorithm\",\r\n\t\t\t\"signature\",\r\n\t\t\t\"certs\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSignature.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tsignatureAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"signatureAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsignature: \"signature\",\r\n\t\t\t\t\tcerts: \"certs\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for Signature\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\r\n\t\tthis.signature = asn1.result.signature;\r\n\r\n\t\tif(\"certs\" in asn1.result)\r\n\t\t\tthis.certs = Array.from(asn1.result.certs, element => new Certificate({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array of output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(this.signatureAlgorithm.toSchema());\r\n\t\toutputArray.push(this.signature);\r\n\r\n\t\tif(\"certs\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\tvalue: Array.from(this.certs, element => element.toSchema())\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n\t\t\tsignature: this.signature.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"certs\" in this)\r\n\t\t\t_object.certs = Array.from(this.certs, element => element.toJSON());\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"Signature.js"}