{"version":3,"sources":["../src/CertificateSet.js"],"names":["CertificateSet","parameters","certificates","defaultValues","fromSchema","schema","asn1","asn1js","compareSchema","verified","Error","Array","from","result","element","initialTagNumber","idBlock","tagNumber","tagClass","Certificate","elementSequence","Sequence","value","valueBlock","AttributeCertificateV1","AttributeCertificateV2","OtherCertificateFormat","Set","toSchema","Constructed","toJSON","memberName","names","name","blockName","Repeated","Choice","Any"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport Certificate from \"./Certificate.js\";\r\nimport AttributeCertificateV1 from \"./AttributeCertificateV1.js\";\r\nimport AttributeCertificateV2 from \"./AttributeCertificateV2.js\";\r\nimport OtherCertificateFormat from \"./OtherCertificateFormat.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class CertificateSet\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CertificateSet class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array}\r\n\t\t * @desc certificates\r\n\t\t */\r\n\t\tthis.certificates = getParametersValue(parameters, \"certificates\", CertificateSet.defaultValues(\"certificates\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certificates\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Attribute class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * CertificateSet ::= SET OF CertificateChoices\r\n\t *\r\n\t * CertificateChoices ::= CHOICE {\r\n\t *    certificate Certificate,\r\n\t *    extendedCertificate [0] IMPLICIT ExtendedCertificate,  -- Obsolete\r\n\t *    v1AttrCert [1] IMPLICIT AttributeCertificateV1,        -- Obsolete\r\n\t *    v2AttrCert [2] IMPLICIT AttributeCertificateV2,\r\n\t *    other [3] IMPLICIT OtherCertificateFormat }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (\r\n\t\t\tnew asn1js.Set({\r\n\t\t\t\tname: (names.blockName || \"\"),\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\tname: (names.certificates || \"certificates\"),\r\n\t\t\t\t\t\tvalue: new asn1js.Choice({\r\n\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\tCertificate.schema(),\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\t\t\tnew asn1js.Any()\r\n\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t}), // JUST A STUB\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: AttributeCertificateV1.schema().valueBlock.value\r\n\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: AttributeCertificateV2.schema().valueBlock.value\r\n\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 3 // [3]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: OtherCertificateFormat.schema().valueBlock.value\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"certificates\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertificateSet.schema()\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CertificateSet\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.certificates = Array.from(asn1.result.certificates, element =>\r\n\t\t{\r\n\t\t\tconst initialTagNumber = element.idBlock.tagNumber;\r\n\r\n\t\t\tif(element.idBlock.tagClass === 1)\r\n\t\t\t\treturn new Certificate({ schema: element });\r\n\t\t\t\r\n\t\t\t//region Making \"Sequence\" from \"Constructed\" value\r\n\t\t\tconst elementSequence = new asn1js.Sequence({\r\n\t\t\t\tvalue: element.valueBlock.value\r\n\t\t\t});\r\n\t\t\t//endregion\r\n\r\n\t\t\tswitch(initialTagNumber)\r\n\t\t\t{\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\treturn new AttributeCertificateV1({ schema: elementSequence });\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\treturn new AttributeCertificateV2({ schema: elementSequence });\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\treturn new OtherCertificateFormat({ schema: elementSequence });\r\n\t\t\t\tcase 0:\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn element;\r\n\t\t});\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Set({\r\n\t\t\tvalue: Array.from(this.certificates, element =>\r\n\t\t\t{\r\n\t\t\t\tswitch(true)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase (element instanceof Certificate):\r\n\t\t\t\t\t\treturn element.toSchema();\r\n\t\t\t\t\tcase (element instanceof AttributeCertificateV1):\r\n\t\t\t\t\t\treturn new asn1js.Constructed({\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: element.toSchema().valueBlock.value\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\tcase (element instanceof AttributeCertificateV2):\r\n\t\t\t\t\t\treturn new asn1js.Constructed({\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: element.toSchema().valueBlock.value\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\tcase (element instanceof OtherCertificateFormat):\r\n\t\t\t\t\t\treturn new asn1js.Constructed({\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\t\t\t\ttagNumber: 3 // [3]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: element.toSchema().valueBlock.value\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn element;\r\n\t\t\t})\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tcertificates: Array.from(this.certificates, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"CertificateSet.js"}