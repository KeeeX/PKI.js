{"version":3,"sources":["../src/NameConstraints.js"],"names":["NameConstraints","parameters","permittedSubtrees","defaultValues","excludedSubtrees","fromSchema","schema","asn1","asn1js","compareSchema","names","verified","Error","result","Array","from","element","GeneralSubtree","outputArray","push","Constructed","optional","idBlock","tagClass","tagNumber","value","Sequence","toSchema","object","toJSON","memberName","name","blockName","Repeated"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport GeneralSubtree from \"./GeneralSubtree.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class NameConstraints\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for NameConstraints class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\tif(\"permittedSubtrees\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<GeneralSubtree>}\r\n\t\t\t * @desc permittedSubtrees\r\n\t\t\t */\r\n\t\t\tthis.permittedSubtrees = getParametersValue(parameters, \"permittedSubtrees\", NameConstraints.defaultValues(\"permittedSubtrees\"));\r\n\r\n\t\tif(\"excludedSubtrees\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<GeneralSubtree>}\r\n\t\t\t * @desc excludedSubtrees\r\n\t\t\t */\r\n\t\t\tthis.excludedSubtrees = getParametersValue(parameters, \"excludedSubtrees\", NameConstraints.defaultValues(\"excludedSubtrees\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"permittedSubtrees\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"excludedSubtrees\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for NameConstraints class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * NameConstraints ::= SEQUENCE {\r\n\t *    permittedSubtrees       [0]     GeneralSubtrees OPTIONAL,\r\n\t *    excludedSubtrees        [1]     GeneralSubtrees OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [permittedSubtrees]\r\n\t\t * @property {string} [excludedSubtrees]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.permittedSubtrees || \"\"),\r\n\t\t\t\t\t\t\tvalue: GeneralSubtree.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.excludedSubtrees || \"\"),\r\n\t\t\t\t\t\t\tvalue: GeneralSubtree.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"permittedSubtrees\",\r\n\t\t\t\"excludedSubtrees\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tNameConstraints.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tpermittedSubtrees: \"permittedSubtrees\",\r\n\t\t\t\t\texcludedSubtrees: \"excludedSubtrees\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for NameConstraints\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"permittedSubtrees\" in asn1.result)\r\n\t\t\tthis.permittedSubtrees = Array.from(asn1.result.permittedSubtrees, element => new GeneralSubtree({ schema: element }));\r\n\r\n\t\tif(\"excludedSubtrees\" in asn1.result)\r\n\t\t\tthis.excludedSubtrees = Array.from(asn1.result.excludedSubtrees, element => new GeneralSubtree({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif(\"permittedSubtrees\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [new asn1js.Sequence({\r\n\t\t\t\t\tvalue: Array.from(this.permittedSubtrees, element => element.toSchema())\r\n\t\t\t\t})]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"excludedSubtrees\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [new asn1js.Sequence({\r\n\t\t\t\t\tvalue: Array.from(this.excludedSubtrees, element => element.toSchema())\r\n\t\t\t\t})]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {};\r\n\t\t\r\n\t\tif(\"permittedSubtrees\" in this)\r\n\t\t\tobject.permittedSubtrees = Array.from(this.permittedSubtrees, element => element.toJSON());\r\n\r\n\t\tif(\"excludedSubtrees\" in this)\r\n\t\t\tobject.excludedSubtrees = Array.from(this.excludedSubtrees, element => element.toJSON());\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"NameConstraints.js"}