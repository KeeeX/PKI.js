{"version":3,"sources":["../src/PKIStatusInfo.js"],"names":["PKIStatusInfo","parameters","status","defaultValues","statusStrings","failInfo","fromSchema","schema","asn1","asn1js","compareSchema","names","verified","Error","_status","result","valueBlock","isHexOnly","valueDec","outputArray","push","Integer","value","Sequence","optional","_object","Array","from","element","toJSON","memberName","BitString","memberValue","length","isEqual","name","blockName","Repeated","Utf8String"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3161\r\n */\r\nexport default class PKIStatusInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PKIStatusInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc status\r\n\t\t */\r\n\t\tthis.status = getParametersValue(parameters, \"status\", PKIStatusInfo.defaultValues(\"status\"));\r\n\r\n\t\tif(\"statusStrings\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Utf8String>}\r\n\t\t\t * @desc statusStrings\r\n\t\t\t */\r\n\t\t\tthis.statusStrings = getParametersValue(parameters, \"statusStrings\", PKIStatusInfo.defaultValues(\"statusStrings\"));\r\n\r\n\t\tif(\"failInfo\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {BitString}\r\n\t\t\t * @desc failInfo\r\n\t\t\t */\r\n\t\t\tthis.failInfo = getParametersValue(parameters, \"failInfo\", PKIStatusInfo.defaultValues(\"failInfo\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"status\":\r\n\t\t\t\treturn 2;\r\n\t\t\tcase \"statusStrings\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"failInfo\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PKIStatusInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"status\":\r\n\t\t\t\treturn (memberValue === PKIStatusInfo.defaultValues(memberName));\r\n\t\t\tcase \"statusStrings\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tcase \"failInfo\":\r\n\t\t\t\treturn (memberValue.isEqual(PKIStatusInfo.defaultValues(memberName)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PKIStatusInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PKIStatusInfo ::= SEQUENCE {\r\n\t *    status        PKIStatus,\r\n\t *    statusString  PKIFreeText     OPTIONAL,\r\n\t *    failInfo      PKIFailureInfo  OPTIONAL  }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [status]\r\n\t\t * @property {string} [statusStrings]\r\n\t\t * @property {string} [failInfo]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.status || \"\") }),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.statusStrings || \"\"),\r\n\t\t\t\t\t\t\tvalue: new asn1js.Utf8String()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.BitString({\r\n\t\t\t\t\tname: (names.failInfo || \"\"),\r\n\t\t\t\t\toptional: true\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"status\",\r\n\t\t\t\"statusStrings\",\r\n\t\t\t\"failInfo\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPKIStatusInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tstatus: \"status\",\r\n\t\t\t\t\tstatusStrings: \"statusStrings\",\r\n\t\t\t\t\tfailInfo: \"failInfo\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PKIStatusInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tconst _status = asn1.result.status;\r\n\r\n\t\tif((_status.valueBlock.isHexOnly === true) ||\r\n\t\t\t(_status.valueBlock.valueDec < 0) ||\r\n\t\t\t(_status.valueBlock.valueDec > 5))\r\n\t\t\tthrow new Error(\"PKIStatusInfo \\\"status\\\" has invalid value\");\r\n\r\n\t\tthis.status = _status.valueBlock.valueDec;\r\n\r\n\t\tif(\"statusStrings\" in asn1.result)\r\n\t\t\tthis.statusStrings = asn1.result.statusStrings;\r\n\t\tif(\"failInfo\" in asn1.result)\r\n\t\t\tthis.failInfo = asn1.result.failInfo;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array of output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.status }));\r\n\r\n\t\tif(\"statusStrings\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tvalue: this.statusStrings\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\tif(\"failInfo\" in this)\r\n\t\t\toutputArray.push(this.failInfo);\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tstatus: this.status\r\n\t\t};\r\n\r\n\t\tif(\"statusStrings\" in this)\r\n\t\t\t_object.statusStrings = Array.from(this.statusStrings, element => element.toJSON());\r\n\r\n\t\tif(\"failInfo\" in this)\r\n\t\t\t_object.failInfo = this.failInfo.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"PKIStatusInfo.js"}