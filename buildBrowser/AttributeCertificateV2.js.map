{"version":3,"sources":["../src/AttributeCertificateV2.js"],"names":["ObjectDigestInfo","parameters","digestedObjectType","defaultValues","otherObjectTypeID","digestAlgorithm","objectDigest","fromSchema","schema","asn1","asn1js","compareSchema","names","blockName","verified","Error","result","AlgorithmIdentifier","Sequence","value","push","toSchema","toJSON","memberName","Enumerated","ObjectIdentifier","BitString","name","optional","V2Form","issuerName","baseCertificateID","objectDigestInfo","GeneralNames","IssuerSerial","valueBlock","Constructed","idBlock","tagClass","tagNumber","Holder","entityName","AttributeCertificateInfoV2","version","holder","issuer","signature","serialNumber","attrCertValidityPeriod","attributes","issuerUniqueID","extensions","valueDec","AttCertValidityPeriod","Array","from","element","Attribute","Extensions","Integer","Choice","Repeated","AttributeCertificateV2","acinfo","signatureAlgorithm","signatureValue"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport GeneralNames from \"./GeneralNames.js\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\nimport Attribute from \"./Attribute.js\";\nimport Extensions from \"./Extensions.js\";\nimport { AttCertValidityPeriod, IssuerSerial } from \"./AttributeCertificateV1.js\";\n//**************************************************************************************\n/**\n * Class from RFC5755\n */\nexport class ObjectDigestInfo\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for ObjectDigestInfo class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {Enumerated}\n\t\t * @desc digestedObjectType\n\t\t */\n\t\tthis.digestedObjectType = getParametersValue(parameters, \"digestedObjectType\", ObjectDigestInfo.defaultValues(\"digestedObjectType\"));\n\t\t\n\t\tif(\"otherObjectTypeID\" in parameters)\n\t\t\t/**\n\t\t\t * @type {ObjectIdentifier}\n\t\t\t * @desc otherObjectTypeID\n\t\t\t */\n\t\t\tthis.otherObjectTypeID = getParametersValue(parameters, \"otherObjectTypeID\", ObjectDigestInfo.defaultValues(\"otherObjectTypeID\"));\n\t\t\n\t\t/**\n\t\t * @type {AlgorithmIdentifier}\n\t\t * @desc digestAlgorithm\n\t\t */\n\t\tthis.digestAlgorithm = getParametersValue(parameters, \"digestAlgorithm\", ObjectDigestInfo.defaultValues(\"digestAlgorithm\"));\n\t\t/**\n\t\t * @type {BitString}\n\t\t * @desc objectDigest\n\t\t */\n\t\tthis.objectDigest = getParametersValue(parameters, \"objectDigest\", ObjectDigestInfo.defaultValues(\"objectDigest\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"digestedObjectType\":\n\t\t\t\treturn new asn1js.Enumerated();\n\t\t\tcase \"otherObjectTypeID\":\n\t\t\t\treturn new asn1js.ObjectIdentifier();\n\t\t\tcase \"digestAlgorithm\":\n\t\t\t\treturn new AlgorithmIdentifier();\n\t\t\tcase \"objectDigest\":\n\t\t\t\treturn new asn1js.BitString();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for ObjectDigestInfo class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * ObjectDigestInfo ::= SEQUENCE {\n\t *   digestedObjectType  ENUMERATED {\n\t *     publicKey            (0),\n\t *     publicKeyCert        (1),\n\t *     otherObjectTypes     (2) },\n\t *   -- otherObjectTypes MUST NOT\n\t *   -- be used in this profile\n\t *   otherObjectTypeID   OBJECT IDENTIFIER OPTIONAL,\n\t *   digestAlgorithm     AlgorithmIdentifier,\n\t *   objectDigest        BIT STRING\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [digestedObjectType]\n\t\t * @property {string} [otherObjectTypeID]\n\t\t * @property {string} [digestAlgorithm]\n\t\t * @property {string} [objectDigest]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.Enumerated({ name: (names.digestedObjectType || \"\") }),\n\t\t\t\tnew asn1js.ObjectIdentifier({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.otherObjectTypeID || \"\")\n\t\t\t\t}),\n\t\t\t\tAlgorithmIdentifier.schema(names.digestAlgorithm || {}),\n\t\t\t\tnew asn1js.BitString({ name: (names.objectDigest || \"\") }),\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"digestedObjectType\",\n\t\t\t\"otherObjectTypeID\",\n\t\t\t\"digestAlgorithm\",\n\t\t\t\"objectDigest\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tObjectDigestInfo.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tdigestedObjectType: \"digestedObjectType\",\n\t\t\t\t\totherObjectTypeID: \"otherObjectTypeID\",\n\t\t\t\t\tdigestAlgorithm: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"digestAlgorithm\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tobjectDigest: \"objectDigest\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ObjectDigestInfo\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tthis.digestedObjectType = asn1.result.digestedObjectType;\n\t\t\n\t\tif(\"otherObjectTypeID\" in asn1.result)\n\t\t\tthis.otherObjectTypeID = asn1.result.otherObjectTypeID;\n\t\t\n\t\tthis.digestAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.digestAlgorithm });\n\t\tthis.objectDigest = asn1.result.objectDigest;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\tconst result = new asn1js.Sequence({\n\t\t\tvalue: [this.digestedObjectType]\n\t\t});\n\t\t\n\t\tif(\"otherObjectTypeID\" in this)\n\t\t\tresult.value.push(this.otherObjectTypeID);\n\t\t\n\t\tresult.value.push(this.digestAlgorithm.toSchema());\n\t\tresult.value.push(this.objectDigest);\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst result = {\n\t\t\tdigestedObjectType: this.digestedObjectType.toJSON()\n\t\t};\n\t\t\n\t\tif(\"otherObjectTypeID\" in this)\n\t\t\tresult.otherObjectTypeID = this.otherObjectTypeID.toJSON();\n\t\t\n\t\tresult.digestAlgorithm = this.digestAlgorithm.toJSON();\n\t\tresult.objectDigest = this.objectDigest.toJSON();\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Class from RFC5755\n */\nexport class V2Form\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for V2Form class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\tif(\"issuerName\" in parameters)\n\t\t\t/**\n\t\t\t * @type {GeneralNames}\n\t\t\t * @desc issuerName\n\t\t\t */\n\t\t\tthis.issuerName = getParametersValue(parameters, \"issuerName\", V2Form.defaultValues(\"issuerName\"));\n\t\t\n\t\tif(\"baseCertificateID\" in parameters)\n\t\t\t/**\n\t\t\t * @type {IssuerSerial}\n\t\t\t * @desc baseCertificateID\n\t\t\t */\n\t\t\tthis.baseCertificateID = getParametersValue(parameters, \"baseCertificateID\", V2Form.defaultValues(\"baseCertificateID\"));\n\t\t\n\t\tif(\"objectDigestInfo\" in parameters)\n\t\t\t/**\n\t\t\t * @type {ObjectDigestInfo}\n\t\t\t * @desc objectDigestInfo\n\t\t\t */\n\t\t\tthis.objectDigestInfo = getParametersValue(parameters, \"objectDigestInfo\", V2Form.defaultValues(\"objectDigestInfo\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"issuerName\":\n\t\t\t\treturn new GeneralNames();\n\t\t\tcase \"baseCertificateID\":\n\t\t\t\treturn new IssuerSerial();\n\t\t\tcase \"objectDigestInfo\":\n\t\t\t\treturn new ObjectDigestInfo();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for V2Form class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * V2Form ::= SEQUENCE {\n\t *   issuerName            GeneralNames  OPTIONAL,\n\t *   baseCertificateID     [0] IssuerSerial  OPTIONAL,\n\t *   objectDigestInfo      [1] ObjectDigestInfo  OPTIONAL\n\t *     -- issuerName MUST be present in this profile\n\t *     -- baseCertificateID and objectDigestInfo MUST NOT\n\t *     -- be present in this profile\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [issuerName]\n\t\t * @property {string} [baseCertificateID]\n\t\t * @property {string} [objectDigestInfo]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tGeneralNames.schema({\n\t\t\t\t\tnames: {\n\t\t\t\t\t\tblockName: names.issuerName\n\t\t\t\t\t}\n\t\t\t\t}, true),\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.baseCertificateID || \"\"),\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3,\n\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: IssuerSerial.schema().valueBlock.value\n\t\t\t\t}),\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.objectDigestInfo || \"\"),\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3,\n\t\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: ObjectDigestInfo.schema().valueBlock.value\n\t\t\t\t})\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"issuerName\",\n\t\t\t\"baseCertificateID\",\n\t\t\t\"objectDigestInfo\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tV2Form.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tissuerName: \"issuerName\",\n\t\t\t\t\tbaseCertificateID: \"baseCertificateID\",\n\t\t\t\t\tobjectDigestInfo: \"objectDigestInfo\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for V2Form\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tif(\"issuerName\" in asn1.result)\n\t\t\tthis.issuerName = new GeneralNames({ schema: asn1.result.issuerName });\n\t\t\n\t\tif(\"baseCertificateID\" in asn1.result)\n\t\t{\n\t\t\tthis.baseCertificateID = new IssuerSerial({\n\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\tvalue: asn1.result.baseCertificateID.valueBlock.value\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t\t\n\t\tif(\"objectDigestInfo\" in asn1.result)\n\t\t{\n\t\t\tthis.objectDigestInfo = new ObjectDigestInfo({\n\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\tvalue: asn1.result.objectDigestInfo.valueBlock.value\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\tconst result = new asn1js.Sequence();\n\t\t\n\t\tif(\"issuerName\" in this)\n\t\t\tresult.valueBlock.value.push(this.issuerName.toSchema());\n\t\t\n\t\tif(\"baseCertificateID\" in this)\n\t\t{\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3,\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tvalue: this.baseCertificateID.toSchema().valueBlock.value\n\t\t\t}));\n\t\t}\n\t\t\n\t\tif(\"objectDigestInfo\" in this)\n\t\t{\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3,\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t},\n\t\t\t\tvalue: this.objectDigestInfo.toSchema().valueBlock.value\n\t\t\t}));\n\t\t}\n\t\t\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn result;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst result = {};\n\t\t\n\t\tif(\"issuerName\" in this)\n\t\t\tresult.issuerName = this.issuerName.toJSON();\n\t\t\n\t\tif(\"baseCertificateID\" in this)\n\t\t\tresult.baseCertificateID = this.baseCertificateID.toJSON();\n\t\t\n\t\tif(\"objectDigestInfo\" in this)\n\t\t\tresult.objectDigestInfo = this.objectDigestInfo.toJSON();\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Class from RFC5755\n */\nexport class Holder\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for Holder class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\tif(\"baseCertificateID\" in parameters)\n\t\t\t/**\n\t\t\t * @type {IssuerSerial}\n\t\t\t * @desc baseCertificateID\n\t\t\t */\n\t\t\tthis.baseCertificateID = getParametersValue(parameters, \"baseCertificateID\", Holder.defaultValues(\"baseCertificateID\"));\n\t\t\n\t\tif(\"entityName\" in parameters)\n\t\t\t/**\n\t\t\t * @type {GeneralNames}\n\t\t\t * @desc entityName\n\t\t\t */\n\t\t\tthis.entityName = getParametersValue(parameters, \"entityName\", Holder.defaultValues(\"entityName\"));\n\t\t\n\t\tif(\"objectDigestInfo\" in parameters)\n\t\t\t/**\n\t\t\t * @type {ObjectDigestInfo}\n\t\t\t * @desc objectDigestInfo\n\t\t\t */\n\t\t\tthis.objectDigestInfo = getParametersValue(parameters, \"objectDigestInfo\", Holder.defaultValues(\"objectDigestInfo\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"baseCertificateID\":\n\t\t\t\treturn new IssuerSerial();\n\t\t\tcase \"entityName\":\n\t\t\t\treturn new GeneralNames();\n\t\t\tcase \"objectDigestInfo\":\n\t\t\t\treturn new ObjectDigestInfo();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for Holder class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * Holder ::= SEQUENCE {\n\t *   baseCertificateID   [0] IssuerSerial OPTIONAL,\n\t *       -- the issuer and serial number of\n\t *       -- the holder's Public Key Certificate\n\t *   entityName          [1] GeneralNames OPTIONAL,\n\t *       -- the name of the claimant or role\n\t *   objectDigestInfo    [2] ObjectDigestInfo OPTIONAL\n\t *       -- used to directly authenticate the holder,\n\t *       -- for example, an executable\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [baseCertificateID]\n\t\t * @property {string} [entityName]\n\t\t * @property {string} [objectDigestInfo]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.baseCertificateID || \"\"),\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3,\n\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: IssuerSerial.schema().valueBlock.value\n\t\t\t\t}),\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.entityName || \"\"),\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3,\n\t\t\t\t\t\ttagNumber: 1 // [2]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: GeneralNames.schema().valueBlock.value\n\t\t\t\t}),\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.objectDigestInfo || \"\"),\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3,\n\t\t\t\t\t\ttagNumber: 2 // [2]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: ObjectDigestInfo.schema().valueBlock.value\n\t\t\t\t})\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"baseCertificateID\",\n\t\t\t\"entityName\",\n\t\t\t\"objectDigestInfo\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tHolder.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tbaseCertificateID: \"baseCertificateID\",\n\t\t\t\t\tentityName: \"entityName\",\n\t\t\t\t\tobjectDigestInfo: \"objectDigestInfo\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for Holder\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tif(\"baseCertificateID\" in asn1.result)\n\t\t{\n\t\t\tthis.baseCertificateID = new IssuerSerial({\n\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\tvalue: asn1.result.baseCertificateID.valueBlock.value\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t\t\n\t\tif(\"entityName\" in asn1.result)\n\t\t{\n\t\t\tthis.entityName = new GeneralNames({\n\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\tvalue: asn1.result.entityName.valueBlock.value\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t\t\n\t\tif(\"objectDigestInfo\" in asn1.result)\n\t\t{\n\t\t\tthis.objectDigestInfo = new ObjectDigestInfo({\n\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\tvalue: asn1.result.objectDigestInfo.valueBlock.value\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\tconst result = new asn1js.Sequence();\n\t\t\n\t\tif(\"baseCertificateID\" in this)\n\t\t{\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3,\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tvalue: this.baseCertificateID.toSchema().valueBlock.value\n\t\t\t}));\n\t\t}\n\t\t\n\t\tif(\"entityName\" in this)\n\t\t{\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3,\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t},\n\t\t\t\tvalue: this.entityName.toSchema().valueBlock.value\n\t\t\t}));\n\t\t}\n\t\t\n\t\tif(\"objectDigestInfo\" in this)\n\t\t{\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3,\n\t\t\t\t\ttagNumber: 2 // [2]\n\t\t\t\t},\n\t\t\t\tvalue: this.objectDigestInfo.toSchema().valueBlock.value\n\t\t\t}));\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst result = {};\n\t\t\n\t\tif(\"baseCertificateID\" in this)\n\t\t\tresult.baseCertificateID = this.baseCertificateID.toJSON();\n\t\t\n\t\tif(\"entityName\" in this)\n\t\t\tresult.entityName = this.entityName.toJSON();\n\t\t\n\t\tif(\"objectDigestInfo\" in this)\n\t\t\tresult.objectDigestInfo = this.objectDigestInfo.toJSON();\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Class from RFC5755\n */\nexport class AttributeCertificateInfoV2\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for AttributeCertificateInfoV2 class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {Number}\n\t\t * @desc version\n\t\t */\n\t\tthis.version = getParametersValue(parameters, \"version\", AttributeCertificateInfoV2.defaultValues(\"version\"));\n\t\t/**\n\t\t * @type {Holder}\n\t\t * @desc holder\n\t\t */\n\t\tthis.holder = getParametersValue(parameters, \"holder\", AttributeCertificateInfoV2.defaultValues(\"holder\"));\n\t\t/**\n\t\t * @type {GeneralNames|V2Form}\n\t\t * @desc issuer\n\t\t */\n\t\tthis.issuer = getParametersValue(parameters, \"issuer\", AttributeCertificateInfoV2.defaultValues(\"issuer\"));\n\t\t/**\n\t\t * @type {AlgorithmIdentifier}\n\t\t * @desc signature\n\t\t */\n\t\tthis.signature = getParametersValue(parameters, \"signature\", AttributeCertificateInfoV2.defaultValues(\"signature\"));\n\t\t/**\n\t\t * @type {Integer}\n\t\t * @desc serialNumber\n\t\t */\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", AttributeCertificateInfoV2.defaultValues(\"serialNumber\"));\n\t\t/**\n\t\t * @type {AttCertValidityPeriod}\n\t\t * @desc attrCertValidityPeriod\n\t\t */\n\t\tthis.attrCertValidityPeriod = getParametersValue(parameters, \"attrCertValidityPeriod\", AttributeCertificateInfoV2.defaultValues(\"attrCertValidityPeriod\"));\n\t\t/**\n\t\t * @type {Array.<Attribute>}\n\t\t * @desc attributes\n\t\t */\n\t\tthis.attributes = getParametersValue(parameters, \"attributes\", AttributeCertificateInfoV2.defaultValues(\"attributes\"));\n\t\t\n\t\tif(\"issuerUniqueID\" in parameters)\n\t\t\t/**\n\t\t\t * @type {BitString}\n\t\t\t * @desc issuerUniqueID\n\t\t\t */\n\t\t\tthis.issuerUniqueID = getParametersValue(parameters, \"issuerUniqueID\", AttributeCertificateInfoV2.defaultValues(\"issuerUniqueID\"));\n\t\t\n\t\tif(\"extensions\" in parameters)\n\t\t\t/**\n\t\t\t * @type {Extensions}\n\t\t\t * @desc extensions\n\t\t\t */\n\t\t\tthis.extensions = getParametersValue(parameters, \"extensions\", AttributeCertificateInfoV2.defaultValues(\"extensions\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"version\":\n\t\t\t\treturn 1;\n\t\t\tcase \"holder\":\n\t\t\t\treturn new Holder();\n\t\t\tcase \"issuer\":\n\t\t\t\treturn {};\n\t\t\tcase \"signature\":\n\t\t\t\treturn new AlgorithmIdentifier();\n\t\t\tcase \"serialNumber\":\n\t\t\t\treturn new asn1js.Integer();\n\t\t\tcase \"attrCertValidityPeriod\":\n\t\t\t\treturn new AttCertValidityPeriod();\n\t\t\tcase \"attributes\":\n\t\t\t\treturn [];\n\t\t\tcase \"issuerUniqueID\":\n\t\t\t\treturn new asn1js.BitString();\n\t\t\tcase \"extensions\":\n\t\t\t\treturn new Extensions();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for AttributeCertificateInfoV2 class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * AttributeCertificateInfoV2 ::= SEQUENCE {\n\t *   version                 AttCertVersion, -- version is v2\n\t *   holder                  Holder,\n\t *   issuer                  AttCertIssuer,\n\t *   signature               AlgorithmIdentifier,\n\t *   serialNumber            CertificateSerialNumber,\n\t *   attrCertValidityPeriod  AttCertValidityPeriod,\n\t *   attributes              SEQUENCE OF Attribute,\n\t *   issuerUniqueID          UniqueIdentifier OPTIONAL,\n\t *   extensions              Extensions OPTIONAL\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [issuer]\n\t\t * @property {string} [serialNumber]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\n\t\t\t\tHolder.schema(names.holder || {}),\n\t\t\t\tnew asn1js.Choice({\n\t\t\t\t\tvalue: [\n\t\t\t\t\t\tGeneralNames.schema({\n\t\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\t\tblockName: (names.issuer || \"\")\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\t\t\tname: (names.issuer || \"\"),\n\t\t\t\t\t\t\tidBlock: {\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tvalue: V2Form.schema().valueBlock.value\n\t\t\t\t\t\t})\n\t\t\t\t\t]\n\t\t\t\t}),\n\t\t\t\tAlgorithmIdentifier.schema(names.signature || {}),\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"\") }),\n\t\t\t\tAttCertValidityPeriod.schema(names.attrCertValidityPeriod || {}),\n\t\t\t\tnew asn1js.Sequence({\n\t\t\t\t\tname: (names.attributes || \"\"),\n\t\t\t\t\tvalue: [\n\t\t\t\t\t\tnew asn1js.Repeated({\n\t\t\t\t\t\t\tvalue: Attribute.schema()\n\t\t\t\t\t\t})\n\t\t\t\t\t]\n\t\t\t\t}),\n\t\t\t\tnew asn1js.BitString({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.issuerUniqueID || \"\")\n\t\t\t\t}),\n\t\t\t\tExtensions.schema(names.extensions || {}, true)\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"version\",\n\t\t\t\"holder\",\n\t\t\t\"issuer\",\n\t\t\t\"signature\",\n\t\t\t\"serialNumber\",\n\t\t\t\"attrCertValidityPeriod\",\n\t\t\t\"attributes\",\n\t\t\t\"issuerUniqueID\",\n\t\t\t\"extensions\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tAttributeCertificateInfoV2.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tversion: \"version\",\n\t\t\t\t\tholder: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"holder\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tissuer: \"issuer\",\n\t\t\t\t\tsignature: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"signature\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tserialNumber: \"serialNumber\",\n\t\t\t\t\tattrCertValidityPeriod: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"attrCertValidityPeriod\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tattributes: \"attributes\",\n\t\t\t\t\tissuerUniqueID: \"issuerUniqueID\",\n\t\t\t\t\textensions: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"extensions\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttributeCertificateInfoV2\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\n\t\tthis.holder = new Holder({ schema: asn1.result.holder });\n\t\t\n\t\tswitch(asn1.result.issuer.idBlock.tagClass)\n\t\t{\n\t\t\tcase 3: // V2Form\n\t\t\t\tthis.issuer = new V2Form({\n\t\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\t\tvalue: asn1.result.issuer.valueBlock.value\n\t\t\t\t\t})\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 1: // GeneralNames (should not be used)\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"Incorect value for 'issuer' in AttributeCertificateInfoV2\");\n\t\t}\n\t\t\n\t\tthis.signature = new AlgorithmIdentifier({ schema: asn1.result.signature });\n\t\tthis.serialNumber = asn1.result.serialNumber;\n\t\tthis.attrCertValidityPeriod = new AttCertValidityPeriod({ schema: asn1.result.attrCertValidityPeriod });\n\t\tthis.attributes = Array.from(asn1.result.attributes.valueBlock.value, element => new Attribute({ schema: element }));\n\t\t\n\t\tif(\"issuerUniqueID\" in asn1.result)\n\t\t\tthis.issuerUniqueID = asn1.result.issuerUniqueID;\n\t\t\n\t\tif(\"extensions\" in asn1.result)\n\t\t\tthis.extensions = new Extensions({ schema: asn1.result.extensions });\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\tconst result = new asn1js.Sequence({\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.Integer({ value: this.version }),\n\t\t\t\tthis.holder.toSchema(),\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: this.issuer.toSchema().valueBlock.value\n\t\t\t\t}),\n\t\t\t\tthis.signature.toSchema(),\n\t\t\t\tthis.serialNumber,\n\t\t\t\tthis.attrCertValidityPeriod.toSchema(),\n\t\t\t\tnew asn1js.Sequence({\n\t\t\t\t\tvalue: Array.from(this.attributes, element => element.toSchema())\n\t\t\t\t})\n\t\t\t]\n\t\t});\n\t\t\n\t\tif(\"issuerUniqueID\" in this)\n\t\t\tresult.valueBlock.value.push(this.issuerUniqueID);\n\t\t\n\t\tif(\"extensions\" in this)\n\t\t\tresult.valueBlock.value.push(this.extensions.toSchema());\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst result = {\n\t\t\tversion: this.version,\n\t\t\tholder: this.holder.toJSON(),\n\t\t\tissuer: this.issuer.toJSON(),\n\t\t\tsignature: this.signature.toJSON(),\n\t\t\tserialNumber: this.serialNumber.toJSON(),\n\t\t\tattrCertValidityPeriod: this.attrCertValidityPeriod.toJSON(),\n\t\t\tattributes: Array.from(this.attributes, element => element.toJSON())\n\t\t};\n\t\t\n\t\tif(\"issuerUniqueID\" in this)\n\t\t\tresult.issuerUniqueID = this.issuerUniqueID.toJSON();\n\t\t\n\t\tif(\"extensions\" in this)\n\t\t\tresult.extensions = this.extensions.toJSON();\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Class from RFC5755\n */\nexport default class AttributeCertificateV2\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for AttributeCertificateV2 class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {AttributeCertificateInfoV2}\n\t\t * @desc acinfo\n\t\t */\n\t\tthis.acinfo = getParametersValue(parameters, \"acinfo\", AttributeCertificateV2.defaultValues(\"acinfo\"));\n\t\t/**\n\t\t * @type {AlgorithmIdentifier}\n\t\t * @desc signatureAlgorithm\n\t\t */\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", AttributeCertificateV2.defaultValues(\"signatureAlgorithm\"));\n\t\t/**\n\t\t * @type {BitString}\n\t\t * @desc signatureValue\n\t\t */\n\t\tthis.signatureValue = getParametersValue(parameters, \"signatureValue\", AttributeCertificateV2.defaultValues(\"signatureValue\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"acinfo\":\n\t\t\t\treturn new AttributeCertificateInfoV2();\n\t\t\tcase \"signatureAlgorithm\":\n\t\t\t\treturn new AlgorithmIdentifier();\n\t\t\tcase \"signatureValue\":\n\t\t\t\treturn new asn1js.BitString();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for AttributeCertificateV2 class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * AttributeCertificate ::= SEQUENCE {\n\t *   acinfo               AttributeCertificateInfoV2,\n\t *   signatureAlgorithm   AlgorithmIdentifier,\n\t *   signatureValue       BIT STRING\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {Object} [acinfo]\n\t\t * @property {Object} [signatureAlgorithm]\n\t\t * @property {string} [signatureValue]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tAttributeCertificateInfoV2.schema(names.acinfo || {}),\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {}),\n\t\t\t\tnew asn1js.BitString({ name: (names.signatureValue || \"\") })\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"acinfo\",\n\t\t\t\"signatureAlgorithm\",\n\t\t\t\"signatureValue\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tAttributeCertificateV2.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tacinfo: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"acinfo\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tsignatureAlgorithm: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"signatureAlgorithm\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tsignatureValue: \"signatureValue\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttributeCertificateV2\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tthis.acinfo = new AttributeCertificateInfoV2({ schema: asn1.result.acinfo });\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\n\t\tthis.signatureValue = asn1.result.signatureValue;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\treturn (new asn1js.Sequence({\n\t\t\tvalue: [\n\t\t\t\tthis.acinfo.toSchema(),\n\t\t\t\tthis.signatureAlgorithm.toSchema(),\n\t\t\t\tthis.signatureValue\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\treturn {\n\t\t\tacinfo: this.acinfo.toJSON(),\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\n\t\t\tsignatureValue: this.signatureValue.toJSON()\n\t\t};\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n"],"file":"AttributeCertificateV2.js"}