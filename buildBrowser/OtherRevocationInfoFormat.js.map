{"version":3,"sources":["../src/OtherRevocationInfoFormat.js"],"names":["OtherRevocationInfoFormat","parameters","otherRevInfoFormat","defaultValues","otherRevInfo","fromSchema","schema","asn1","asn1js","compareSchema","verified","Error","result","valueBlock","toString","Sequence","value","ObjectIdentifier","object","Any","toJSON","memberName","names","name","blockName"],"mappings":"6IAAA,sDACA,gC,ohCACA;AACA;;MAGqBA,CAAAA,yB,yBAEpB;AACA;;;;IAKA,oCACA,IADYC,CAAAA,UACZ,2DADyB,EACzB,iDACC;AACA;;;KAIA,KAAKC,kBAAL,CAA0B,gCAAmBD,UAAnB,CAA+B,oBAA/B,CAAqDD,yBAAyB,CAACG,aAA1B,CAAwC,oBAAxC,CAArD,CAA1B,CACA;;;KAIA,KAAKC,YAAL,CAAoB,gCAAmBH,UAAnB,CAA+B,cAA/B,CAA+CD,yBAAyB,CAACG,aAA1B,CAAwC,cAAxC,CAA/C,CAApB,CACA;AAEA;AACA,GAAG,UAAYF,CAAAA,UAAf,CACC,KAAKI,UAAL,CAAgBJ,UAAU,CAACK,MAA3B,EACD;AACA,CACD;AACA;;;8DAgDA;AACA;;;8BAIWA,M,CACX,CACC;AACA,wBAAWA,MAAX,CAAmB,CAClB,oBADkB,CAElB,cAFkB,CAAnB,EAIA;AAEA;AACA,GAAMC,CAAAA,IAAI,CAAGC,MAAM,CAACC,aAAP,CAAqBH,MAArB,CACZA,MADY,CAEZN,yBAAyB,CAACM,MAA1B,EAFY,CAAb,CAKA,GAAGC,IAAI,CAACG,QAAL,GAAkB,KAArB,CACC,KAAM,IAAIC,CAAAA,KAAJ,CAAU,mFAAV,CAAN,CACD;AAEA;AACA,KAAKT,kBAAL,CAA0BK,IAAI,CAACK,MAAL,CAAYV,kBAAZ,CAA+BW,UAA/B,CAA0CC,QAA1C,EAA1B,CACA,KAAKV,YAAL,CAAoBG,IAAI,CAACK,MAAL,CAAYR,YAAhC,CACA;AACA,CACD;AACA;;;+CAKA,CACC;AACA,MAAQ,IAAII,CAAAA,MAAM,CAACO,QAAX,CAAoB,CAC3BC,KAAK,CAAE,CACN,GAAIR,CAAAA,MAAM,CAACS,gBAAX,CAA4B,CAAED,KAAK,CAAE,KAAKd,kBAAd,CAA5B,CADM,CAEN,KAAKE,YAFC,CADoB,CAApB,CAAR,CAMA;AACA,CACD;AACA;;;2CAKA,CACC,GAAMc,CAAAA,MAAM,CAAG,CACdhB,kBAAkB,CAAE,KAAKA,kBADX,CAAf,CAIA,GAAG,EAAE,KAAKE,YAAL,WAA6BI,CAAAA,MAAM,CAACW,GAAtC,CAAH,CACCD,MAAM,CAACd,YAAP,CAAsB,KAAKA,YAAL,CAAkBgB,MAAlB,EAAtB,CAED,MAAOF,CAAAA,MAAP,CACA,CACD;sDAzGqBG,U,CACrB,CACC,OAAOA,UAAP,EAEC,IAAK,oBAAL,CACC,MAAO,EAAP,CACD,IAAK,cAAL,CACC,MAAO,IAAIb,CAAAA,MAAM,CAACW,GAAX,EAAP,CACD,QACC,KAAM,IAAIR,CAAAA,KAAJ,oEAAsEU,UAAtE,EAAN,CAPF,CASA,CACD;AACA;;;;;;;;;;;;2CAcA,IADcpB,CAAAA,UACd,2DAD2B,EAC3B,CACC;;;;;KAMA,GAAMqB,CAAAA,KAAK,CAAG,gCAAmBrB,UAAnB,CAA+B,OAA/B,CAAwC,EAAxC,CAAd,CAEA,MAAQ,IAAIO,CAAAA,MAAM,CAACO,QAAX,CAAoB,CAC3BQ,IAAI,CAAGD,KAAK,CAACE,SAAN,EAAmB,EADC,CAE3BR,KAAK,CAAE,CACN,GAAIR,CAAAA,MAAM,CAACS,gBAAX,CAA4B,CAAEM,IAAI,CAAGD,KAAK,CAACpB,kBAAN,EAA4B,oBAArC,CAA5B,CADM,CAEN,GAAIM,CAAAA,MAAM,CAACW,GAAX,CAAe,CAAEI,IAAI,CAAGD,KAAK,CAAClB,YAAN,EAAsB,cAA/B,CAAf,CAFM,CAFoB,CAApB,CAAR,CAOA,C,yCAgEF","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class OtherRevocationInfoFormat\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OtherRevocationInfoFormat class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc otherRevInfoFormat\r\n\t\t */\r\n\t\tthis.otherRevInfoFormat = getParametersValue(parameters, \"otherRevInfoFormat\", OtherRevocationInfoFormat.defaultValues(\"otherRevInfoFormat\"));\r\n\t\t/**\r\n\t\t * @type {Any}\r\n\t\t * @desc otherRevInfo\r\n\t\t */\r\n\t\tthis.otherRevInfo = getParametersValue(parameters, \"otherRevInfo\", OtherRevocationInfoFormat.defaultValues(\"otherRevInfo\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"otherRevInfoFormat\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"otherRevInfo\":\r\n\t\t\t\treturn new asn1js.Any();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OtherRevocationInfoFormat class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * OtherCertificateFormat ::= SEQUENCE {\r\n\t *    otherRevInfoFormat OBJECT IDENTIFIER,\r\n\t *    otherRevInfo ANY DEFINED BY otherCertFormat }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [otherRevInfoFormat]\r\n\t\t * @property {string} [otherRevInfo]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.otherRevInfoFormat || \"otherRevInfoFormat\") }),\r\n\t\t\t\tnew asn1js.Any({ name: (names.otherRevInfo || \"otherRevInfo\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"otherRevInfoFormat\",\r\n\t\t\t\"otherRevInfo\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOtherRevocationInfoFormat.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OtherRevocationInfoFormat\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.otherRevInfoFormat = asn1.result.otherRevInfoFormat.valueBlock.toString();\r\n\t\tthis.otherRevInfo = asn1.result.otherRevInfo;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.otherRevInfoFormat }),\r\n\t\t\t\tthis.otherRevInfo\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\totherRevInfoFormat: this.otherRevInfoFormat\r\n\t\t};\r\n\r\n\t\tif(!(this.otherRevInfo instanceof asn1js.Any))\r\n\t\t\tobject.otherRevInfo = this.otherRevInfo.toJSON();\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"OtherRevocationInfoFormat.js"}