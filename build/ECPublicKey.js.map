{"version":3,"sources":["../src/ECPublicKey.js"],"names":["ECPublicKey","constructor","parameters","x","defaultValues","y","namedCurve","fromSchema","schema","fromJSON","json","memberName","ArrayBuffer","Error","compareWithDefault","memberValue","asn1js","RawData","view","Uint8Array","coordinateLength","byteLength","slice","toSchema","data","buffer","toJSON","crvName","crv","coodinateLength","toUpperCase","convertBuffer","convertBufferView","set"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, utilConcatBuf, isEqualBuffer, toBase64, fromBase64, arrayBufferToString, stringToArrayBuffer } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5480\r\n */\r\nexport default class ECPublicKey\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for ECCPublicKey class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc type\r\n\t\t */\r\n\t\tthis.x = getParametersValue(parameters, \"x\", ECPublicKey.defaultValues(\"x\"));\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc values\r\n\t\t */\r\n\t\tthis.y = getParametersValue(parameters, \"y\", ECPublicKey.defaultValues(\"y\"));\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc namedCurve\r\n\t\t */\r\n\t\tthis.namedCurve = getParametersValue(parameters, \"namedCurve\", ECPublicKey.defaultValues(\"namedCurve\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"x\":\r\n\t\t\tcase \"y\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"namedCurve\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ECCPublicKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"x\":\r\n\t\t\tcase \"y\":\r\n\t\t\t\treturn (isEqualBuffer(memberValue, ECPublicKey.defaultValues(memberName)));\r\n\t\t\tcase \"namedCurve\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ECCPublicKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\treturn new asn1js.RawData();\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert ArrayBuffer into current class\r\n\t * @param {!ArrayBuffer} schema Special case: schema is an ArrayBuffer\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tif((schema instanceof ArrayBuffer) === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ECPublicKey\");\r\n\r\n\t\tconst view = new Uint8Array(schema);\r\n\t\tif(view[0] !== 0x04)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ECPublicKey\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tlet coordinateLength;\r\n\r\n\t\tswitch(this.namedCurve)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.3.1.7\": // P-256\r\n\t\t\t\tcoordinateLength = 32;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.3.132.0.34\": // P-384\r\n\t\t\t\tcoordinateLength = 48;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.3.132.0.35\": // P-521\r\n\t\t\t\tcoordinateLength = 66;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Incorrect curve OID: ${this.namedCurve}`);\r\n\t\t}\r\n\r\n\t\tif(schema.byteLength !== (coordinateLength * 2 + 1))\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ECPublicKey\");\r\n\t\t\r\n\t\tthis.x = schema.slice(1, coordinateLength + 1);\r\n\t\tthis.y = schema.slice(1 + coordinateLength, coordinateLength * 2 + 1);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\treturn new asn1js.RawData({ data: utilConcatBuf(\r\n\t\t\t(new Uint8Array([0x04])).buffer,\r\n\t\t\tthis.x,\r\n\t\t\tthis.y\r\n\t\t)\r\n\t\t});\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet crvName = \"\";\r\n\r\n\t\tswitch(this.namedCurve)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.3.1.7\": // P-256\r\n\t\t\t\tcrvName = \"P-256\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.3.132.0.34\": // P-384\r\n\t\t\t\tcrvName = \"P-384\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.3.132.0.35\": // P-521\r\n\t\t\t\tcrvName = \"P-521\";\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tcrv: crvName,\r\n\t\t\tx: toBase64(arrayBufferToString(this.x), true, true, false),\r\n\t\t\ty: toBase64(arrayBufferToString(this.y), true, true, false)\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tlet coodinateLength = 0;\r\n\r\n\t\tif(\"crv\" in json)\r\n\t\t{\r\n\t\t\tswitch(json.crv.toUpperCase())\r\n\t\t\t{\r\n\t\t\t\tcase \"P-256\":\r\n\t\t\t\t\tthis.namedCurve = \"1.2.840.10045.3.1.7\";\r\n\t\t\t\t\tcoodinateLength = 32;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"P-384\":\r\n\t\t\t\t\tthis.namedCurve = \"1.3.132.0.34\";\r\n\t\t\t\t\tcoodinateLength = 48;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"P-521\":\r\n\t\t\t\t\tthis.namedCurve = \"1.3.132.0.35\";\r\n\t\t\t\t\tcoodinateLength = 66;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"crv\\\"\");\r\n\r\n\t\tif(\"x\" in json)\r\n\t\t{\r\n\t\t\tconst convertBuffer = stringToArrayBuffer(fromBase64(json.x, true));\r\n\t\t\t\r\n\t\t\tif(convertBuffer.byteLength < coodinateLength)\r\n\t\t\t{\r\n\t\t\t\tthis.x = new ArrayBuffer(coodinateLength);\r\n\t\t\t\tconst view = new Uint8Array(this.x);\r\n\t\t\t\tconst convertBufferView = new Uint8Array(convertBuffer);\r\n\t\t\t\tview.set(convertBufferView, 1);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tthis.x = convertBuffer.slice(0, coodinateLength);\r\n\t\t}\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"x\\\"\");\r\n\r\n\t\tif(\"y\" in json)\r\n\t\t{\r\n\t\t\tconst convertBuffer = stringToArrayBuffer(fromBase64(json.y, true));\r\n\t\t\t\r\n\t\t\tif(convertBuffer.byteLength < coodinateLength)\r\n\t\t\t{\r\n\t\t\t\tthis.y = new ArrayBuffer(coodinateLength);\r\n\t\t\t\tconst view = new Uint8Array(this.y);\r\n\t\t\t\tconst convertBufferView = new Uint8Array(convertBuffer);\r\n\t\t\t\tview.set(convertBufferView, 1);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tthis.y = convertBuffer.slice(0, coodinateLength);\r\n\t\t}\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"y\\\"\");\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"ECPublicKey.js"}