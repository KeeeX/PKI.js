{"version":3,"sources":["../src/Signature.js"],"names":["Signature","constructor","parameters","signatureAlgorithm","defaultValues","signature","certs","fromSchema","schema","memberName","AlgorithmIdentifier","asn1js","BitString","Error","compareWithDefault","memberValue","algorithmId","isEqual","length","names","Sequence","name","blockName","value","Constructed","optional","idBlock","tagClass","tagNumber","Repeated","Certificate","asn1","compareSchema","verified","result","Array","from","element","toSchema","outputArray","push","toJSON","_object"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport Certificate from \"./Certificate.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class Signature\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Signature class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", Signature.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @desc signature\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", Signature.defaultValues(\"signature\"));\r\n\r\n\t\tif(\"certs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Certificate>}\r\n\t\t\t * @desc certs\r\n\t\t\t */\r\n\t\t\tthis.certs = getParametersValue(parameters, \"certs\", Signature.defaultValues(\"certs\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Signature class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn (memberValue.isEqual(Signature.defaultValues(memberName)));\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Signature class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * Signature       ::=     SEQUENCE {\r\n\t *    signatureAlgorithm      AlgorithmIdentifier,\r\n\t *    signature               BIT STRING,\r\n\t *    certs               [0] EXPLICIT SEQUENCE OF Certificate OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [signatureAlgorithm]\r\n\t\t * @property {string} [signature]\r\n\t\t * @property {string} [certs]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.signature || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\t\tvalue: [new asn1js.Repeated({\r\n\t\t\t\t\t\t\t\tname: (names.certs || \"\"),\r\n\t\t\t\t\t\t\t\tvalue: Certificate.schema(names.certs || {})\r\n\t\t\t\t\t\t\t})]\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"signatureAlgorithm\",\r\n\t\t\t\"signature\",\r\n\t\t\t\"certs\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSignature.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tsignatureAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"signatureAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsignature: \"signature\",\r\n\t\t\t\t\tcerts: \"certs\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for Signature\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\r\n\t\tthis.signature = asn1.result.signature;\r\n\r\n\t\tif(\"certs\" in asn1.result)\r\n\t\t\tthis.certs = Array.from(asn1.result.certs, element => new Certificate({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array of output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(this.signatureAlgorithm.toSchema());\r\n\t\toutputArray.push(this.signature);\r\n\r\n\t\tif(\"certs\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\tvalue: Array.from(this.certs, element => element.toSchema())\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n\t\t\tsignature: this.signature.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"certs\" in this)\r\n\t\t\t_object.certs = Array.from(this.certs, element => element.toJSON());\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"Signature.js"}