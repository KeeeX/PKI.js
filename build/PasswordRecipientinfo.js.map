{"version":3,"sources":["../src/PasswordRecipientinfo.js"],"names":["PasswordRecipientinfo","constructor","parameters","version","defaultValues","keyDerivationAlgorithm","keyEncryptionAlgorithm","encryptedKey","password","fromSchema","schema","memberName","AlgorithmIdentifier","asn1js","OctetString","ArrayBuffer","Error","compareWithDefault","memberValue","algorithmId","isEqual","byteLength","names","Sequence","name","blockName","value","Integer","Constructed","optional","idBlock","tagClass","tagNumber","valueBlock","asn1","compareSchema","verified","result","valueDec","toSchema","outputArray","push","toJSON"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class PasswordRecipientinfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PasswordRecipientinfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", PasswordRecipientinfo.defaultValues(\"version\"));\r\n\r\n\t\tif(\"keyDerivationAlgorithm\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {AlgorithmIdentifier}\r\n\t\t\t * @desc keyDerivationAlgorithm\r\n\t\t\t */\r\n\t\t\tthis.keyDerivationAlgorithm = getParametersValue(parameters, \"keyDerivationAlgorithm\", PasswordRecipientinfo.defaultValues(\"keyDerivationAlgorithm\"));\r\n\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc keyEncryptionAlgorithm\r\n\t\t */\r\n\t\tthis.keyEncryptionAlgorithm = getParametersValue(parameters, \"keyEncryptionAlgorithm\", PasswordRecipientinfo.defaultValues(\"keyEncryptionAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc encryptedKey\r\n\t\t */\r\n\t\tthis.encryptedKey = getParametersValue(parameters, \"encryptedKey\", PasswordRecipientinfo.defaultValues(\"encryptedKey\"));\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc password Password to derive key from\r\n\t\t */\r\n\t\tthis.password = getParametersValue(parameters, \"password\", PasswordRecipientinfo.defaultValues(\"password\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (-1);\r\n\t\t\tcase \"keyDerivationAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"keyEncryptionAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"encryptedKey\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"password\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PasswordRecipientinfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === (-1));\r\n\t\t\tcase \"keyDerivationAlgorithm\":\r\n\t\t\tcase \"keyEncryptionAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"encryptedKey\":\r\n\t\t\t\treturn (memberValue.isEqual(PasswordRecipientinfo.defaultValues(\"encryptedKey\")));\r\n\t\t\tcase \"password\":\r\n\t\t\t\treturn (memberValue.byteLength === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PasswordRecipientinfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PasswordRecipientInfo ::= SEQUENCE {\r\n\t *    version CMSVersion,   -- Always set to 0\r\n\t *    keyDerivationAlgorithm [0] KeyDerivationAlgorithmIdentifier OPTIONAL,\r\n\t *    keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\r\n\t *    encryptedKey EncryptedKey }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [keyDerivationAlgorithm]\r\n\t\t * @property {string} [keyEncryptionAlgorithm]\r\n\t\t * @property {string} [encryptedKey]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tname: (names.keyDerivationAlgorithm || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: AlgorithmIdentifier.schema().valueBlock.value\r\n\t\t\t\t}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.encryptedKey || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"keyDerivationAlgorithm\",\r\n\t\t\t\"keyEncryptionAlgorithm\",\r\n\t\t\t\"encryptedKey\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPasswordRecipientinfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tkeyDerivationAlgorithm: \"keyDerivationAlgorithm\",\r\n\t\t\t\t\tkeyEncryptionAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"keyEncryptionAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tencryptedKey: \"encryptedKey\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PasswordRecipientinfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\r\n\t\tif(\"keyDerivationAlgorithm\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.keyDerivationAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\tschema: new asn1js.Sequence({\r\n\t\t\t\t\tvalue: asn1.result.keyDerivationAlgorithm.valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tthis.keyEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyEncryptionAlgorithm });\r\n\t\tthis.encryptedKey = asn1.result.encryptedKey;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create output array for sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\r\n\t\tif(\"keyDerivationAlgorithm\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.keyDerivationAlgorithm.toSchema().valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\toutputArray.push(this.keyEncryptionAlgorithm.toSchema());\r\n\t\toutputArray.push(this.encryptedKey);\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tversion: this.version,\r\n\t\t\tkeyDerivationAlgorithm: this.keyDerivationAlgorithm.toJSON(),\r\n\t\t\tkeyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\r\n\t\t\tencryptedKey: this.encryptedKey.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"PasswordRecipientinfo.js"}