{"version":3,"sources":["../src/KEKRecipientInfo.js"],"names":["KEKRecipientInfo","constructor","parameters","version","defaultValues","kekid","keyEncryptionAlgorithm","encryptedKey","preDefinedKEK","fromSchema","schema","memberName","KEKIdentifier","AlgorithmIdentifier","asn1js","OctetString","ArrayBuffer","Error","compareWithDefault","memberValue","keyIdentifier","algorithmId","isEqual","byteLength","names","Sequence","name","blockName","value","Integer","asn1","compareSchema","verified","result","valueBlock","valueDec","toSchema","toJSON"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport KEKIdentifier from \"./KEKIdentifier.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class KEKRecipientInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for KEKRecipientInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", KEKRecipientInfo.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {KEKIdentifier}\r\n\t\t * @desc kekid\r\n\t\t */\r\n\t\tthis.kekid = getParametersValue(parameters, \"kekid\", KEKRecipientInfo.defaultValues(\"kekid\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc keyEncryptionAlgorithm\r\n\t\t */\r\n\t\tthis.keyEncryptionAlgorithm = getParametersValue(parameters, \"keyEncryptionAlgorithm\", KEKRecipientInfo.defaultValues(\"keyEncryptionAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc encryptedKey\r\n\t\t */\r\n\t\tthis.encryptedKey = getParametersValue(parameters, \"encryptedKey\", KEKRecipientInfo.defaultValues(\"encryptedKey\"));\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc preDefinedKEK KEK using to encrypt CEK\r\n\t\t */\r\n\t\tthis.preDefinedKEK = getParametersValue(parameters, \"preDefinedKEK\", KEKRecipientInfo.defaultValues(\"preDefinedKEK\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"kekid\":\r\n\t\t\t\treturn new KEKIdentifier();\r\n\t\t\tcase \"keyEncryptionAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"encryptedKey\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"preDefinedKEK\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for KEKRecipientInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"KEKRecipientInfo\":\r\n\t\t\t\treturn (memberValue === KEKRecipientInfo.defaultValues(\"version\"));\r\n\t\t\tcase \"kekid\":\r\n\t\t\t\treturn ((memberValue.compareWithDefault(\"keyIdentifier\", memberValue.keyIdentifier)) &&\r\n\t\t\t\t\t\t((\"date\" in memberValue) === false) &&\r\n\t\t\t\t\t\t((\"other\" in memberValue) === false));\r\n\t\t\tcase \"keyEncryptionAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"encryptedKey\":\r\n\t\t\t\treturn (memberValue.isEqual(KEKRecipientInfo.defaultValues(\"encryptedKey\")));\r\n\t\t\tcase \"preDefinedKEK\":\r\n\t\t\t\treturn (memberValue.byteLength === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for KEKRecipientInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * KEKRecipientInfo ::= SEQUENCE {\r\n\t *    version CMSVersion,  -- always set to 4\r\n\t *    kekid KEKIdentifier,\r\n\t *    keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\r\n\t *    encryptedKey EncryptedKey }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [kekid]\r\n\t\t * @property {string} [keyEncryptionAlgorithm]\r\n\t\t * @property {string} [encryptedKey]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tKEKIdentifier.schema(names.kekid || {}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.encryptedKey || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"kekid\",\r\n\t\t\t\"keyEncryptionAlgorithm\",\r\n\t\t\t\"encryptedKey\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tKEKRecipientInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tkekid: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"kekid\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tkeyEncryptionAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"keyEncryptionAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tencryptedKey: \"encryptedKey\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for KEKRecipientInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.kekid = new KEKIdentifier({ schema: asn1.result.kekid });\r\n\t\tthis.keyEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyEncryptionAlgorithm });\r\n\t\tthis.encryptedKey = asn1.result.encryptedKey;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ value: this.version }),\r\n\t\t\t\tthis.kekid.toSchema(),\r\n\t\t\t\tthis.keyEncryptionAlgorithm.toSchema(),\r\n\t\t\t\tthis.encryptedKey\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tversion: this.version,\r\n\t\t\tkekid: this.kekid.toJSON(),\r\n\t\t\tkeyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\r\n\t\t\tencryptedKey: this.encryptedKey.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"KEKRecipientInfo.js"}