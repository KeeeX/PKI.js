{"version":3,"sources":["../src/PFX.js"],"names":["PFX","constructor","parameters","version","defaultValues","authSafe","macData","parsedValue","fromSchema","schema","memberName","ContentInfo","MacData","Error","compareWithDefault","memberValue","contentType","content","mac","macSalt","iterations","Object","keys","length","names","asn1js","Sequence","name","blockName","value","Integer","optional","asn1","compareSchema","verified","result","valueBlock","valueDec","toSchema","outputArray","push","toJSON","output","makeInternalValues","Promise","reject","sequence","resolve","crypto","integrityMode","saltBuffer","ArrayBuffer","saltView","Uint8Array","data","authenticatedSafe","toBER","OctetString","valueHex","engine","subtle","then","stampDataWithPassword","password","hashAlgorithm","hmacHashAlgorithm","salt","iterationCount","contentToStamp","DigestInfo","digestAlgorithm","AlgorithmIdentifier","algorithmId","digest","error","toBeSigned","cmsSigned","SignedData","encapContentInfo","EncapsulatedContentInfo","eContentType","eContent","certificates","signingCertificate","signedAttr","Attribute","type","values","ObjectIdentifier","UTCTime","valueDate","Date","signerInfos","SignerInfo","sid","IssuerAndSerialNumber","issuer","serialNumber","signedAttrs","SignedAndUnsignedAttributes","attributes","sign","privateKey","parseInternalValues","checkIntegrity","authSafeContent","isConstructed","contentValue","fromBER","offset","AuthenticatedSafe","verifyDataStampedWithPassword","contentToVerify","signatureToVerify","idBlock","i","verify","signer","checkChain"],"mappings":"6FAAA,sDACA,gCACA,mCACA,qEACA,6DACA,mEACA,qFACA,mEACA,6FACA,iEACA,mEACA,yFACA,qGACA,iF,gfACA;AACA;;GAGe,KAAMA,CAAAA,GACrB,CACC;AACA;;;;IAKAC,WAAW,CAACC,UAAU,CAAG,EAAd,CACX,CACC;AACA;;;KAIA,KAAKC,OAAL,CAAe,gCAAmBD,UAAnB,CAA+B,SAA/B,CAA0CF,GAAG,CAACI,aAAJ,CAAkB,SAAlB,CAA1C,CAAf,CACA;;;KAIA,KAAKC,QAAL,CAAgB,gCAAmBH,UAAnB,CAA+B,UAA/B,CAA2CF,GAAG,CAACI,aAAJ,CAAkB,UAAlB,CAA3C,CAAhB,CAEA,GAAG,WAAaF,CAAAA,UAAhB,CACC;;;MAIA,KAAKI,OAAL,CAAe,gCAAmBJ,UAAnB,CAA+B,SAA/B,CAA0CF,GAAG,CAACI,aAAJ,CAAkB,SAAlB,CAA1C,CAAf,CAED,GAAG,eAAiBF,CAAAA,UAApB,CACC;;;MAIA,KAAKK,WAAL,CAAmB,gCAAmBL,UAAnB,CAA+B,aAA/B,CAA8CF,GAAG,CAACI,aAAJ,CAAkB,aAAlB,CAA9C,CAAnB,CACD;AAEA;AACA,GAAG,UAAYF,CAAAA,UAAf,CACC,KAAKM,UAAL,CAAgBN,UAAU,CAACO,MAA3B,EACD;AACA,CACD;AACA;;;IAIA,MAAOL,CAAAA,aAAP,CAAqBM,UAArB,CACA,CACC,OAAOA,UAAP,EAEC,IAAK,SAAL,CACC,MAAO,EAAP,CACD,IAAK,UAAL,CACC,MAAQ,IAAIC,qBAAJ,EAAR,CACD,IAAK,SAAL,CACC,MAAQ,IAAIC,iBAAJ,EAAR,CACD,IAAK,aAAL,CACC,MAAO,EAAP,CACD,QACC,KAAM,IAAIC,CAAAA,KAAJ,CAAW,sCAAqCH,UAAW,EAA3D,CAAN,CAXF,CAaA,CACD;AACA;;;;IAKA,MAAOI,CAAAA,kBAAP,CAA0BJ,UAA1B,CAAsCK,WAAtC,CACA,CACC,OAAOL,UAAP,EAEC,IAAK,SAAL,CACC,MAAQK,CAAAA,WAAW,GAAKf,GAAG,CAACI,aAAJ,CAAkBM,UAAlB,CAAxB,CACD,IAAK,UAAL,CACC,MAASC,sBAAYG,kBAAZ,CAA+B,aAA/B,CAA8CC,WAAW,CAACC,WAA1D,CAAD,EACPL,qBAAYG,kBAAZ,CAA+B,SAA/B,CAA0CC,WAAW,CAACE,OAAtD,CADD,CAED,IAAK,SAAL,CACC,MAASL,kBAAQE,kBAAR,CAA2B,KAA3B,CAAkCC,WAAW,CAACG,GAA9C,CAAD,EACPN,iBAAQE,kBAAR,CAA2B,SAA3B,CAAsCC,WAAW,CAACI,OAAlD,CADO,EAEPP,iBAAQE,kBAAR,CAA2B,YAA3B,CAAyCC,WAAW,CAACK,UAArD,CAFD,CAGD,IAAK,aAAL,CACC,MAASL,CAAAA,WAAW,WAAYM,CAAAA,MAAxB,EAAoCA,MAAM,CAACC,IAAP,CAAYP,WAAZ,EAAyBQ,MAAzB,GAAoC,CAAhF,CACD,QACC,KAAM,IAAIV,CAAAA,KAAJ,CAAW,sCAAqCH,UAAW,EAA3D,CAAN,CAdF,CAgBA,CACD;AACA;;;;;;;;;;;;;;IAeA,MAAOD,CAAAA,MAAP,CAAcP,UAAU,CAAG,EAA3B,CACA,CACC;;;;;;KAOA,KAAMsB,CAAAA,KAAK,CAAG,gCAAmBtB,UAAnB,CAA+B,OAA/B,CAAwC,EAAxC,CAAd,CAEA,MAAQ,IAAIuB,CAAAA,MAAM,CAACC,QAAX,CAAoB,CAC3BC,IAAI,CAAGH,KAAK,CAACI,SAAN,EAAmB,EADC,CAE3BC,KAAK,CAAE,CACN,GAAIJ,CAAAA,MAAM,CAACK,OAAX,CAAmB,CAAEH,IAAI,CAAGH,KAAK,CAACrB,OAAN,EAAiB,SAA1B,CAAnB,CADM,CAENQ,qBAAYF,MAAZ,CAAmBe,KAAK,CAACnB,QAAN,EAAkB,CACpCmB,KAAK,CAAE,CACNI,SAAS,CAAE,UADL,CAD6B,CAArC,CAFM,CAONhB,iBAAQH,MAAR,CAAee,KAAK,CAAClB,OAAN,EAAiB,CAC/BkB,KAAK,CAAE,CACNI,SAAS,CAAE,SADL,CAENG,QAAQ,CAAE,IAFJ,CADwB,CAAhC,CAPM,CAFoB,CAApB,CAAR,CAiBA,CACD;AACA;;;IAIAvB,UAAU,CAACC,MAAD,CACV,CACC;AACA,wBAAWA,MAAX,CAAmB,CAClB,SADkB,CAElB,UAFkB,CAGlB,SAHkB,CAAnB,EAKA;AAEA;AACA,KAAMuB,CAAAA,IAAI,CAAGP,MAAM,CAACQ,aAAP,CAAqBxB,MAArB,CACZA,MADY,CAEZT,GAAG,CAACS,MAAJ,CAAW,CACVe,KAAK,CAAE,CACNrB,OAAO,CAAE,SADH,CAENE,QAAQ,CAAE,CACTmB,KAAK,CAAE,CACNI,SAAS,CAAE,UADL,CADE,CAFJ,CAONtB,OAAO,CAAE,CACRkB,KAAK,CAAE,CACNI,SAAS,CAAE,SADL,CADC,CAPH,CADG,CAAX,CAFY,CAAb,CAmBA,GAAGI,IAAI,CAACE,QAAL,GAAkB,KAArB,CACC,KAAM,IAAIrB,CAAAA,KAAJ,CAAU,6DAAV,CAAN,CACD;AAEA;AACA,KAAKV,OAAL,CAAe6B,IAAI,CAACG,MAAL,CAAYhC,OAAZ,CAAoBiC,UAApB,CAA+BC,QAA9C,CACA,KAAKhC,QAAL,CAAgB,GAAIM,qBAAJ,CAAgB,CAAEF,MAAM,CAAEuB,IAAI,CAACG,MAAL,CAAY9B,QAAtB,CAAhB,CAAhB,CAEA,GAAG,WAAa2B,CAAAA,IAAI,CAACG,MAArB,CACC,KAAK7B,OAAL,CAAe,GAAIM,iBAAJ,CAAY,CAAEH,MAAM,CAAEuB,IAAI,CAACG,MAAL,CAAY7B,OAAtB,CAAZ,CAAf,CACD;AACA,CACD;AACA;;;IAIAgC,QAAQ,EACR,CACC;AACA,KAAMC,CAAAA,WAAW,CAAG,CACnB,GAAId,CAAAA,MAAM,CAACK,OAAX,CAAmB,CAAED,KAAK,CAAE,KAAK1B,OAAd,CAAnB,CADmB,CAEnB,KAAKE,QAAL,CAAciC,QAAd,EAFmB,CAApB,CAKA,GAAG,WAAa,KAAhB,CACCC,WAAW,CAACC,IAAZ,CAAiB,KAAKlC,OAAL,CAAagC,QAAb,EAAjB,EAED,MAAQ,IAAIb,CAAAA,MAAM,CAACC,QAAX,CAAoB,CAC3BG,KAAK,CAAEU,WADoB,CAApB,CAAR,CAGA;AACA,CACD;AACA;;;IAIAE,MAAM,EACN,CACC,KAAMC,CAAAA,MAAM,CAAG,CACdvC,OAAO,CAAE,KAAKA,OADA,CAEdE,QAAQ,CAAE,KAAKA,QAAL,CAAcoC,MAAd,EAFI,CAAf,CAKA,GAAG,WAAa,KAAhB,CACCC,MAAM,CAACpC,OAAP,CAAiB,KAAKA,OAAL,CAAamC,MAAb,EAAjB,CAED,MAAOC,CAAAA,MAAP,CACA,CACD;AACA;;;IAIAC,kBAAkB,CAACzC,UAAU,CAAG,EAAd,CAClB,CACC;AACA,GAAIA,UAAU,WAAYmB,CAAAA,MAAvB,GAAmC,KAAtC,CACC,MAAOuB,CAAAA,OAAO,CAACC,MAAR,CAAe,6CAAf,CAAP,CAED,GAAI,eAAiB,KAAlB,GAA4B,KAA/B,CACC,MAAOD,CAAAA,OAAO,CAACC,MAAR,CAAe,kFAAf,CAAP,CAED,GAAI,iBAAmB,MAAKtC,WAAzB,GAA0C,KAA7C,CACC,MAAOqC,CAAAA,OAAO,CAACC,MAAR,CAAe,qEAAf,CAAP,CACD;AAEA;AACA,GAAIC,CAAAA,QAAQ,CAAGF,OAAO,CAACG,OAAR,EAAf,CACA;AAEA;AACA,KAAMC,CAAAA,MAAM,CAAG,uBAAf,CACA,GAAG,MAAOA,CAAAA,MAAP,GAAkB,WAArB,CACC,MAAOJ,CAAAA,OAAO,CAACC,MAAR,CAAe,mCAAf,CAAP,CACD;AAEA;AACA;AACA,GAAI,qBAAuB,MAAKtC,WAA7B,GAA8C,KAAjD,CACC,MAAOqC,CAAAA,OAAO,CAACC,MAAR,CAAe,qEAAf,CAAP,CACD;AAEA,OAAO,KAAKtC,WAAL,CAAiB0C,aAAxB,EAEC;AACA,IAAK,EAAL,CACC,CACC;AACA,GAAI,cAAgB/C,CAAAA,UAAjB,GAAiC,KAApC,CACC,MAAO0C,CAAAA,OAAO,CAACC,MAAR,CAAe,2CAAf,CAAP,CAED,GAAI,uBAAyB3C,CAAAA,UAA1B,GAA0C,KAA7C,CACC,MAAO0C,CAAAA,OAAO,CAACC,MAAR,CAAe,oDAAf,CAAP,CAED,GAAI,qBAAuB3C,CAAAA,UAAxB,GAAwC,KAA3C,CACC,MAAO0C,CAAAA,OAAO,CAACC,MAAR,CAAe,kDAAf,CAAP,CAED,GAAI,YAAc3C,CAAAA,UAAf,GAA+B,KAAlC,CACC,MAAO0C,CAAAA,OAAO,CAACC,MAAR,CAAe,yCAAf,CAAP,CACD;AAEA;AACA,KAAMK,CAAAA,UAAU,CAAG,GAAIC,CAAAA,WAAJ,CAAgB,EAAhB,CAAnB,CACA,KAAMC,CAAAA,QAAQ,CAAG,GAAIC,CAAAA,UAAJ,CAAeH,UAAf,CAAjB,CAEA,4BAAgBE,QAAhB,EAEA,KAAME,CAAAA,IAAI,CAAG,KAAK/C,WAAL,CAAiBgD,iBAAjB,CAAmCjB,QAAnC,GAA8CkB,KAA9C,CAAoD,KAApD,CAAb,CAEA,KAAKnD,QAAL,CAAgB,GAAIM,qBAAJ,CAAgB,CAC/BK,WAAW,CAAE,sBADkB,CAE/BC,OAAO,CAAE,GAAIQ,CAAAA,MAAM,CAACgC,WAAX,CAAuB,CAAEC,QAAQ,CAAEJ,IAAZ,CAAvB,CAFsB,CAAhB,CAAhB,CAIA;AAEA;AACA,KAAMK,CAAAA,MAAM,CAAG,uBAAf,CAEA,GAAI,yBAA2BA,CAAAA,MAAM,CAACC,MAAnC,GAA+C,KAAlD,CACC,MAAOhB,CAAAA,OAAO,CAACC,MAAR,CAAgB,6DAA4Dc,MAAM,CAAChC,IAAK,GAAxF,CAAP,CAEDmB,QAAQ,CAAGA,QAAQ,CAACe,IAAT,CAAc,IACxBF,MAAM,CAACC,MAAP,CAAcE,qBAAd,CAAoC,CACnCC,QAAQ,CAAE7D,UAAU,CAAC6D,QADc,CAEnCC,aAAa,CAAE9D,UAAU,CAAC+D,iBAFS,CAGnCC,IAAI,CAAEhB,UAH6B,CAInCiB,cAAc,CAAEjE,UAAU,CAACkB,UAJQ,CAKnCgD,cAAc,CAAEd,IALmB,CAApC,CADU,CAAX,CASA;AAEA;AACAR,QAAQ,CAAGA,QAAQ,CAACe,IAAT,CACV1B,MAAM,EACN,CACC,KAAK7B,OAAL,CAAe,GAAIM,iBAAJ,CAAY,CAC1BM,GAAG,CAAE,GAAImD,oBAAJ,CAAe,CACnBC,eAAe,CAAE,GAAIC,6BAAJ,CAAwB,CACxCC,WAAW,CAAE,8BAAkB,CAAE7C,IAAI,CAAEzB,UAAU,CAAC+D,iBAAnB,CAAlB,CAD2B,CAAxB,CADE,CAInBQ,MAAM,CAAE,GAAIhD,CAAAA,MAAM,CAACgC,WAAX,CAAuB,CAAEC,QAAQ,CAAEvB,MAAZ,CAAvB,CAJW,CAAf,CADqB,CAO1BhB,OAAO,CAAE,GAAIM,CAAAA,MAAM,CAACgC,WAAX,CAAuB,CAAEC,QAAQ,CAAER,UAAZ,CAAvB,CAPiB,CAQ1B9B,UAAU,CAAElB,UAAU,CAACkB,UARG,CAAZ,CAAf,CAUA,CAbS,CAcVsD,KAAK,EAAI9B,OAAO,CAACC,MAAR,CAAe6B,KAAf,CAdC,CAAX,CAgBA;AACA;AACA,CACD,MACD;AACA;AACA,IAAK,EAAL,CACC,CACC;AACA,GAAI,sBAAwBxE,CAAAA,UAAzB,GAAyC,KAA5C,CACC,MAAO0C,CAAAA,OAAO,CAACC,MAAR,CAAe,mDAAf,CAAP,CAED,GAAI,cAAgB3C,CAAAA,UAAjB,GAAiC,KAApC,CACC,MAAO0C,CAAAA,OAAO,CAACC,MAAR,CAAe,2CAAf,CAAP,CAED,GAAI,iBAAmB3C,CAAAA,UAApB,GAAoC,KAAvC,CACC,MAAO0C,CAAAA,OAAO,CAACC,MAAR,CAAe,8CAAf,CAAP,CACD;AAEA;AACA;AACA;AACA;AAEA,KAAM8B,CAAAA,UAAU,CAAG,KAAKpE,WAAL,CAAiBgD,iBAAjB,CAAmCjB,QAAnC,GAA8CkB,KAA9C,CAAoD,KAApD,CAAnB,CACA;AAEA;AACA,KAAMoB,CAAAA,SAAS,CAAG,GAAIC,oBAAJ,CAAe,CAChC1E,OAAO,CAAE,CADuB,CAEhC2E,gBAAgB,CAAE,GAAIC,iCAAJ,CAA4B,CAC7CC,YAAY,CAAE,sBAD+B,CACP;AACtCC,QAAQ,CAAE,GAAIxD,CAAAA,MAAM,CAACgC,WAAX,CAAuB,CAAEC,QAAQ,CAAEiB,UAAZ,CAAvB,CAFmC,CAA5B,CAFc,CAMhCO,YAAY,CAAE,CAAChF,UAAU,CAACiF,kBAAZ,CANkB,CAAf,CAAlB,CAQA;AAEA;AACA;AACArC,QAAQ,CAAGA,QAAQ,CAACe,IAAT,CACV,IAAMb,MAAM,CAACyB,MAAP,CAAc,CAAE9C,IAAI,CAAEzB,UAAU,CAAC8D,aAAnB,CAAd,CAAkD,GAAIX,CAAAA,UAAJ,CAAesB,UAAf,CAAlD,CADI,CAAX,CAGA;AAEA;AACA7B,QAAQ,CAAGA,QAAQ,CAACe,IAAT,CACV1B,MAAM,EACN,CACC;AACA,KAAMiD,CAAAA,UAAU,CAAG,EAAnB,CACA;AAEA;AACAA,UAAU,CAAC5C,IAAX,CAAgB,GAAI6C,mBAAJ,CAAc,CAC7BC,IAAI,CAAE,sBADuB,CAE7BC,MAAM,CAAE,CACP,GAAI9D,CAAAA,MAAM,CAAC+D,gBAAX,CAA4B,CAAE3D,KAAK,CAAE,sBAAT,CAA5B,CADO,CAFqB,CAAd,CAAhB,EAMA;AACA;AACAuD,UAAU,CAAC5C,IAAX,CAAgB,GAAI6C,mBAAJ,CAAc,CAC7BC,IAAI,CAAE,sBADuB,CAE7BC,MAAM,CAAE,CACP,GAAI9D,CAAAA,MAAM,CAACgE,OAAX,CAAmB,CAAEC,SAAS,CAAE,GAAIC,CAAAA,IAAJ,EAAb,CAAnB,CADO,CAFqB,CAAd,CAAhB,EAMA;AACA;AACAP,UAAU,CAAC5C,IAAX,CAAgB,GAAI6C,mBAAJ,CAAc,CAC7BC,IAAI,CAAE,sBADuB,CAE7BC,MAAM,CAAE,CACP,GAAI9D,CAAAA,MAAM,CAACgC,WAAX,CAAuB,CAAEC,QAAQ,CAAEvB,MAAZ,CAAvB,CADO,CAFqB,CAAd,CAAhB,EAMA;AAEA;AACAyC,SAAS,CAACgB,WAAV,CAAsBpD,IAAtB,CAA2B,GAAIqD,oBAAJ,CAAe,CACzC1F,OAAO,CAAE,CADgC,CAEzC2F,GAAG,CAAE,GAAIC,+BAAJ,CAA0B,CAC9BC,MAAM,CAAE9F,UAAU,CAACiF,kBAAX,CAA8Ba,MADR,CAE9BC,YAAY,CAAE/F,UAAU,CAACiF,kBAAX,CAA8Bc,YAFd,CAA1B,CAFoC,CAMzCC,WAAW,CAAE,GAAIC,qCAAJ,CAAgC,CAC5Cb,IAAI,CAAE,CADsC,CAE5Cc,UAAU,CAAEhB,UAFgC,CAAhC,CAN4B,CAAf,CAA3B,EAWA;AACA,CA7CS,CA8CVV,KAAK,EAAI9B,OAAO,CAACC,MAAR,CAAgB,2CAA0C6B,KAAM,EAAhE,CA9CC,CAAX,CAgDA;AACA;AAEA;AACA5B,QAAQ,CAAGA,QAAQ,CAACe,IAAT,CACV,IAAMe,SAAS,CAACyB,IAAV,CAAenG,UAAU,CAACoG,UAA1B,CAAsC,CAAtC,CAAyCpG,UAAU,CAAC8D,aAApD,CADI,CAAX,CAGA;AAEA;AACAlB,QAAQ,CAAGA,QAAQ,CAACe,IAAT,CACV,IACA,CACC,KAAKxD,QAAL,CAAgB,GAAIM,qBAAJ,CAAgB,CAC/BK,WAAW,CAAE,sBADkB,CAE/BC,OAAO,CAAE2D,SAAS,CAACtC,QAAV,CAAmB,IAAnB,CAFsB,CAAhB,CAAhB,CAIA,CAPS,CAQVoC,KAAK,EAAI9B,OAAO,CAACC,MAAR,CAAgB,kCAAiC6B,KAAM,EAAvD,CARC,CAAX,CAUA;AACA,CACD,MACD;AACA;AACA,QACC,MAAO9B,CAAAA,OAAO,CAACC,MAAR,CAAgB,gDAA+C3C,UAAU,CAAC+C,aAAc,EAAxF,CAAP,CACD;AA5LD,CA8LA;AAEA,MAAOH,CAAAA,QAAP,CACA,CACD;AACAyD,mBAAmB,CAACrG,UAAD,CACnB,CACC;AACA,GAAIA,UAAU,WAAYmB,CAAAA,MAAvB,GAAmC,KAAtC,CACC,MAAOuB,CAAAA,OAAO,CAACC,MAAR,CAAe,6CAAf,CAAP,CAED,GAAI,kBAAoB3C,CAAAA,UAArB,GAAqC,KAAxC,CACCA,UAAU,CAACsG,cAAX,CAA4B,IAA5B,CACD;AAEA;AACA,GAAI1D,CAAAA,QAAQ,CAAGF,OAAO,CAACG,OAAR,EAAf,CACA;AAEA;AACA,KAAMC,CAAAA,MAAM,CAAG,uBAAf,CACA,GAAG,MAAOA,CAAAA,MAAP,GAAkB,WAArB,CACC,MAAOJ,CAAAA,OAAO,CAACC,MAAR,CAAe,mCAAf,CAAP,CACD;AAEA;AACA,KAAKtC,WAAL,CAAmB,EAAnB,CAEA,OAAO,KAAKF,QAAL,CAAcW,WAArB,EAEC;AACA,IAAK,sBAAL,CACC,CACC;AACA,GAAI,YAAcd,CAAAA,UAAf,GAA+B,KAAlC,CACC,MAAO0C,CAAAA,OAAO,CAACC,MAAR,CAAe,yCAAf,CAAP,CACD;AAEA;AACA,KAAKtC,WAAL,CAAiB0C,aAAjB,CAAiC,CAAjC,CACA;AAEA;AACA,GAAI,KAAK5C,QAAL,CAAcY,OAAd,WAAiCQ,CAAAA,MAAM,CAACgC,WAAzC,GAA0D,KAA7D,CACC,MAAOb,CAAAA,OAAO,CAACC,MAAR,CAAe,yCAAf,CAAP,CACD;AAEA;AACA,GAAI4D,CAAAA,eAAe,CAAG,GAAItD,CAAAA,WAAJ,CAAgB,CAAhB,CAAtB,CAEA,GAAG,KAAK9C,QAAL,CAAcY,OAAd,CAAsBmB,UAAtB,CAAiCsE,aAApC,CACA,iGACC,kBAA0B,KAAKrG,QAAL,CAAcY,OAAd,CAAsBmB,UAAtB,CAAiCP,KAA3D,0HAAU8E,CAAAA,YAAV,aACCF,eAAe,CAAG,2BAAcA,eAAd,CAA+BE,YAAY,CAACvE,UAAb,CAAwBsB,QAAvD,CAAlB,CADD,CADD,qMAGC,CAJD,IAMC+C,CAAAA,eAAe,CAAG,KAAKpG,QAAL,CAAcY,OAAd,CAAsBmB,UAAtB,CAAiCsB,QAAnD,CACD;AAEA;AACA,KAAM1B,CAAAA,IAAI,CAAGP,MAAM,CAACmF,OAAP,CAAeH,eAAf,CAAb,CACA,GAAGzE,IAAI,CAAC6E,MAAL,GAAiB,CAAC,CAArB,CACC,MAAOjE,CAAAA,OAAO,CAACC,MAAR,CAAe,qEAAf,CAAP,CACD;AAEA;AACA,KAAKtC,WAAL,CAAiBgD,iBAAjB,CAAqC,GAAIuD,2BAAJ,CAAsB,CAAErG,MAAM,CAAEuB,IAAI,CAACG,MAAf,CAAtB,CAArC,CACA;AAEA;AACA,GAAGjC,UAAU,CAACsG,cAAd,CACA,CACC;AACA,GAAI,WAAa,KAAd,GAAwB,KAA3B,CACC,MAAO5D,CAAAA,OAAO,CAACC,MAAR,CAAe,gEAAf,CAAP,CACD;AAEA;AACA,KAAMmB,CAAAA,aAAa,CAAG,8BAAkB,KAAK1D,OAAL,CAAaY,GAAb,CAAiBoD,eAAjB,CAAiCE,WAAnD,CAAtB,CACA,GAAI,QAAUR,CAAAA,aAAX,GAA8B,KAAjC,CACC,MAAOpB,CAAAA,OAAO,CAACC,MAAR,CAAgB,iCAAgC,KAAKvC,OAAL,CAAaY,GAAb,CAAiBoD,eAAjB,CAAiCE,WAAY,EAA7F,CAAP,CACD;AAEA;AACA,KAAMb,CAAAA,MAAM,CAAG,uBAAf,CAEAb,QAAQ,CAAGA,QAAQ,CAACe,IAAT,CAAc,IACxBF,MAAM,CAACC,MAAP,CAAcmD,6BAAd,CAA4C,CAC3ChD,QAAQ,CAAE7D,UAAU,CAAC6D,QADsB,CAE3CC,aAAa,CAAEA,aAAa,CAACrC,IAFc,CAG3CuC,IAAI,CAAE,KAAK5D,OAAL,CAAaa,OAAb,CAAqBiB,UAArB,CAAgCsB,QAHK,CAI3CS,cAAc,CAAE,KAAK7D,OAAL,CAAac,UAJc,CAK3C4F,eAAe,CAAEP,eAL0B,CAM3CQ,iBAAiB,CAAE,KAAK3G,OAAL,CAAaY,GAAb,CAAiBuD,MAAjB,CAAwBrC,UAAxB,CAAmCsB,QANX,CAA5C,CADU,CAAX,CAUA;AAEA;AACAZ,QAAQ,CAAGA,QAAQ,CAACe,IAAT,CACV1B,MAAM,EACN,CACC,GAAGA,MAAM,GAAK,KAAd,CACC,MAAOS,CAAAA,OAAO,CAACC,MAAR,CAAe,2CAAf,CAAP,CAED,MAAOD,CAAAA,OAAO,CAACG,OAAR,EAAP,CACA,CAPS,CAQV2B,KAAK,EAAI9B,OAAO,CAACC,MAAR,CAAe6B,KAAf,CARC,CAAX,CAUA;AACA,CACD;AACA,CACD,MACD;AACA;AACA,IAAK,sBAAL,CACC,CACC;AACA,KAAKnE,WAAL,CAAiB0C,aAAjB,CAAiC,CAAjC,CACA;AAEA;AACA,KAAM2B,CAAAA,SAAS,CAAG,GAAIC,oBAAJ,CAAe,CAAEpE,MAAM,CAAE,KAAKJ,QAAL,CAAcY,OAAxB,CAAf,CAAlB,CACA;AAEA;AACA,GAAI,YAAc2D,CAAAA,SAAS,CAACE,gBAAzB,GAA+C,KAAlD,CACC,MAAOlC,CAAAA,OAAO,CAACC,MAAR,CAAe,2DAAf,CAAP,CAED,GAAI+B,SAAS,CAACE,gBAAV,CAA2BG,QAA3B,WAA+CxD,CAAAA,MAAM,CAACgC,WAAvD,GAAwE,KAA3E,CACC,MAAOb,CAAAA,OAAO,CAACC,MAAR,CAAe,uDAAf,CAAP,CACD;AAEA;AACA,GAAIS,CAAAA,IAAI,CAAG,GAAIH,CAAAA,WAAJ,CAAgB,CAAhB,CAAX,CAEA,GAAGyB,SAAS,CAACE,gBAAV,CAA2BG,QAA3B,CAAoCiC,OAApC,CAA4CR,aAA5C,GAA8D,KAAjE,CACCpD,IAAI,CAAGsB,SAAS,CAACE,gBAAV,CAA2BG,QAA3B,CAAoC7C,UAApC,CAA+CsB,QAAtD,CADD,IAGA,CACC,IAAI,GAAIyD,CAAAA,CAAC,CAAG,CAAZ,CAAeA,CAAC,CAAGvC,SAAS,CAACE,gBAAV,CAA2BG,QAA3B,CAAoC7C,UAApC,CAA+CP,KAA/C,CAAqDN,MAAxE,CAAgF4F,CAAC,EAAjF,CACC7D,IAAI,CAAG,2BAAcA,IAAd,CAAoBsB,SAAS,CAACE,gBAAV,CAA2BG,QAA3B,CAAoC7C,UAApC,CAA+CP,KAA/C,CAAqDsF,CAArD,EAAwD/E,UAAxD,CAAmEsB,QAAvF,CAAP,CACD,CACD;AAEA;AACA,KAAM1B,CAAAA,IAAI,CAAGP,MAAM,CAACmF,OAAP,CAAetD,IAAf,CAAb,CACA,GAAGtB,IAAI,CAAC6E,MAAL,GAAiB,CAAC,CAArB,CACC,MAAOjE,CAAAA,OAAO,CAACC,MAAR,CAAe,qEAAf,CAAP,CACD;AAEA;AACA,KAAKtC,WAAL,CAAiBgD,iBAAjB,CAAqC,GAAIuD,2BAAJ,CAAsB,CAAErG,MAAM,CAAEuB,IAAI,CAACG,MAAf,CAAtB,CAArC,CACA;AAEA;AACAW,QAAQ,CAAGA,QAAQ,CAACe,IAAT,CACV,IAAMe,SAAS,CAACwC,MAAV,CAAiB,CAAEC,MAAM,CAAE,CAAV,CAAaC,UAAU,CAAE,KAAzB,CAAjB,CADI,EAETzD,IAFS,CAGV1B,MAAM,EACN,CACC,GAAGA,MAAM,GAAK,KAAd,CACC,MAAOS,CAAAA,OAAO,CAACC,MAAR,CAAe,2CAAf,CAAP,CAED,MAAOD,CAAAA,OAAO,CAACG,OAAR,EAAP,CACA,CATS,CAUV2B,KAAK,EAAI9B,OAAO,CAACC,MAAR,CAAgB,wCAAuC6B,KAAM,EAA7D,CAVC,CAAX,CAYA;AACA,CACD,MACD;AACA;AACA,QACC,MAAO9B,CAAAA,OAAO,CAACC,MAAR,CAAgB,oDAAmD,KAAKxC,QAAL,CAAcW,WAAY,EAA7F,CAAP,CACD;AApJD,CAsJA;AAEA;AACA,MAAO8B,CAAAA,QAAQ,CAACe,IAAT,CACN,IAAM,IADA,CAENa,KAAK,EAAI9B,OAAO,CAACC,MAAR,CAAgB,yBAAwB6B,KAAM,EAA9C,CAFH,CAAP,CAIA;AACA,CACD;AApnBD,CAsnBA","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, utilConcatBuf, clearProps } from \"pvutils\";\r\nimport { getCrypto, getEngine, getRandomValues, getOIDByAlgorithm, getAlgorithmByOID } from \"./common.js\";\r\nimport ContentInfo from \"./ContentInfo.js\";\r\nimport MacData from \"./MacData.js\";\r\nimport DigestInfo from \"./DigestInfo.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport SignedData from \"./SignedData.js\";\r\nimport EncapsulatedContentInfo from \"./EncapsulatedContentInfo.js\";\r\nimport Attribute from \"./Attribute.js\";\r\nimport SignerInfo from \"./SignerInfo.js\";\r\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\";\r\nimport SignedAndUnsignedAttributes from \"./SignedAndUnsignedAttributes.js\";\r\nimport AuthenticatedSafe from \"./AuthenticatedSafe.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC7292\r\n */\r\nexport default class PFX \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PFX class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", PFX.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {ContentInfo}\r\n\t\t * @desc authSafe\r\n\t\t */\r\n\t\tthis.authSafe = getParametersValue(parameters, \"authSafe\", PFX.defaultValues(\"authSafe\"));\r\n\t\t\r\n\t\tif(\"macData\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {MacData}\r\n\t\t\t * @desc macData\r\n\t\t\t */\r\n\t\t\tthis.macData = getParametersValue(parameters, \"macData\", PFX.defaultValues(\"macData\"));\r\n\t\t\r\n\t\tif(\"parsedValue\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {*}\r\n\t\t\t * @desc parsedValue\r\n\t\t\t */\r\n\t\t\tthis.parsedValue = getParametersValue(parameters, \"parsedValue\", PFX.defaultValues(\"parsedValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 3;\r\n\t\t\tcase \"authSafe\":\r\n\t\t\t\treturn (new ContentInfo());\r\n\t\t\tcase \"macData\":\r\n\t\t\t\treturn (new MacData());\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PFX class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === PFX.defaultValues(memberName));\r\n\t\t\tcase \"authSafe\":\r\n\t\t\t\treturn ((ContentInfo.compareWithDefault(\"contentType\", memberValue.contentType)) &&\r\n\t\t\t\t(ContentInfo.compareWithDefault(\"content\", memberValue.content)));\r\n\t\t\tcase \"macData\":\r\n\t\t\t\treturn ((MacData.compareWithDefault(\"mac\", memberValue.mac)) &&\r\n\t\t\t\t(MacData.compareWithDefault(\"macSalt\", memberValue.macSalt)) &&\r\n\t\t\t\t(MacData.compareWithDefault(\"iterations\", memberValue.iterations)));\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PFX class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PFX ::= SEQUENCE {\r\n\t *    version\t\tINTEGER {v3(3)}(v3,...),\r\n\t *    authSafe\tContentInfo,\r\n\t *    macData    \tMacData OPTIONAL\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [authSafe]\r\n\t\t * @property {string} [macData]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"version\") }),\r\n\t\t\t\tContentInfo.schema(names.authSafe || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"authSafe\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tMacData.schema(names.macData || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"macData\",\r\n\t\t\t\t\t\toptional: true\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"authSafe\",\r\n\t\t\t\"macData\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPFX.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tauthSafe: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"authSafe\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmacData: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"macData\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PFX\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.authSafe = new ContentInfo({ schema: asn1.result.authSafe });\r\n\t\t\r\n\t\tif(\"macData\" in asn1.result)\r\n\t\t\tthis.macData = new MacData({ schema: asn1.result.macData });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\tconst outputArray = [\r\n\t\t\tnew asn1js.Integer({ value: this.version }),\r\n\t\t\tthis.authSafe.toSchema()\r\n\t\t];\r\n\t\t\r\n\t\tif(\"macData\" in this)\r\n\t\t\toutputArray.push(this.macData.toSchema());\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst output = {\r\n\t\t\tversion: this.version,\r\n\t\t\tauthSafe: this.authSafe.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"macData\" in this)\r\n\t\t\toutput.macData = this.macData.toJSON();\r\n\t\t\r\n\t\treturn output;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Making ContentInfo from \"parsedValue\" object\r\n\t * @param {Object} parameters Parameters, specific to each \"integrity mode\"\r\n\t */\r\n\tmakeInternalValues(parameters = {})\r\n\t{\r\n\t\t//region Check mandatory parameter\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"The \\\"parameters\\\" must has \\\"Object\\\" type\");\r\n\t\t\r\n\t\tif((\"parsedValue\" in this) === false)\r\n\t\t\treturn Promise.reject(\"Please call \\\"parseValues\\\" function first in order to make \\\"parsedValue\\\" data\");\r\n\t\t\r\n\t\tif((\"integrityMode\" in this.parsedValue) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"integrityMode\\\" inside \\\"parsedValue\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Makes values for each particular integrity mode\r\n\t\t//region Check that we do have neccessary fields in \"parsedValue\" object\r\n\t\tif((\"authenticatedSafe\" in this.parsedValue) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"authenticatedSafe\\\" in \\\"parsedValue\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\tswitch(this.parsedValue.integrityMode)\r\n\t\t{\r\n\t\t\t//region HMAC-based integrity\r\n\t\t\tcase 0:\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Check additional mandatory parameters\r\n\t\t\t\t\tif((\"iterations\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"iterations\\\"\");\r\n\t\t\t\t\r\n\t\t\t\t\tif((\"pbkdf2HashAlgorithm\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"pbkdf2HashAlgorithm\\\"\");\r\n\t\t\t\t\r\n\t\t\t\t\tif((\"hmacHashAlgorithm\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"hmacHashAlgorithm\\\"\");\r\n\t\t\t\t\r\n\t\t\t\t\tif((\"password\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\tconst saltBuffer = new ArrayBuffer(64);\r\n\t\t\t\t\tconst saltView = new Uint8Array(saltBuffer);\r\n\t\t\t\t\r\n\t\t\t\t\tgetRandomValues(saltView);\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst data = this.parsedValue.authenticatedSafe.toSchema().toBER(false);\r\n\r\n\t\t\t\t\tthis.authSafe = new ContentInfo({\r\n\t\t\t\t\t\tcontentType: \"1.2.840.113549.1.7.1\",\r\n\t\t\t\t\t\tcontent: new asn1js.OctetString({ valueHex: data })\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Call current crypto engine for making HMAC-based data stamp\r\n\t\t\t\t\tconst engine = getEngine();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((\"stampDataWithPassword\" in engine.subtle) === false)\r\n\t\t\t\t\t\treturn Promise.reject(`No support for \"stampDataWithPassword\" in current engine \"${engine.name}\"`);\r\n\t\t\t\t\t\r\n\t\t\t\t\tsequence = sequence.then(() =>\r\n\t\t\t\t\t\tengine.subtle.stampDataWithPassword({\r\n\t\t\t\t\t\t\tpassword: parameters.password,\r\n\t\t\t\t\t\t\thashAlgorithm: parameters.hmacHashAlgorithm,\r\n\t\t\t\t\t\t\tsalt: saltBuffer,\r\n\t\t\t\t\t\t\titerationCount: parameters.iterations,\r\n\t\t\t\t\t\t\tcontentToStamp: data\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Make \"MacData\" values\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\tresult =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.macData = new MacData({\r\n\t\t\t\t\t\t\t\tmac: new DigestInfo({\r\n\t\t\t\t\t\t\t\t\tdigestAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\t\t\t\talgorithmId: getOIDByAlgorithm({ name: parameters.hmacHashAlgorithm })\r\n\t\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\t\tdigest: new asn1js.OctetString({ valueHex: result })\r\n\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\tmacSalt: new asn1js.OctetString({ valueHex: saltBuffer }),\r\n\t\t\t\t\t\t\t\titerations: parameters.iterations\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror => Promise.reject(error)\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//endregion\r\n\t\t\t//region publicKey-based integrity\r\n\t\t\tcase 1:\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Check additional mandatory parameters\r\n\t\t\t\t\tif((\"signingCertificate\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"signingCertificate\\\"\");\r\n\t\t\t\t\r\n\t\t\t\t\tif((\"privateKey\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"privateKey\\\"\");\r\n\t\t\t\t\r\n\t\t\t\t\tif((\"hashAlgorithm\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"hashAlgorithm\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Making data to be signed\r\n\t\t\t\t\t// NOTE: all internal data for \"authenticatedSafe\" must be already prepared.\r\n\t\t\t\t\t// Thus user must call \"makeValues\" for all internal \"SafeContent\" value with appropriate parameters.\r\n\t\t\t\t\t// Or user can choose to use values from initial parsing of existing PKCS#12 data.\r\n\t\t\t\t\r\n\t\t\t\t\tconst toBeSigned = this.parsedValue.authenticatedSafe.toSchema().toBER(false);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\tconst cmsSigned = new SignedData({\r\n\t\t\t\t\t\tversion: 1,\r\n\t\t\t\t\t\tencapContentInfo: new EncapsulatedContentInfo({\r\n\t\t\t\t\t\t\teContentType: \"1.2.840.113549.1.7.1\", // \"data\" content type\r\n\t\t\t\t\t\t\teContent: new asn1js.OctetString({ valueHex: toBeSigned })\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tcertificates: [parameters.signingCertificate]\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Making additional attributes for CMS Signed Data\r\n\t\t\t\t\t//region Create a message digest\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t() => crypto.digest({ name: parameters.hashAlgorithm }, new Uint8Array(toBeSigned))\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Combine all signed extensions\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\tresult =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\t\tconst signedAttr = [];\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t//region contentType\r\n\t\t\t\t\t\t\tsignedAttr.push(new Attribute({\r\n\t\t\t\t\t\t\t\ttype: \"1.2.840.113549.1.9.3\",\r\n\t\t\t\t\t\t\t\tvalues: [\r\n\t\t\t\t\t\t\t\t\tnew asn1js.ObjectIdentifier({ value: \"1.2.840.113549.1.7.1\" })\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region signingTime\r\n\t\t\t\t\t\t\tsignedAttr.push(new Attribute({\r\n\t\t\t\t\t\t\t\ttype: \"1.2.840.113549.1.9.5\",\r\n\t\t\t\t\t\t\t\tvalues: [\r\n\t\t\t\t\t\t\t\t\tnew asn1js.UTCTime({ valueDate: new Date() })\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region messageDigest\r\n\t\t\t\t\t\t\tsignedAttr.push(new Attribute({\r\n\t\t\t\t\t\t\t\ttype: \"1.2.840.113549.1.9.4\",\r\n\t\t\t\t\t\t\t\tvalues: [\r\n\t\t\t\t\t\t\t\t\tnew asn1js.OctetString({ valueHex: result })\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t//region Making final value for \"SignerInfo\" type\r\n\t\t\t\t\t\t\tcmsSigned.signerInfos.push(new SignerInfo({\r\n\t\t\t\t\t\t\t\tversion: 1,\r\n\t\t\t\t\t\t\t\tsid: new IssuerAndSerialNumber({\r\n\t\t\t\t\t\t\t\t\tissuer: parameters.signingCertificate.issuer,\r\n\t\t\t\t\t\t\t\t\tserialNumber: parameters.signingCertificate.serialNumber\r\n\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\tsignedAttrs: new SignedAndUnsignedAttributes({\r\n\t\t\t\t\t\t\t\t\ttype: 0,\r\n\t\t\t\t\t\t\t\t\tattributes: signedAttr\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror => Promise.reject(`Error during making digest for message: ${error}`)\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Signing CMS Signed Data\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t() => cmsSigned.sign(parameters.privateKey, 0, parameters.hashAlgorithm)\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Making final CMS_CONTENT_INFO type\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t() =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.authSafe = new ContentInfo({\r\n\t\t\t\t\t\t\t\tcontentType: \"1.2.840.113549.1.7.2\",\r\n\t\t\t\t\t\t\t\tcontent: cmsSigned.toSchema(true)\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror => Promise.reject(`Error during making signature: ${error}`)\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//endregion\r\n\t\t\t//region default\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Parameter \"integrityMode\" has unknown value: ${parameters.integrityMode}`);\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\tparseInternalValues(parameters)\r\n\t{\r\n\t\t//region Check input data from \"parameters\" \r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"The \\\"parameters\\\" must has \\\"Object\\\" type\");\r\n\t\t\r\n\t\tif((\"checkIntegrity\" in parameters) === false)\r\n\t\t\tparameters.checkIntegrity = true;\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initial variables \r\n\t\tlet sequence = Promise.resolve();\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Get a \"crypto\" extension \r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Create value for \"this.parsedValue.authenticatedSafe\" and check integrity \r\n\t\tthis.parsedValue = {};\r\n\t\t\r\n\t\tswitch(this.authSafe.contentType)\r\n\t\t{\r\n\t\t\t//region data \r\n\t\t\tcase \"1.2.840.113549.1.7.1\":\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Check additional mandatory parameters\r\n\t\t\t\t\tif((\"password\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Integrity based on HMAC\r\n\t\t\t\t\tthis.parsedValue.integrityMode = 0;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Check that we do have OCTETSTRING as \"content\"\r\n\t\t\t\t\tif((this.authSafe.content instanceof asn1js.OctetString) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Wrong type of \\\"this.authSafe.content\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Check we have \"constructive encoding\" for AuthSafe content\r\n\t\t\t\t\tlet authSafeContent = new ArrayBuffer(0);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(this.authSafe.content.valueBlock.isConstructed)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor(const contentValue of this.authSafe.content.valueBlock.value)\r\n\t\t\t\t\t\t\tauthSafeContent = utilConcatBuf(authSafeContent, contentValue.valueBlock.valueHex);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tauthSafeContent = this.authSafe.content.valueBlock.valueHex;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Parse internal ASN.1 data\r\n\t\t\t\t\tconst asn1 = asn1js.fromBER(authSafeContent);\r\n\t\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\t\treturn Promise.reject(\"Error during parsing of ASN.1 data inside \\\"this.authSafe.content\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Set \"authenticatedSafe\" value\r\n\t\t\t\t\tthis.parsedValue.authenticatedSafe = new AuthenticatedSafe({ schema: asn1.result });\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Check integrity\r\n\t\t\t\t\tif(parameters.checkIntegrity)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region Check that \"MacData\" exists\r\n\t\t\t\t\t\tif((\"macData\" in this) === false)\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Absent \\\"macData\\\" value, can not check PKCS#12 data integrity\");\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\tconst hashAlgorithm = getAlgorithmByOID(this.macData.mac.digestAlgorithm.algorithmId);\r\n\t\t\t\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\t\t\t\treturn Promise.reject(`Unsupported digest algorithm: ${this.macData.mac.digestAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Call current crypto engine for verifying HMAC-based data stamp\r\n\t\t\t\t\t\tconst engine = getEngine();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tsequence = sequence.then(() =>\r\n\t\t\t\t\t\t\tengine.subtle.verifyDataStampedWithPassword({\r\n\t\t\t\t\t\t\t\tpassword: parameters.password,\r\n\t\t\t\t\t\t\t\thashAlgorithm: hashAlgorithm.name,\r\n\t\t\t\t\t\t\t\tsalt: this.macData.macSalt.valueBlock.valueHex,\r\n\t\t\t\t\t\t\t\titerationCount: this.macData.iterations,\r\n\t\t\t\t\t\t\t\tcontentToVerify: authSafeContent,\r\n\t\t\t\t\t\t\t\tsignatureToVerify: this.macData.mac.digest.valueBlock.valueHex\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t//region Verify HMAC signature\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\tresult =>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(result === false)\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(\"Integrity for the PKCS#12 data is broken!\");\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\terror => Promise.reject(error)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//endregion \r\n\t\t\t//region signedData \r\n\t\t\tcase \"1.2.840.113549.1.7.2\":\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Integrity based on signature using public key\r\n\t\t\t\t\tthis.parsedValue.integrityMode = 1;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Parse CMS Signed Data\r\n\t\t\t\t\tconst cmsSigned = new SignedData({ schema: this.authSafe.content });\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Check that we do have OCTETSTRING as \"content\"\r\n\t\t\t\t\tif((\"eContent\" in cmsSigned.encapContentInfo) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent of attached data in \\\"cmsSigned.encapContentInfo\\\"\");\r\n\t\t\t\t\r\n\t\t\t\t\tif((cmsSigned.encapContentInfo.eContent instanceof asn1js.OctetString) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Wrong type of \\\"cmsSigned.encapContentInfo.eContent\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Create correct data block for verification\r\n\t\t\t\t\tlet data = new ArrayBuffer(0);\r\n\t\t\t\t\r\n\t\t\t\t\tif(cmsSigned.encapContentInfo.eContent.idBlock.isConstructed === false)\r\n\t\t\t\t\t\tdata = cmsSigned.encapContentInfo.eContent.valueBlock.valueHex;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor(let i = 0; i < cmsSigned.encapContentInfo.eContent.valueBlock.value.length; i++)\r\n\t\t\t\t\t\t\tdata = utilConcatBuf(data, cmsSigned.encapContentInfo.eContent.valueBlock.value[i].valueBlock.valueHex);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Parse internal ASN.1 data\r\n\t\t\t\t\tconst asn1 = asn1js.fromBER(data);\r\n\t\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\t\treturn Promise.reject(\"Error during parsing of ASN.1 data inside \\\"this.authSafe.content\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Set \"authenticatedSafe\" value\r\n\t\t\t\t\tthis.parsedValue.authenticatedSafe = new AuthenticatedSafe({ schema: asn1.result });\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Check integrity\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t() => cmsSigned.verify({ signer: 0, checkChain: false })\r\n\t\t\t\t\t).then(\r\n\t\t\t\t\t\tresult =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(result === false)\r\n\t\t\t\t\t\t\t\treturn Promise.reject(\"Integrity for the PKCS#12 data is broken!\");\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror => Promise.reject(`Error during integrity verification: ${error}`)\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//endregion   \r\n\t\t\t//region default \r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect value for \"this.authSafe.contentType\": ${this.authSafe.contentType}`);\r\n\t\t\t//endregion \r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Return result of the function \r\n\t\treturn sequence.then(\r\n\t\t\t() => this,\r\n\t\t\terror => Promise.reject(`Error during parsing: ${error}`)\r\n\t\t);\r\n\t\t//endregion   \r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"PFX.js"}