{"version":3,"sources":["../src/CertificateChainValidationEngine.js"],"names":["CertificateChainValidationEngine","constructor","parameters","trustedCerts","defaultValues","certs","crls","ocsps","checkDate","findOrigin","findIssuer","defaultFindOrigin","certificate","validationEngine","tbs","byteLength","encodeTBS","localCert","trustedCert","defaultFindIssuer","result","keyIdentifier","authorityCertIssuer","authorityCertSerialNumber","subject","isEqual","issuer","verificationResult","verify","ex","extensions","extension","extnID","parsedValue","checkCertificate","possibleIssuer","extensionFound","valueBlock","valueHex","push","authorityCertSerialNumberEqual","serialNumber","intermediateCert","i","length","splice","memberName","Date","Error","sort","passedWhenNotRevValues","localCerts","_this","buildPath","checkUnique","array","unique","j","findIssuerResult","buildPathResult","copy","slice","findCRL","issuerCertificates","crlsAndCertificates","filter","element","status","statusMessage","nextUpdate","value","issuerCertificate","crl","findOCSP","hashAlgorithm","signatureAlgorithm","algorithmId","getCertificateStatus","isForCertificate","checkForCA","needToCheckCRL","isCA","mustBeCA","keyUsagePresent","cRLSign","critical","resultCode","resultMessage","view","Uint8Array","cA","basicCheck","path","notBefore","notAfter","ocspResult","crlResult","isCertificateRevoked","isCertificateCA","certificatePath","found","k","shortestLength","shortestIndex","compareDNSName","name","constraint","namePrepared","constraintPrepared","nameSplitted","split","constraintSplitted","nameLen","constrLen","localeCompare","compareRFC822Name","ns","cs","compareUniformResourceIdentifier","charAt","nsPort","compareIPAddress","nameView","constraintView","compareDirectoryName","typesAndValues","nameStart","localResult","type","initialPolicySet","initialExplicitPolicy","initialPolicyMappingInhibit","initialInhibitPolicy","initialPermittedSubtreesSet","initialExcludedSubtreesSet","initialRequiredNameForms","explicitPolicyIndicator","policyMappingInhibitIndicator","inhibitAnyPolicyIndicator","pendingConstraints","Array","explicitPolicyPending","policyMappingInhibitPending","inhibitAnyPolicyPending","permittedSubtrees","excludedSubtrees","requiredNameForms","pathDepth","allPolicies","policiesAndCerts","anyPolicyArray","ii","policyMappings","certPolicies","explicitPolicyStart","s","certificatePolicies","policyIndex","policyIdentifier","certArray","requireExplicitPolicy","inhibitPolicyMapping","valueDec","searchAnyPolicy","mappings","issuerDomainPolicy","subjectDomainPolicy","issuerDomainPolicyIndex","subjectDomainPolicyIndex","n","m","authConstrPolicies","anyPolicyFound","userConstrPolicies","policyResult","subjectAltNames","certPermittedSubtrees","certExcludedSubtrees","concat","altNames","formFound","base","constrGroups","p","groupPermitted","valueExists","group","excluded","error","Object","message"],"mappings":"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","sourcesContent":["import { getParametersValue, isEqualBuffer } from \"pvutils\";\r\nimport { getAlgorithmByOID, stringPrep } from \"./common.js\";\r\n//**************************************************************************************\r\nexport default class CertificateChainValidationEngine\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CertificateChainValidationEngine class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<Certificate>}\r\n\t\t * @desc Array of pre-defined trusted (by user) certificates\r\n\t\t */\r\n\t\tthis.trustedCerts = getParametersValue(parameters, \"trustedCerts\", this.defaultValues(\"trustedCerts\"));\r\n\t\t/**\r\n\t\t * @type {Array.<Certificate>}\r\n\t\t * @desc Array with certificate chain. Could be only one end-user certificate in there!\r\n\t\t */\r\n\t\tthis.certs = getParametersValue(parameters, \"certs\", this.defaultValues(\"certs\"));\r\n\t\t/**\r\n\t\t * @type {Array.<CertificateRevocationList>}\r\n\t\t * @desc Array of all CRLs for all certificates from certificate chain\r\n\t\t */\r\n\t\tthis.crls = getParametersValue(parameters, \"crls\", this.defaultValues(\"crls\"));\r\n\t\t/**\r\n\t\t * @type {Array}\r\n\t\t * @desc Array of all OCSP responses\r\n\t\t */\r\n\t\tthis.ocsps = getParametersValue(parameters, \"ocsps\", this.defaultValues(\"ocsps\"));\r\n\t\t/**\r\n\t\t * @type {Date}\r\n\t\t * @desc The date at which the check would be\r\n\t\t */\r\n\t\tthis.checkDate = getParametersValue(parameters, \"checkDate\", this.defaultValues(\"checkDate\"));\r\n\t\t/**\r\n\t\t * @type {Function}\r\n\t\t * @desc The date at which the check would be\r\n\t\t */\r\n\t\tthis.findOrigin = getParametersValue(parameters, \"findOrigin\", this.defaultValues(\"findOrigin\"));\r\n\t\t/**\r\n\t\t * @type {Function}\r\n\t\t * @desc The date at which the check would be\r\n\t\t */\r\n\t\tthis.findIssuer = getParametersValue(parameters, \"findIssuer\", this.defaultValues(\"findIssuer\"));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\tstatic defaultFindOrigin(certificate, validationEngine)\r\n\t{\r\n\t\t//region Firstly encode TBS for certificate\r\n\t\tif(certificate.tbs.byteLength === 0)\r\n\t\t\tcertificate.tbs = certificate.encodeTBS();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Search in Intermediate Certificates\r\n\t\tfor(const localCert of validationEngine.certs)\r\n\t\t{\r\n\t\t\t//region Firstly encode TBS for certificate\r\n\t\t\tif(localCert.tbs.byteLength === 0)\r\n\t\t\t\tlocalCert.tbs = localCert.encodeTBS();\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(isEqualBuffer(certificate.tbs, localCert.tbs))\r\n\t\t\t\treturn \"Intermediate Certificates\";\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Search in Trusted Certificates\r\n\t\tfor(const trustedCert of validationEngine.trustedCerts)\r\n\t\t{\r\n\t\t\t//region Firstly encode TBS for certificate\r\n\t\t\tif(trustedCert.tbs.byteLength === 0)\r\n\t\t\t\ttrustedCert.tbs = trustedCert.encodeTBS();\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(isEqualBuffer(certificate.tbs, trustedCert.tbs))\r\n\t\t\t\treturn \"Trusted Certificates\";\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn \"Unknown\";\r\n\t}\r\n\t//**********************************************************************************\r\n\tasync defaultFindIssuer(certificate, validationEngine)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet result = [];\r\n\t\t\r\n\t\tlet keyIdentifier = null;\r\n\t\t\r\n\t\tlet authorityCertIssuer = null;\r\n\t\tlet authorityCertSerialNumber = null;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Speed-up searching in case of self-signed certificates\r\n\t\tif(certificate.subject.isEqual(certificate.issuer))\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tconst verificationResult = await certificate.verify();\r\n\t\t\t\tif(verificationResult === true)\r\n\t\t\t\t\treturn [certificate];\r\n\t\t\t}\r\n\t\t\tcatch(ex)\r\n\t\t\t{\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find values to speed-up search\r\n\t\tif(\"extensions\" in certificate)\r\n\t\t{\r\n\t\t\tfor(const extension of certificate.extensions)\r\n\t\t\t{\r\n\t\t\t\tif(extension.extnID === \"2.5.29.35\") // AuthorityKeyIdentifier\r\n\t\t\t\t{\r\n\t\t\t\t\tif(\"keyIdentifier\" in extension.parsedValue)\r\n\t\t\t\t\t\tkeyIdentifier = extension.parsedValue.keyIdentifier;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(\"authorityCertIssuer\" in extension.parsedValue)\r\n\t\t\t\t\t\t\tauthorityCertIssuer = extension.parsedValue.authorityCertIssuer;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(\"authorityCertSerialNumber\" in extension.parsedValue)\r\n\t\t\t\t\t\t\tauthorityCertSerialNumber = extension.parsedValue.authorityCertSerialNumber;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Aux function\r\n\t\tfunction checkCertificate(possibleIssuer)\r\n\t\t{\r\n\t\t\t//region Firstly search for appropriate extensions\r\n\t\t\tif(keyIdentifier !== null)\r\n\t\t\t{\r\n\t\t\t\tif(\"extensions\" in possibleIssuer)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet extensionFound = false;\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor(const extension of possibleIssuer.extensions)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(extension.extnID === \"2.5.29.14\") // SubjectKeyIdentifier\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\textensionFound = true;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(isEqualBuffer(extension.parsedValue.valueBlock.valueHex, keyIdentifier.valueBlock.valueHex))\r\n\t\t\t\t\t\t\t\tresult.push(possibleIssuer);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(extensionFound)\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Now search for authorityCertSerialNumber\r\n\t\t\tlet authorityCertSerialNumberEqual = false;\r\n\t\t\t\r\n\t\t\tif(authorityCertSerialNumber !== null)\r\n\t\t\t\tauthorityCertSerialNumberEqual = possibleIssuer.serialNumber.isEqual(authorityCertSerialNumber);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region And at least search for Issuer data\r\n\t\t\tif(authorityCertIssuer !== null)\r\n\t\t\t{\r\n\t\t\t\tif(possibleIssuer.subject.isEqual(authorityCertIssuer))\r\n\t\t\t\t{\r\n\t\t\t\t\tif(authorityCertSerialNumberEqual)\r\n\t\t\t\t\t\tresult.push(possibleIssuer);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif(certificate.issuer.isEqual(possibleIssuer.subject))\r\n\t\t\t\t\tresult.push(possibleIssuer);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Search in Trusted Certificates\r\n\t\tfor(const trustedCert of validationEngine.trustedCerts)\r\n\t\t\tcheckCertificate(trustedCert);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Search in Intermediate Certificates\r\n\t\tfor(const intermediateCert of validationEngine.certs)\r\n\t\t\tcheckCertificate(intermediateCert);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Now perform certificate verification checking\r\n\t\tfor(let i = 0; i < result.length; i++)\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tconst verificationResult = await certificate.verify(result[i]);\r\n\t\t\t\tif(verificationResult === false)\r\n\t\t\t\t\tresult.splice(i, 1);\r\n\t\t\t}\r\n\t\t\tcatch(ex)\r\n\t\t\t{\r\n\t\t\t\tresult.splice(i, 1); // Something wrong, remove the certificate\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tdefaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"trustedCerts\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"crls\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"ocsps\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"checkDate\":\r\n\t\t\t\treturn new Date();\r\n\t\t\tcase \"findOrigin\":\r\n\t\t\t\treturn CertificateChainValidationEngine.defaultFindOrigin;\r\n\t\t\tcase \"findIssuer\":\r\n\t\t\t\treturn this.defaultFindIssuer;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertificateChainValidationEngine class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\tasync sort(passedWhenNotRevValues = false)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tconst localCerts = [];\r\n\t\tconst _this = this;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Building certificate path\r\n\t\tasync function buildPath(certificate)\r\n\t\t{\r\n\t\t\tconst result = [];\r\n\t\t\t\r\n\t\t\t//region Aux function checking array for unique elements\r\n\t\t\tfunction checkUnique(array)\r\n\t\t\t{\r\n\t\t\t\tlet unique = true;\r\n\t\t\t\t\r\n\t\t\t\tfor(let i = 0; i < array.length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let j = 0; j < array.length; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(j === i)\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(array[i] === array[j])\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tunique = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(!unique)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn unique;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tconst findIssuerResult = await _this.findIssuer(certificate, _this);\r\n\t\t\tif(findIssuerResult.length === 0)\r\n\t\t\t\tthrow new Error(\"No valid certificate paths found\");\r\n\t\t\t\r\n\t\t\tfor(let i = 0; i < findIssuerResult.length; i++)\r\n\t\t\t{\r\n\t\t\t\tif(isEqualBuffer(findIssuerResult[i].tbs, certificate.tbs))\r\n\t\t\t\t{\r\n\t\t\t\t\tresult.push([findIssuerResult[i]]);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tconst buildPathResult = await buildPath(findIssuerResult[i]);\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < buildPathResult.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst copy = buildPathResult[j].slice();\r\n\t\t\t\t\tcopy.splice(0, 0, findIssuerResult[i]);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(checkUnique(copy))\r\n\t\t\t\t\t\tresult.push(copy);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tresult.push(buildPathResult[j]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find CRL for specific certificate\r\n\t\tasync function findCRL(certificate)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tconst issuerCertificates = [];\r\n\t\t\tconst crls = [];\r\n\t\t\tconst crlsAndCertificates = [];\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Find all possible CRL issuers\r\n\t\t\tissuerCertificates.push(...localCerts.filter(element => certificate.issuer.isEqual(element.subject)));\r\n\t\t\tif(issuerCertificates.length === 0)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tstatus: 1,\r\n\t\t\t\t\tstatusMessage: \"No certificate's issuers\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Find all CRLs for certificate's issuer\r\n\t\t\tcrls.push(..._this.crls.filter(element => element.issuer.isEqual(certificate.issuer)));\r\n\t\t\tif(crls.length === 0)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tstatus: 2,\r\n\t\t\t\t\tstatusMessage: \"No CRLs for specific certificate issuer\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Find specific certificate of issuer for each CRL\r\n\t\t\tfor(let i = 0; i < crls.length; i++)\r\n\t\t\t{\r\n\t\t\t\t//region Check \"nextUpdate\" for the CRL\r\n\t\t\t\t// The \"nextUpdate\" is older than \"checkDate\".\r\n\t\t\t\t// Thus we should do have another, updated CRL.\r\n\t\t\t\t// Thus the CRL assumed to be invalid.\r\n\t\t\t\tif(crls[i].nextUpdate.value < _this.checkDate)\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < issuerCertificates.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst result = await crls[i].verify({ issuerCertificate: issuerCertificates[j] });\r\n\t\t\t\t\t\tif(result)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcrlsAndCertificates.push({\r\n\t\t\t\t\t\t\t\tcrl: crls[i],\r\n\t\t\t\t\t\t\t\tcertificate: issuerCertificates[j]\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(crlsAndCertificates.length)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tstatus: 0,\r\n\t\t\t\t\tstatusMessage: \"\",\r\n\t\t\t\t\tresult: crlsAndCertificates\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn {\r\n\t\t\t\tstatus: 3,\r\n\t\t\t\tstatusMessage: \"No valid CRLs found\"\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find OCSP for specific certificate\r\n\t\tasync function findOCSP(certificate, issuerCertificate)\r\n\t\t{\r\n\t\t\t//region Get hash algorithm from certificate\r\n\t\t\tconst hashAlgorithm = getAlgorithmByOID(certificate.signatureAlgorithm.algorithmId);\r\n\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\treturn 1;\r\n\t\t\tif((\"hash\" in hashAlgorithm) === false)\r\n\t\t\t\treturn 1;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Search for OCSP response for the certificate\r\n\t\t\tfor(let i = 0; i < _this.ocsps.length; i++)\r\n\t\t\t{\r\n\t\t\t\tconst result = await _this.ocsps[i].getCertificateStatus(certificate, issuerCertificate);\r\n\t\t\t\tif(result.isForCertificate)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(result.status === 0)\r\n\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn 2;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check for certificate to be CA\r\n\t\tasync function checkForCA(certificate, needToCheckCRL = false)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet isCA = false;\r\n\t\t\tlet mustBeCA = false;\r\n\t\t\tlet keyUsagePresent = false;\r\n\t\t\tlet cRLSign = false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(\"extensions\" in certificate)\r\n\t\t\t{\r\n\t\t\t\tfor(let j = 0; j < certificate.extensions.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((certificate.extensions[j].critical === true) &&\r\n\t\t\t\t\t\t((\"parsedValue\" in certificate.extensions[j]) === false))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\tresultCode: 6,\r\n\t\t\t\t\t\t\tresultMessage: `Unable to parse critical certificate extension: ${certificate.extensions[j].extnID}`\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(certificate.extensions[j].extnID === \"2.5.29.15\") // KeyUsage\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tkeyUsagePresent = true;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconst view = new Uint8Array(certificate.extensions[j].parsedValue.valueBlock.valueHex);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif((view[0] & 0x04) === 0x04) // Set flag \"keyCertSign\"\r\n\t\t\t\t\t\t\tmustBeCA = true;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif((view[0] & 0x02) === 0x02) // Set flag \"cRLSign\"\r\n\t\t\t\t\t\t\tcRLSign = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(certificate.extensions[j].extnID === \"2.5.29.19\") // BasicConstraints\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(\"cA\" in certificate.extensions[j].parsedValue)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(certificate.extensions[j].parsedValue.cA === true)\r\n\t\t\t\t\t\t\t\tisCA = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif((mustBeCA === true) && (isCA === false))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: 3,\r\n\t\t\t\t\t\tresultMessage: \"Unable to build certificate chain - using \\\"keyCertSign\\\" flag set without BasicConstaints\"\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif((keyUsagePresent === true) && (isCA === true) && (mustBeCA === false))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: 4,\r\n\t\t\t\t\t\tresultMessage: \"Unable to build certificate chain - \\\"keyCertSign\\\" flag was not set\"\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// noinspection OverlyComplexBooleanExpressionJS\r\n\t\t\t\tif((isCA === true) && (keyUsagePresent === true) && ((needToCheckCRL) && (cRLSign === false)))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: 5,\r\n\t\t\t\t\t\tresultMessage: \"Unable to build certificate chain - intermediate certificate must have \\\"cRLSign\\\" key usage flag\"\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(isCA === false)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tresult: false,\r\n\t\t\t\t\tresultCode: 7,\r\n\t\t\t\t\tresultMessage: \"Unable to build certificate chain - more than one possible end-user certificate\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn {\r\n\t\t\t\tresult: true,\r\n\t\t\t\tresultCode: 0,\r\n\t\t\t\tresultMessage: \"\"\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Basic check for certificate path\r\n\t\tasync function basicCheck(path, checkDate)\r\n\t\t{\r\n\t\t\t//region Check that all dates are valid\r\n\t\t\tfor(let i = 0; i < path.length; i++)\r\n\t\t\t{\r\n\t\t\t\tif((path[i].notBefore.value > checkDate) ||\r\n\t\t\t\t\t(path[i].notAfter.value < checkDate))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: 8,\r\n\t\t\t\t\t\tresultMessage: \"The certificate is either not yet valid or expired\"\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check certificate name chain\r\n\t\t\t\r\n\t\t\t// We should have at least two certificates: end entity and trusted root\r\n\t\t\tif(path.length < 2)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tresult: false,\r\n\t\t\t\t\tresultCode: 9,\r\n\t\t\t\t\tresultMessage: \"Too short certificate path\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor(let i = (path.length - 2); i >= 0; i--)\r\n\t\t\t{\r\n\t\t\t\t//region Check that we do not have a \"self-signed\" certificate\r\n\t\t\t\tif(path[i].issuer.isEqual(path[i].subject) === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(path[i].issuer.isEqual(path[i + 1].subject) === false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\tresultCode: 10,\r\n\t\t\t\t\t\t\tresultMessage: \"Incorrect name chaining\"\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check each certificate (except \"trusted root\") to be non-revoked\r\n\t\t\tif((_this.crls.length !== 0) || (_this.ocsps.length !== 0)) // If CRLs and OCSPs are empty then we consider all certificates to be valid\r\n\t\t\t{\r\n\t\t\t\tfor(let i = 0; i < (path.length - 1); i++)\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\tlet ocspResult = 2;\r\n\t\t\t\t\tlet crlResult = {\r\n\t\t\t\t\t\tstatus: 0,\r\n\t\t\t\t\t\tstatusMessage: \"\"\r\n\t\t\t\t\t};\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Check OCSPs first\r\n\t\t\t\t\tif(_this.ocsps.length !== 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tocspResult = await findOCSP(path[i], path[i + 1]);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tswitch(ocspResult)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\t\tresultCode: 12,\r\n\t\t\t\t\t\t\t\t\tresultMessage: \"One of certificates was revoked via OCSP response\"\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tcase 2: // continue to check the certificate with CRL\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Check CRLs\r\n\t\t\t\t\tif(_this.crls.length !== 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcrlResult = await findCRL(path[i]);\r\n\r\n\t\t\t\t\t\tif(crlResult.status === 0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfor(let j = 0; j < crlResult.result.length; j++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Check that the CRL issuer certificate have not been revoked\r\n\t\t\t\t\t\t\t\tconst isCertificateRevoked = crlResult.result[j].crl.isCertificateRevoked(path[i]);\r\n\t\t\t\t\t\t\t\tif(isCertificateRevoked)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\t\t\tresultCode: 12,\r\n\t\t\t\t\t\t\t\t\t\tresultMessage: \"One of certificates had been revoked\"\r\n\t\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Check that the CRL issuer certificate is a CA certificate\r\n\t\t\t\t\t\t\t\tconst isCertificateCA = await checkForCA(crlResult.result[j].certificate, true);\r\n\t\t\t\t\t\t\t\tif(isCertificateCA.result === false)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\t\t\tresultCode: 13,\r\n\t\t\t\t\t\t\t\t\t\tresultMessage: \"CRL issuer certificate is not a CA certificate or does not have crlSign flag\"\r\n\t\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(passedWhenNotRevValues === false)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthrow {\r\n\t\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\t\tresultCode: 11,\r\n\t\t\t\t\t\t\t\t\tresultMessage: `No revocation values found for one of certificates: ${crlResult.statusMessage}`\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(ocspResult === 2)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\tresultCode: 11,\r\n\t\t\t\t\t\t\t\tresultMessage: \"No revocation values found for one of certificates\"\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Check we do have links to revocation values inside issuer's certificate\r\n\t\t\t\t\tif((ocspResult === 2) && (crlResult.status === 2) && passedWhenNotRevValues)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst issuerCertificate = path[i + 1];\r\n\t\t\t\t\t\tlet extensionFound = false;\r\n\r\n\t\t\t\t\t\tif(\"extensions\" in issuerCertificate)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfor(const extension of issuerCertificate.extensions)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tswitch(extension.extnID)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tcase \"2.5.29.31\": // CRLDistributionPoints\r\n\t\t\t\t\t\t\t\t\tcase \"2.5.29.46\": // FreshestCRL\r\n\t\t\t\t\t\t\t\t\tcase \"1.3.6.1.5.5.7.1.1\": // AuthorityInfoAccess\r\n\t\t\t\t\t\t\t\t\t\textensionFound = true;\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif(extensionFound)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthrow {\r\n\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\tresultCode: 11,\r\n\t\t\t\t\t\t\t\tresultMessage: `No revocation values found for one of certificates: ${crlResult.statusMessage}`\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check each certificate (except \"end entity\") in the path to be a CA certificate\r\n\t\t\tfor(let i = 1; i < path.length; i++)\r\n\t\t\t{\r\n\t\t\t\tconst result = await checkForCA(path[i]);\r\n\t\t\t\tif(result.result === false)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: 14,\r\n\t\t\t\t\t\tresultMessage: \"One of intermediate certificates is not a CA certificate\"\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn {\r\n\t\t\t\tresult: true\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Do main work\r\n\t\t//region Initialize \"localCerts\" by value of \"_this.certs\" + \"_this.trustedCerts\" arrays\r\n\t\tlocalCerts.push(..._this.trustedCerts);\r\n\t\tlocalCerts.push(..._this.certs);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check all certificates for been unique\r\n\t\tfor(let i = 0; i < localCerts.length; i++)\r\n\t\t{\r\n\t\t\tfor(let j = 0; j < localCerts.length; j++)\r\n\t\t\t{\r\n\t\t\t\tif(i === j)\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t\r\n\t\t\t\tif(isEqualBuffer(localCerts[i].tbs, localCerts[j].tbs))\r\n\t\t\t\t{\r\n\t\t\t\t\tlocalCerts.splice(j, 1);\r\n\t\t\t\t\ti = 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet result;\r\n\t\tconst certificatePath = [localCerts[localCerts.length - 1]]; // The \"end entity\" certificate must be the least in \"certs\" array\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Build path for \"end entity\" certificate\r\n\t\tresult = await buildPath(localCerts[localCerts.length - 1]);\r\n\t\tif(result.length === 0)\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tresult: false,\r\n\t\t\t\tresultCode: 60,\r\n\t\t\t\tresultMessage: \"Unable to find certificate path\"\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Exclude certificate paths not ended with \"trusted roots\"\r\n\t\tfor(let i = 0; i < result.length; i++)\r\n\t\t{\r\n\t\t\tlet found = false;\r\n\t\t\t\r\n\t\t\tfor(let j = 0; j < (result[i]).length; j++)\r\n\t\t\t{\r\n\t\t\t\tconst certificate = (result[i])[j];\r\n\t\t\t\t\r\n\t\t\t\tfor(let k = 0; k < _this.trustedCerts.length; k++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(isEqualBuffer(certificate.tbs, _this.trustedCerts[k].tbs))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfound = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(found)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(!found)\r\n\t\t\t{\r\n\t\t\t\tresult.splice(i, 1);\r\n\t\t\t\ti = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif(result.length === 0)\r\n\t\t{\r\n\t\t\tthrow {\r\n\t\t\t\tresult: false,\r\n\t\t\t\tresultCode: 97,\r\n\t\t\t\tresultMessage: \"No valid certificate paths found\"\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find shortest certificate path (for the moment it is the only criteria)\r\n\t\tlet shortestLength = result[0].length;\r\n\t\tlet shortestIndex = 0;\r\n\t\t\r\n\t\tfor(let i = 0; i < result.length; i++)\r\n\t\t{\r\n\t\t\tif(result[i].length < shortestLength)\r\n\t\t\t{\r\n\t\t\t\tshortestLength = result[i].length;\r\n\t\t\t\tshortestIndex = i;\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create certificate path for basic check\r\n\t\tfor(let i = 0; i < result[shortestIndex].length; i++)\r\n\t\t\tcertificatePath.push((result[shortestIndex])[i]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Perform basic checking for all certificates in the path\r\n\t\tresult = await basicCheck(certificatePath, _this.checkDate);\r\n\t\tif(result.result === false)\r\n\t\t\tthrow result;\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn certificatePath;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Major verification function for certificate chain.\r\n\t * @param {{initialPolicySet, initialExplicitPolicy, initialPolicyMappingInhibit, initialInhibitPolicy, initialPermittedSubtreesSet, initialExcludedSubtreesSet, initialRequiredNameForms}} [parameters]\r\n\t * @returns {Promise}\r\n\t */\r\n\tasync verify(parameters = {})\r\n\t{\r\n\t\t//region Auxiliary functions for name constraints checking\r\n\t\tfunction compareDNSName(name, constraint)\r\n\t\t{\r\n\t\t\t/// <summary>Compare two dNSName values</summary>\r\n\t\t\t/// <param name=\"name\" type=\"String\">DNS from name</param>\r\n\t\t\t/// <param name=\"constraint\" type=\"String\">Constraint for DNS from name</param>\r\n\t\t\t/// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\t\t\t\r\n\t\t\t//region Make a \"string preparation\" for both name and constrain\r\n\t\t\tconst namePrepared = stringPrep(name);\r\n\t\t\tconst constraintPrepared = stringPrep(constraint);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Make a \"splitted\" versions of \"constraint\" and \"name\"\r\n\t\t\tconst nameSplitted = namePrepared.split(\".\");\r\n\t\t\tconst constraintSplitted = constraintPrepared.split(\".\");\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Length calculation and additional check\r\n\t\t\tconst nameLen = nameSplitted.length;\r\n\t\t\tconst constrLen = constraintSplitted.length;\r\n\t\t\t\r\n\t\t\tif((nameLen === 0) || (constrLen === 0) || (nameLen < constrLen))\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check that no part of \"name\" has zero length\r\n\t\t\tfor(let i = 0; i < nameLen; i++)\r\n\t\t\t{\r\n\t\t\t\tif(nameSplitted[i].length === 0)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check that no part of \"constraint\" has zero length\r\n\t\t\tfor(let i = 0; i < constrLen; i++)\r\n\t\t\t{\r\n\t\t\t\tif(constraintSplitted[i].length === 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(i === 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(constrLen === 1)\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check that \"name\" has a tail as \"constraint\"\r\n\t\t\t\r\n\t\t\tfor(let i = 0; i < constrLen; i++)\r\n\t\t\t{\r\n\t\t\t\tif(constraintSplitted[constrLen - 1 - i].length === 0)\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t\r\n\t\t\t\tif(nameSplitted[nameLen - 1 - i].localeCompare(constraintSplitted[constrLen - 1 - i]) !== 0)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\tfunction compareRFC822Name(name, constraint)\r\n\t\t{\r\n\t\t\t/// <summary>Compare two rfc822Name values</summary>\r\n\t\t\t/// <param name=\"name\" type=\"String\">E-mail address from name</param>\r\n\t\t\t/// <param name=\"constraint\" type=\"String\">Constraint for e-mail address from name</param>\r\n\t\t\t/// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\t\t\t\r\n\t\t\t//region Make a \"string preparation\" for both name and constrain\r\n\t\t\tconst namePrepared = stringPrep(name);\r\n\t\t\tconst constraintPrepared = stringPrep(constraint);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Make a \"splitted\" versions of \"constraint\" and \"name\"\r\n\t\t\tconst nameSplitted = namePrepared.split(\"@\");\r\n\t\t\tconst constraintSplitted = constraintPrepared.split(\"@\");\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Splitted array length checking\r\n\t\t\tif((nameSplitted.length === 0) || (constraintSplitted.length === 0) || (nameSplitted.length < constraintSplitted.length))\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(constraintSplitted.length === 1)\r\n\t\t\t{\r\n\t\t\t\tconst result = compareDNSName(nameSplitted[1], constraintSplitted[0]);\r\n\t\t\t\t\r\n\t\t\t\tif(result)\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Make a \"splitted\" versions of domain name from \"constraint\" and \"name\"\r\n\t\t\t\t\tconst ns = nameSplitted[1].split(\".\");\r\n\t\t\t\t\tconst cs = constraintSplitted[0].split(\".\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(cs[0].length === 0)\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn ns.length === cs.length;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn (namePrepared.localeCompare(constraintPrepared) === 0);\r\n\t\t}\r\n\t\t\r\n\t\tfunction compareUniformResourceIdentifier(name, constraint)\r\n\t\t{\r\n\t\t\t/// <summary>Compare two uniformResourceIdentifier values</summary>\r\n\t\t\t/// <param name=\"name\" type=\"String\">uniformResourceIdentifier from name</param>\r\n\t\t\t/// <param name=\"constraint\" type=\"String\">Constraint for uniformResourceIdentifier from name</param>\r\n\t\t\t/// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\t\t\t\r\n\t\t\t//region Make a \"string preparation\" for both name and constrain\r\n\t\t\tlet namePrepared = stringPrep(name);\r\n\t\t\tconst constraintPrepared = stringPrep(constraint);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Find out a major URI part to compare with\r\n\t\t\tconst ns = namePrepared.split(\"/\");\r\n\t\t\tconst cs = constraintPrepared.split(\"/\");\r\n\t\t\t\r\n\t\t\tif(cs.length > 1) // Malformed constraint\r\n\t\t\t\treturn false;\r\n\t\t\t\r\n\t\t\tif(ns.length > 1) // Full URI string\r\n\t\t\t{\r\n\t\t\t\tfor(let i = 0; i < ns.length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((ns[i].length > 0) && (ns[i].charAt(ns[i].length - 1) !== \":\"))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst nsPort = ns[i].split(\":\");\r\n\t\t\t\t\t\tnamePrepared = nsPort[0];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tconst result = compareDNSName(namePrepared, constraintPrepared);\r\n\t\t\t\r\n\t\t\tif(result)\r\n\t\t\t{\r\n\t\t\t\t//region Make a \"splitted\" versions of \"constraint\" and \"name\"\r\n\t\t\t\tconst nameSplitted = namePrepared.split(\".\");\r\n\t\t\t\tconst constraintSplitted = constraintPrepared.split(\".\");\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tif(constraintSplitted[0].length === 0)\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t\r\n\t\t\t\treturn nameSplitted.length === constraintSplitted.length;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tfunction compareIPAddress(name, constraint)\r\n\t\t{\r\n\t\t\t/// <summary>Compare two iPAddress values</summary>\r\n\t\t\t/// <param name=\"name\" type=\"in_window.org.pkijs.asn1.OCTETSTRING\">iPAddress from name</param>\r\n\t\t\t/// <param name=\"constraint\" type=\"in_window.org.pkijs.asn1.OCTETSTRING\">Constraint for iPAddress from name</param>\r\n\t\t\t/// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\t\t\t\r\n\t\t\t//region Common variables\r\n\t\t\tconst nameView = new Uint8Array(name.valueBlock.valueHex);\r\n\t\t\tconst constraintView = new Uint8Array(constraint.valueBlock.valueHex);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Work with IPv4 addresses\r\n\t\t\tif((nameView.length === 4) && (constraintView.length === 8))\r\n\t\t\t{\r\n\t\t\t\tfor(let i = 0; i < 4; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((nameView[i] ^ constraintView[i]) & constraintView[i + 4])\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Work with IPv6 addresses\r\n\t\t\tif((nameView.length === 16) && (constraintView.length === 32))\r\n\t\t\t{\r\n\t\t\t\tfor(let i = 0; i < 16; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((nameView[i] ^ constraintView[i]) & constraintView[i + 16])\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tfunction compareDirectoryName(name, constraint)\r\n\t\t{\r\n\t\t\t/// <summary>Compare two directoryName values</summary>\r\n\t\t\t/// <param name=\"name\" type=\"in_window.org.pkijs.simpl.RDN\">directoryName from name</param>\r\n\t\t\t/// <param name=\"constraint\" type=\"in_window.org.pkijs.simpl.RDN\">Constraint for directoryName from name</param>\r\n\t\t\t/// <param name=\"any\" type=\"Boolean\">Boolean flag - should be comparision interrupted after first match or we need to match all \"constraints\" parts</param>\r\n\t\t\t/// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\t\t\t\r\n\t\t\t//region Initial check\r\n\t\t\tif((name.typesAndValues.length === 0) || (constraint.typesAndValues.length === 0))\r\n\t\t\t\treturn true;\r\n\t\t\t\r\n\t\t\tif(name.typesAndValues.length < constraint.typesAndValues.length)\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Initial variables\r\n\t\t\tlet result = true;\r\n\t\t\tlet nameStart = 0;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tfor(let i = 0; i < constraint.typesAndValues.length; i++)\r\n\t\t\t{\r\n\t\t\t\tlet localResult = false;\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = nameStart; j < name.typesAndValues.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tlocalResult = name.typesAndValues[j].isEqual(constraint.typesAndValues[i]);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(name.typesAndValues[j].type === constraint.typesAndValues[i].type)\r\n\t\t\t\t\t\tresult = result && localResult;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(localResult === true)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif((nameStart === 0) || (nameStart === j))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tnameStart = j + 1;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse // Structure of \"name\" must be the same with \"constraint\"\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(localResult === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn (nameStart === 0) ? false : result;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\t//region Initial checks\r\n\t\t\tif(this.certs.length === 0)\r\n\t\t\t\tthrow \"Empty certificate array\";\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Get input variables\r\n\t\t\tlet passedWhenNotRevValues = false;\r\n\r\n\t\t\tif(\"passedWhenNotRevValues\" in parameters)\r\n\t\t\t\tpassedWhenNotRevValues = parameters.passedWhenNotRevValues;\r\n\r\n\t\t\tlet initialPolicySet = [];\r\n\t\t\tinitialPolicySet.push(\"2.5.29.32.0\"); // \"anyPolicy\"\r\n\t\t\t\r\n\t\t\tlet initialExplicitPolicy = false;\r\n\t\t\tlet initialPolicyMappingInhibit = false;\r\n\t\t\tlet initialInhibitPolicy = false;\r\n\t\t\t\r\n\t\t\tlet initialPermittedSubtreesSet = []; // Array of \"simpl.x509.GeneralSubtree\"\r\n\t\t\tlet initialExcludedSubtreesSet = [];  // Array of \"simpl.x509.GeneralSubtree\"\r\n\t\t\tlet initialRequiredNameForms = [];    // Array of \"simpl.x509.GeneralSubtree\"\r\n\t\t\t\r\n\t\t\tif(\"initialPolicySet\" in parameters)\r\n\t\t\t\tinitialPolicySet = parameters.initialPolicySet;\r\n\t\t\t\r\n\t\t\tif(\"initialExplicitPolicy\" in parameters)\r\n\t\t\t\tinitialExplicitPolicy = parameters.initialExplicitPolicy;\r\n\t\t\t\r\n\t\t\tif(\"initialPolicyMappingInhibit\" in parameters)\r\n\t\t\t\tinitialPolicyMappingInhibit = parameters.initialPolicyMappingInhibit;\r\n\t\t\t\r\n\t\t\tif(\"initialInhibitPolicy\" in parameters)\r\n\t\t\t\tinitialInhibitPolicy = parameters.initialInhibitPolicy;\r\n\t\t\t\r\n\t\t\tif(\"initialPermittedSubtreesSet\" in parameters)\r\n\t\t\t\tinitialPermittedSubtreesSet = parameters.initialPermittedSubtreesSet;\r\n\t\t\t\r\n\t\t\tif(\"initialExcludedSubtreesSet\" in parameters)\r\n\t\t\t\tinitialExcludedSubtreesSet = parameters.initialExcludedSubtreesSet;\r\n\t\t\t\r\n\t\t\tif(\"initialRequiredNameForms\" in parameters)\r\n\t\t\t\tinitialRequiredNameForms = parameters.initialRequiredNameForms;\r\n\t\t\t\r\n\t\t\tlet explicitPolicyIndicator = initialExplicitPolicy;\r\n\t\t\tlet policyMappingInhibitIndicator = initialPolicyMappingInhibit;\r\n\t\t\tlet inhibitAnyPolicyIndicator = initialInhibitPolicy;\r\n\t\t\t\r\n\t\t\tconst pendingConstraints = new Array(3);\r\n\t\t\tpendingConstraints[0] = false; // For \"explicitPolicyPending\"\r\n\t\t\tpendingConstraints[1] = false; // For \"policyMappingInhibitPending\"\r\n\t\t\tpendingConstraints[2] = false; // For \"inhibitAnyPolicyPending\"\r\n\t\t\t\r\n\t\t\tlet explicitPolicyPending = 0;\r\n\t\t\tlet policyMappingInhibitPending = 0;\r\n\t\t\tlet inhibitAnyPolicyPending = 0;\r\n\t\t\t\r\n\t\t\tlet permittedSubtrees = initialPermittedSubtreesSet;\r\n\t\t\tlet excludedSubtrees = initialExcludedSubtreesSet;\r\n\t\t\tconst requiredNameForms = initialRequiredNameForms;\r\n\t\t\t\r\n\t\t\tlet pathDepth = 1;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Sorting certificates in the chain array\r\n\t\t\tthis.certs = await this.sort(passedWhenNotRevValues);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Work with policies\r\n\t\t\t//region Support variables\r\n\t\t\tconst allPolicies = []; // Array of all policies (string values)\r\n\t\t\tallPolicies.push(\"2.5.29.32.0\"); // Put \"anyPolicy\" at first place\r\n\t\t\t\r\n\t\t\tconst policiesAndCerts = []; // In fact \"array of array\" where rows are for each specific policy, column for each certificate and value is \"true/false\"\r\n\t\t\t\r\n\t\t\tconst anyPolicyArray = new Array(this.certs.length - 1); // Minus \"trusted anchor\"\r\n\t\t\tfor(let ii = 0; ii < (this.certs.length - 1); ii++)\r\n\t\t\t\tanyPolicyArray[ii] = true;\r\n\t\t\t\r\n\t\t\tpoliciesAndCerts.push(anyPolicyArray);\r\n\t\t\t\r\n\t\t\tconst policyMappings = new Array(this.certs.length - 1); // Array of \"PolicyMappings\" for each certificate\r\n\t\t\tconst certPolicies = new Array(this.certs.length - 1); // Array of \"CertificatePolicies\" for each certificate\r\n\t\t\t\r\n\t\t\tlet explicitPolicyStart = (explicitPolicyIndicator) ? (this.certs.length - 1) : (-1);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Gather all neccessary information from certificate chain\r\n\t\t\tfor(let i = (this.certs.length - 2); i >= 0; i--, pathDepth++)\r\n\t\t\t{\r\n\t\t\t\tif(\"extensions\" in this.certs[i])\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Get information about certificate extensions\r\n\t\t\t\t\tfor(let j = 0; j < this.certs[i].extensions.length; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region CertificatePolicies\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.32\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcertPolicies[i] = this.certs[i].extensions[j].parsedValue;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t//region Remove entry from \"anyPolicies\" for the certificate\r\n\t\t\t\t\t\t\tfor(let s = 0; s < allPolicies.length; s++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(allPolicies[s] === \"2.5.29.32.0\")\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tdelete (policiesAndCerts[s])[i];\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tfor(let k = 0; k < this.certs[i].extensions[j].parsedValue.certificatePolicies.length; k++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlet policyIndex = (-1);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t//region Try to find extension in \"allPolicies\" array\r\n\t\t\t\t\t\t\t\tfor(let s = 0; s < allPolicies.length; s++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(this.certs[i].extensions[j].parsedValue.certificatePolicies[k].policyIdentifier === allPolicies[s])\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tpolicyIndex = s;\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif(policyIndex === (-1))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tallPolicies.push(this.certs[i].extensions[j].parsedValue.certificatePolicies[k].policyIdentifier);\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tconst certArray = new Array(this.certs.length - 1);\r\n\t\t\t\t\t\t\t\t\tcertArray[i] = true;\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tpoliciesAndCerts.push(certArray);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t(policiesAndCerts[policyIndex])[i] = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region PolicyMappings\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.33\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(policyMappingInhibitIndicator)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\t\tresultCode: 98,\r\n\t\t\t\t\t\t\t\t\tresultMessage: \"Policy mapping prohibited\"\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tpolicyMappings[i] = this.certs[i].extensions[j].parsedValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region PolicyConstraints\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.36\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(explicitPolicyIndicator === false)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region requireExplicitPolicy\r\n\t\t\t\t\t\t\t\tif(this.certs[i].extensions[j].parsedValue.requireExplicitPolicy === 0)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\texplicitPolicyIndicator = true;\r\n\t\t\t\t\t\t\t\t\texplicitPolicyStart = i;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(pendingConstraints[0] === false)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tpendingConstraints[0] = true;\r\n\t\t\t\t\t\t\t\t\t\texplicitPolicyPending = this.certs[i].extensions[j].parsedValue.requireExplicitPolicy;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\texplicitPolicyPending = (explicitPolicyPending > this.certs[i].extensions[j].parsedValue.requireExplicitPolicy) ? this.certs[i].extensions[j].parsedValue.requireExplicitPolicy : explicitPolicyPending;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t//region inhibitPolicyMapping\r\n\t\t\t\t\t\t\t\tif(this.certs[i].extensions[j].parsedValue.inhibitPolicyMapping === 0)\r\n\t\t\t\t\t\t\t\t\tpolicyMappingInhibitIndicator = true;\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(pendingConstraints[1] === false)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tpendingConstraints[1] = true;\r\n\t\t\t\t\t\t\t\t\t\tpolicyMappingInhibitPending = this.certs[i].extensions[j].parsedValue.inhibitPolicyMapping + 1;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\tpolicyMappingInhibitPending = (policyMappingInhibitPending > (this.certs[i].extensions[j].parsedValue.inhibitPolicyMapping + 1)) ? (this.certs[i].extensions[j].parsedValue.inhibitPolicyMapping + 1) : policyMappingInhibitPending;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region InhibitAnyPolicy\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.54\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(inhibitAnyPolicyIndicator === false)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(this.certs[i].extensions[j].parsedValue.valueBlock.valueDec === 0)\r\n\t\t\t\t\t\t\t\t\tinhibitAnyPolicyIndicator = true;\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(pendingConstraints[2] === false)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tpendingConstraints[2] = true;\r\n\t\t\t\t\t\t\t\t\t\tinhibitAnyPolicyPending = this.certs[i].extensions[j].parsedValue.valueBlock.valueDec;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\tinhibitAnyPolicyPending = (inhibitAnyPolicyPending > this.certs[i].extensions[j].parsedValue.valueBlock.valueDec) ? this.certs[i].extensions[j].parsedValue.valueBlock.valueDec : inhibitAnyPolicyPending;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Check \"inhibitAnyPolicyIndicator\"\r\n\t\t\t\t\tif(inhibitAnyPolicyIndicator === true)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet policyIndex = (-1);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Find \"anyPolicy\" index\r\n\t\t\t\t\t\tfor(let searchAnyPolicy = 0; searchAnyPolicy < allPolicies.length; searchAnyPolicy++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(allPolicies[searchAnyPolicy] === \"2.5.29.32.0\")\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tpolicyIndex = searchAnyPolicy;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(policyIndex !== (-1))\r\n\t\t\t\t\t\t\tdelete (policiesAndCerts[0])[i]; // Unset value to \"undefined\" for \"anyPolicies\" value for current certificate\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Process with \"pending constraints\"\r\n\t\t\t\t\tif(explicitPolicyIndicator === false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(pendingConstraints[0] === true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\texplicitPolicyPending--;\r\n\t\t\t\t\t\t\tif(explicitPolicyPending === 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\texplicitPolicyIndicator = true;\r\n\t\t\t\t\t\t\t\texplicitPolicyStart = i;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tpendingConstraints[0] = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(policyMappingInhibitIndicator === false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(pendingConstraints[1] === true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpolicyMappingInhibitPending--;\r\n\t\t\t\t\t\t\tif(policyMappingInhibitPending === 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tpolicyMappingInhibitIndicator = true;\r\n\t\t\t\t\t\t\t\tpendingConstraints[1] = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(inhibitAnyPolicyIndicator === false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(pendingConstraints[2] === true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tinhibitAnyPolicyPending--;\r\n\t\t\t\t\t\t\tif(inhibitAnyPolicyPending === 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tinhibitAnyPolicyIndicator = true;\r\n\t\t\t\t\t\t\t\tpendingConstraints[2] = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Working with policy mappings\r\n\t\t\tfor(let i = 0; i < (this.certs.length - 1); i++)\r\n\t\t\t{\r\n\t\t\t\t//region Check that there is \"policy mapping\" for level \"i + 1\"\r\n\t\t\t\tif((i < (this.certs.length - 2)) && (typeof policyMappings[i + 1] !== \"undefined\"))\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let k = 0; k < policyMappings[i + 1].mappings.length; k++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region Check that we do not have \"anyPolicy\" in current mapping\r\n\t\t\t\t\t\tif((policyMappings[i + 1].mappings[k].issuerDomainPolicy === \"2.5.29.32.0\") || (policyMappings[i + 1].mappings[k].subjectDomainPolicy === \"2.5.29.32.0\"))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\tresultCode: 99,\r\n\t\t\t\t\t\t\t\tresultMessage: \"The \\\"anyPolicy\\\" should not be a part of policy mapping scheme\"\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\tlet issuerDomainPolicyIndex = (-1);\r\n\t\t\t\t\t\tlet subjectDomainPolicyIndex = (-1);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Search for index of policies indedes\r\n\t\t\t\t\t\tfor(let n = 0; n < allPolicies.length; n++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(allPolicies[n] === policyMappings[i + 1].mappings[k].issuerDomainPolicy)\r\n\t\t\t\t\t\t\t\tissuerDomainPolicyIndex = n;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(allPolicies[n] === policyMappings[i + 1].mappings[k].subjectDomainPolicy)\r\n\t\t\t\t\t\t\t\tsubjectDomainPolicyIndex = n;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Delete existing \"issuerDomainPolicy\" because on the level we mapped the policy to another one\r\n\t\t\t\t\t\tif(typeof (policiesAndCerts[issuerDomainPolicyIndex])[i] !== \"undefined\")\r\n\t\t\t\t\t\t\tdelete (policiesAndCerts[issuerDomainPolicyIndex])[i];\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Check all policies for the certificate\r\n\t\t\t\t\t\tfor(let j = 0; j < certPolicies[i].certificatePolicies.length; j++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(policyMappings[i + 1].mappings[k].subjectDomainPolicy === certPolicies[i].certificatePolicies[j].policyIdentifier)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Set mapped policy for current certificate\r\n\t\t\t\t\t\t\t\tif((issuerDomainPolicyIndex !== (-1)) && (subjectDomainPolicyIndex !== (-1)))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let m = 0; m <= i; m++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif(typeof (policiesAndCerts[subjectDomainPolicyIndex])[m] !== \"undefined\")\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t(policiesAndCerts[issuerDomainPolicyIndex])[m] = true;\r\n\t\t\t\t\t\t\t\t\t\t\tdelete (policiesAndCerts[subjectDomainPolicyIndex])[m];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Working with \"explicitPolicyIndicator\" and \"anyPolicy\"\r\n\t\t\tfor(let i = 0; i < allPolicies.length; i++)\r\n\t\t\t{\r\n\t\t\t\tif(allPolicies[i] === \"2.5.29.32.0\")\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let j = 0; j < explicitPolicyStart; j++)\r\n\t\t\t\t\t\tdelete (policiesAndCerts[i])[j];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Create \"set of authorities-constrained policies\"\r\n\t\t\tconst authConstrPolicies = [];\r\n\t\t\t\r\n\t\t\tfor(let i = 0; i < policiesAndCerts.length; i++)\r\n\t\t\t{\r\n\t\t\t\tlet found = true;\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < (this.certs.length - 1); j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet anyPolicyFound = false;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((j < explicitPolicyStart) && (allPolicies[i] === \"2.5.29.32.0\") && (allPolicies.length > 1))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfound = false;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(typeof (policiesAndCerts[i])[j] === \"undefined\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(j >= explicitPolicyStart)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//region Search for \"anyPolicy\" in the policy set\r\n\t\t\t\t\t\t\tfor(let k = 0; k < allPolicies.length; k++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(allPolicies[k] === \"2.5.29.32.0\")\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif((policiesAndCerts[k])[j] === true)\r\n\t\t\t\t\t\t\t\t\t\tanyPolicyFound = true;\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(!anyPolicyFound)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfound = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(found === true)\r\n\t\t\t\t\tauthConstrPolicies.push(allPolicies[i]);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Create \"set of user-constrained policies\"\r\n\t\t\tlet userConstrPolicies = [];\r\n\t\t\t\r\n\t\t\tif((initialPolicySet.length === 1) && (initialPolicySet[0] === \"2.5.29.32.0\") && (explicitPolicyIndicator === false))\r\n\t\t\t\tuserConstrPolicies = initialPolicySet;\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif((authConstrPolicies.length === 1) && (authConstrPolicies[0] === \"2.5.29.32.0\"))\r\n\t\t\t\t\tuserConstrPolicies = initialPolicySet;\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let i = 0; i < authConstrPolicies.length; i++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor(let j = 0; j < initialPolicySet.length; j++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif((initialPolicySet[j] === authConstrPolicies[i]) || (initialPolicySet[j] === \"2.5.29.32.0\"))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tuserConstrPolicies.push(authConstrPolicies[i]);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Combine output object\r\n\t\t\tconst policyResult = {\r\n\t\t\t\tresult: (userConstrPolicies.length > 0),\r\n\t\t\t\tresultCode: 0,\r\n\t\t\t\tresultMessage: (userConstrPolicies.length > 0) ? \"\" : \"Zero \\\"userConstrPolicies\\\" array, no intersections with \\\"authConstrPolicies\\\"\",\r\n\t\t\t\tauthConstrPolicies,\r\n\t\t\t\tuserConstrPolicies,\r\n\t\t\t\texplicitPolicyIndicator,\r\n\t\t\t\tpolicyMappings,\r\n\t\t\t\tcertificatePath: this.certs\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tif(userConstrPolicies.length === 0)\r\n\t\t\t\treturn policyResult;\r\n\t\t\t//endregion\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Work with name constraints\r\n\t\t\t//region Check a result from \"policy checking\" part\r\n\t\t\tif(policyResult.result === false)\r\n\t\t\t\treturn policyResult;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check all certificates, excluding \"trust anchor\"\r\n\t\t\tpathDepth = 1;\r\n\t\t\t\r\n\t\t\tfor(let i = (this.certs.length - 2); i >= 0; i--, pathDepth++)\r\n\t\t\t{\r\n\t\t\t\t//region Support variables\r\n\t\t\t\tlet subjectAltNames = [];\r\n\t\t\t\t\r\n\t\t\t\tlet certPermittedSubtrees = [];\r\n\t\t\t\tlet certExcludedSubtrees = [];\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tif(\"extensions\" in this.certs[i])\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let j = 0; j < this.certs[i].extensions.length; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region NameConstraints\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.30\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(\"permittedSubtrees\" in this.certs[i].extensions[j].parsedValue)\r\n\t\t\t\t\t\t\t\tcertPermittedSubtrees = certPermittedSubtrees.concat(this.certs[i].extensions[j].parsedValue.permittedSubtrees);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(\"excludedSubtrees\" in this.certs[i].extensions[j].parsedValue)\r\n\t\t\t\t\t\t\t\tcertExcludedSubtrees = certExcludedSubtrees.concat(this.certs[i].extensions[j].parsedValue.excludedSubtrees);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region SubjectAltName\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.17\")\r\n\t\t\t\t\t\t\tsubjectAltNames = subjectAltNames.concat(this.certs[i].extensions[j].parsedValue.altNames);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t//region Checking for \"required name forms\"\r\n\t\t\t\tlet formFound = (requiredNameForms.length <= 0);\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < requiredNameForms.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tswitch(requiredNameForms[j].base.type)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase 4: // directoryName\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(requiredNameForms[j].base.value.typesAndValues.length !== this.certs[i].subject.typesAndValues.length)\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tformFound = true;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tfor(let k = 0; k < this.certs[i].subject.typesAndValues.length; k++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(this.certs[i].subject.typesAndValues[k].type !== requiredNameForms[j].base.value.typesAndValues[k].type)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tformFound = false;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(formFound === true)\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault: // ??? Probably here we should reject the certificate ???\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(formFound === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tpolicyResult.result = false;\r\n\t\t\t\t\tpolicyResult.resultCode = 21;\r\n\t\t\t\t\tpolicyResult.resultMessage = \"No neccessary name form found\";\r\n\t\t\t\t\t\r\n\t\t\t\t\tthrow policyResult;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Checking for \"permited sub-trees\"\r\n\t\t\t\t//region Make groups for all types of constraints\r\n\t\t\t\tconst constrGroups = []; // Array of array for groupped constraints\r\n\t\t\t\tconstrGroups[0] = []; // rfc822Name\r\n\t\t\t\tconstrGroups[1] = []; // dNSName\r\n\t\t\t\tconstrGroups[2] = []; // directoryName\r\n\t\t\t\tconstrGroups[3] = []; // uniformResourceIdentifier\r\n\t\t\t\tconstrGroups[4] = []; // iPAddress\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < permittedSubtrees.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tswitch(permittedSubtrees[j].base.type)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region rfc822Name\r\n\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\tconstrGroups[0].push(permittedSubtrees[j]);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region dNSName\r\n\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\tconstrGroups[1].push(permittedSubtrees[j]);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region directoryName\r\n\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t\tconstrGroups[2].push(permittedSubtrees[j]);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region uniformResourceIdentifier\r\n\t\t\t\t\t\tcase 6:\r\n\t\t\t\t\t\t\tconstrGroups[3].push(permittedSubtrees[j]);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region iPAddress\r\n\t\t\t\t\t\tcase 7:\r\n\t\t\t\t\t\t\tconstrGroups[4].push(permittedSubtrees[j]);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region default\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Check name constraints groupped by type, one-by-one\r\n\t\t\t\tfor(let p = 0; p < 5; p++)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet groupPermitted = false;\r\n\t\t\t\t\tlet valueExists = false;\r\n\t\t\t\t\tconst group = constrGroups[p];\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor(let j = 0; j < group.length; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tswitch(p)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//region rfc822Name\r\n\t\t\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 1) // rfc822Name\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\t\t\t\tgroupPermitted = groupPermitted || compareRFC822Name(subjectAltNames[k].value, group[j].base.value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse // Try to find out \"emailAddress\" inside \"subject\"\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let k = 0; k < this.certs[i].subject.typesAndValues.length; k++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif((this.certs[i].subject.typesAndValues[k].type === \"1.2.840.113549.1.9.1\") ||    // PKCS#9 e-mail address\r\n\t\t\t\t\t\t\t\t\t\t\t(this.certs[i].subject.typesAndValues[k].type === \"0.9.2342.19200300.100.1.3\")) // RFC1274 \"rfc822Mailbox\" e-mail address\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\t\t\t\tgroupPermitted = groupPermitted || compareRFC822Name(this.certs[i].subject.typesAndValues[k].value.valueBlock.value, group[j].base.value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region dNSName\r\n\t\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 2) // dNSName\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\t\t\t\tgroupPermitted = groupPermitted || compareDNSName(subjectAltNames[k].value, group[j].base.value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region directoryName\r\n\t\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\tgroupPermitted = compareDirectoryName(this.certs[i].subject, group[j].base.value);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region uniformResourceIdentifier\r\n\t\t\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 6) // uniformResourceIdentifier\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\t\t\t\tgroupPermitted = groupPermitted || compareUniformResourceIdentifier(subjectAltNames[k].value, group[j].base.value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region iPAddress\r\n\t\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 7) // iPAddress\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\t\t\t\tgroupPermitted = groupPermitted || compareIPAddress(subjectAltNames[k].value, group[j].base.value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region default\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(groupPermitted)\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((groupPermitted === false) && (group.length > 0) && valueExists)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpolicyResult.result = false;\r\n\t\t\t\t\t\tpolicyResult.resultCode = 41;\r\n\t\t\t\t\t\tpolicyResult.resultMessage = \"Failed to meet \\\"permitted sub-trees\\\" name constraint\";\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tthrow policyResult;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Checking for \"excluded sub-trees\"\r\n\t\t\t\tlet excluded = false;\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < excludedSubtrees.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tswitch(excludedSubtrees[j].base.type)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region rfc822Name\r\n\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\tif(subjectAltNames.length >= 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 1) // rfc822Name\r\n\t\t\t\t\t\t\t\t\t\texcluded = excluded || compareRFC822Name(subjectAltNames[k].value, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse // Try to find out \"emailAddress\" inside \"subject\"\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor(let k = 0; k < this.certs[i].subject.typesAndValues.length; k++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif((this.certs[i].subject.typesAndValues[k].type === \"1.2.840.113549.1.9.1\") ||    // PKCS#9 e-mail address\r\n\t\t\t\t\t\t\t\t\t\t(this.certs[i].subject.typesAndValues[k].type === \"0.9.2342.19200300.100.1.3\")) // RFC1274 \"rfc822Mailbox\" e-mail address\r\n\t\t\t\t\t\t\t\t\t\texcluded = excluded || compareRFC822Name(this.certs[i].subject.typesAndValues[k].value.valueBlock.value, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region dNSName\r\n\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 2) // dNSName\r\n\t\t\t\t\t\t\t\t\t\texcluded = excluded || compareDNSName(subjectAltNames[k].value, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region directoryName\r\n\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t\texcluded = excluded || compareDirectoryName(this.certs[i].subject, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region uniformResourceIdentifier\r\n\t\t\t\t\t\tcase 6:\r\n\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 6) // uniformResourceIdentifier\r\n\t\t\t\t\t\t\t\t\t\texcluded = excluded || compareUniformResourceIdentifier(subjectAltNames[k].value, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region iPAddress\r\n\t\t\t\t\t\tcase 7:\r\n\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 7) // iPAddress\r\n\t\t\t\t\t\t\t\t\t\texcluded = excluded || compareIPAddress(subjectAltNames[k].value, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region default\r\n\t\t\t\t\t\tdefault: // No action, but probably here we need to create a warning for \"malformed constraint\"\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(excluded)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(excluded === true)\r\n\t\t\t\t{\r\n\t\t\t\t\tpolicyResult.result = false;\r\n\t\t\t\t\tpolicyResult.resultCode = 42;\r\n\t\t\t\t\tpolicyResult.resultMessage = \"Failed to meet \\\"excluded sub-trees\\\" name constraint\";\r\n\t\t\t\t\t\r\n\t\t\t\t\tthrow policyResult;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Append \"cert_..._subtrees\" to \"..._subtrees\"\r\n\t\t\t\tpermittedSubtrees = permittedSubtrees.concat(certPermittedSubtrees);\r\n\t\t\t\texcludedSubtrees = excludedSubtrees.concat(certExcludedSubtrees);\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn policyResult;\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\tcatch(error)\r\n\t\t{\r\n\t\t\tif(error instanceof Object)\r\n\t\t\t{\r\n\t\t\t\tif(\"resultMessage\" in error)\r\n\t\t\t\t\treturn error;\r\n\t\t\t\t\r\n\t\t\t\tif(\"message\" in error)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: -1,\r\n\t\t\t\t\t\tresultMessage: error.message\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn {\r\n\t\t\t\tresult: false,\r\n\t\t\t\tresultCode: -1,\r\n\t\t\t\tresultMessage: error\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"CertificateChainValidationEngine.js"}