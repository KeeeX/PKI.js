{"version":3,"sources":["../src/SafeContents.js"],"names":["SafeContents","constructor","parameters","safeBags","defaultValues","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","length","names","asn1js","Sequence","name","blockName","value","Repeated","SafeBag","asn1","compareSchema","verified","Array","from","result","element","toSchema","toJSON"],"mappings":"6FAAA,sDACA,gCACA,6D,gfACA;AACA;;GAGe,KAAMA,CAAAA,YACrB,CACC;AACA;;;;IAKAC,WAAW,CAACC,UAAU,CAAG,EAAd,CACX,CACC;AACA;;;KAIA,KAAKC,QAAL,CAAgB,gCAAmBD,UAAnB,CAA+B,UAA/B,CAA2CF,YAAY,CAACI,aAAb,CAA2B,UAA3B,CAA3C,CAAhB,CACA;AAEA;AACA,GAAG,UAAYF,CAAAA,UAAf,CACC,KAAKG,UAAL,CAAgBH,UAAU,CAACI,MAA3B,EACD;AACA,CACD;AACA;;;IAIA,MAAOF,CAAAA,aAAP,CAAqBG,UAArB,CACA,CACC,OAAOA,UAAP,EAEC,IAAK,UAAL,CACC,MAAO,EAAP,CACD,QACC,KAAM,IAAIC,CAAAA,KAAJ,CAAW,+CAA8CD,UAAW,EAApE,CAAN,CALF,CAOA,CACD;AACA;;;;IAKA,MAAOE,CAAAA,kBAAP,CAA0BF,UAA1B,CAAsCG,WAAtC,CACA,CACC,OAAOH,UAAP,EAEC,IAAK,UAAL,CACC,MAAQG,CAAAA,WAAW,CAACC,MAAZ,GAAuB,CAA/B,CACD,QACC,KAAM,IAAIH,CAAAA,KAAJ,CAAW,+CAA8CD,UAAW,EAApE,CAAN,CALF,CAOA,CACD;AACA;;;;;;;;;;IAWA,MAAOD,CAAAA,MAAP,CAAcJ,UAAU,CAAG,EAA3B,CACA,CACC;;;;KAKA,KAAMU,CAAAA,KAAK,CAAG,gCAAmBV,UAAnB,CAA+B,OAA/B,CAAwC,EAAxC,CAAd,CAEA,MAAQ,IAAIW,CAAAA,MAAM,CAACC,QAAX,CAAoB,CAC3BC,IAAI,CAAGH,KAAK,CAACI,SAAN,EAAmB,EADC,CAE3BC,KAAK,CAAE,CACN,GAAIJ,CAAAA,MAAM,CAACK,QAAX,CAAoB,CACnBH,IAAI,CAAGH,KAAK,CAACT,QAAN,EAAkB,EADN,CAEnBc,KAAK,CAAEE,iBAAQb,MAAR,EAFY,CAApB,CADM,CAFoB,CAApB,CAAR,CASA,CACD;AACA;;;IAIAD,UAAU,CAACC,MAAD,CACV,CACC;AACA,wBAAWA,MAAX,CAAmB,CAClB,UADkB,CAAnB,EAGA;AAEA;AACA,KAAMc,CAAAA,IAAI,CAAGP,MAAM,CAACQ,aAAP,CAAqBf,MAArB,CACZA,MADY,CAEZN,YAAY,CAACM,MAAb,CAAoB,CACnBM,KAAK,CAAE,CACNT,QAAQ,CAAE,UADJ,CADY,CAApB,CAFY,CAAb,CASA,GAAGiB,IAAI,CAACE,QAAL,GAAkB,KAArB,CACC,KAAM,IAAId,CAAAA,KAAJ,CAAU,sEAAV,CAAN,CACD;AAEA;AACA,KAAKL,QAAL,CAAgBoB,KAAK,CAACC,IAAN,CAAWJ,IAAI,CAACK,MAAL,CAAYtB,QAAvB,CAAiCuB,OAAO,EAAI,GAAIP,iBAAJ,CAAY,CAAEb,MAAM,CAAEoB,OAAV,CAAZ,CAA5C,CAAhB,CACA;AACA,CACD;AACA;;;IAIAC,QAAQ,EACR,CACC;AACA,MAAQ,IAAId,CAAAA,MAAM,CAACC,QAAX,CAAoB,CAC3BG,KAAK,CAAEM,KAAK,CAACC,IAAN,CAAW,KAAKrB,QAAhB,CAA0BuB,OAAO,EAAIA,OAAO,CAACC,QAAR,EAArC,CADoB,CAApB,CAAR,CAGA;AACA,CACD;AACA;;;IAIAC,MAAM,EACN,CACC,MAAO,CACNzB,QAAQ,CAAEoB,KAAK,CAACC,IAAN,CAAW,KAAKrB,QAAhB,CAA0BuB,OAAO,EAAIA,OAAO,CAACE,MAAR,EAArC,CADJ,CAAP,CAGA,CACD;AA3ID,CA6IA","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport SafeBag from \"./SafeBag.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC7292\r\n */\r\nexport default class SafeContents\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SafeContents class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<SafeBag>}\r\n\t\t * @desc safeBags\r\n\t\t */\r\n\t\tthis.safeBags = getParametersValue(parameters, \"safeBags\", SafeContents.defaultValues(\"safeBags\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"safeBags\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SafeContents class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"safeBags\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SafeContents class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * SafeContents ::= SEQUENCE OF SafeBag\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [safeBags]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.safeBags || \"\"),\r\n\t\t\t\t\tvalue: SafeBag.schema()\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"safeBags\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSafeContents.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tsafeBags: \"safeBags\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SafeContents\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.safeBags = Array.from(asn1.result.safeBags, element => new SafeBag({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.safeBags, element => element.toSchema())\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tsafeBags: Array.from(this.safeBags, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"SafeContents.js"}