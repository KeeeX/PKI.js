{"version":3,"sources":["../src/GeneralSubtree.js"],"names":["GeneralSubtree","constructor","parameters","base","defaultValues","minimum","maximum","fromSchema","schema","memberName","GeneralName","Error","names","asn1js","Sequence","name","blockName","value","Constructed","optional","idBlock","tagClass","tagNumber","Integer","asn1","compareSchema","verified","result","valueBlock","isHexOnly","valueDec","toSchema","outputArray","push","valueMinimum","valueMaximum","toJSON","object"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport GeneralName from \"./GeneralName.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class GeneralSubtree\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for GeneralSubtree class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {GeneralName}\r\n\t\t * @desc base\r\n\t\t */\r\n\t\tthis.base = getParametersValue(parameters, \"base\", GeneralSubtree.defaultValues(\"base\"));\r\n\r\n\t\t/**\r\n\t\t * @type {number|Integer}\r\n\t\t * @desc base\r\n\t\t */\r\n\t\tthis.minimum = getParametersValue(parameters, \"minimum\", GeneralSubtree.defaultValues(\"minimum\"));\r\n\r\n\t\tif(\"maximum\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {number|Integer}\r\n\t\t\t * @desc minimum\r\n\t\t\t */\r\n\t\t\tthis.maximum = getParametersValue(parameters, \"maximum\", GeneralSubtree.defaultValues(\"maximum\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"base\":\r\n\t\t\t\treturn new GeneralName();\r\n\t\t\tcase \"minimum\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"maximum\":\r\n\t\t\t\treturn 0;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for GeneralSubtree class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * GeneralSubtree ::= SEQUENCE {\r\n\t *    base                    GeneralName,\r\n\t *    minimum         [0]     BaseDistance DEFAULT 0,\r\n\t *    maximum         [1]     BaseDistance OPTIONAL }\r\n\t *\r\n\t * BaseDistance ::= INTEGER (0..MAX)\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [base]\r\n\t\t * @property {string} [minimum]\r\n\t\t * @property {string} [maximum]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tGeneralName.schema(names.base || {}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Integer({ name: (names.minimum || \"\") })]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Integer({ name: (names.maximum || \"\") })]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"base\",\r\n\t\t\t\"minimum\",\r\n\t\t\t\"maximum\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tGeneralSubtree.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tbase: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"base\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tminimum: \"minimum\",\r\n\t\t\t\t\tmaximum: \"maximum\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for GeneralSubtree\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.base = new GeneralName({ schema: asn1.result.base });\r\n\r\n\t\tif(\"minimum\" in asn1.result)\r\n\t\t{\r\n\t\t\tif(asn1.result.minimum.valueBlock.isHexOnly)\r\n\t\t\t\tthis.minimum = asn1.result.minimum;\r\n\t\t\telse\r\n\t\t\t\tthis.minimum = asn1.result.minimum.valueBlock.valueDec;\r\n\t\t}\r\n\r\n\t\tif(\"maximum\" in asn1.result)\r\n\t\t{\r\n\t\t\tif(asn1.result.maximum.valueBlock.isHexOnly)\r\n\t\t\t\tthis.maximum = asn1.result.maximum;\r\n\t\t\telse\r\n\t\t\t\tthis.maximum = asn1.result.maximum.valueBlock.valueDec;\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(this.base.toSchema());\r\n\t\t\r\n\t\tif(this.minimum !== 0)\r\n\t\t{\r\n\t\t\tlet valueMinimum = 0;\r\n\t\t\t\r\n\t\t\tif(this.minimum instanceof asn1js.Integer)\r\n\t\t\t\tvalueMinimum = this.minimum;\r\n\t\t\telse\r\n\t\t\t\tvalueMinimum = new asn1js.Integer({ value: this.minimum });\r\n\t\t\t\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [valueMinimum]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"maximum\" in this)\r\n\t\t{\r\n\t\t\tlet valueMaximum = 0;\r\n\t\t\t\r\n\t\t\tif(this.maximum instanceof asn1js.Integer)\r\n\t\t\t\tvalueMaximum = this.maximum;\r\n\t\t\telse\r\n\t\t\t\tvalueMaximum = new asn1js.Integer({ value: this.maximum });\r\n\t\t\t\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [valueMaximum]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\tbase: this.base.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(this.minimum !== 0)\r\n\t\t{\r\n\t\t\tif((typeof this.minimum) === \"number\")\r\n\t\t\t\tobject.minimum = this.minimum;\r\n\t\t\telse\r\n\t\t\t\tobject.minimum = this.minimum.toJSON();\r\n\t\t}\r\n\t\t\r\n\t\tif(\"maximum\" in this)\r\n\t\t{\r\n\t\t\tif((typeof this.maximum) === \"number\")\r\n\t\t\t\tobject.maximum = this.maximum;\r\n\t\t\telse\r\n\t\t\t\tobject.maximum = this.maximum.toJSON();\r\n\t\t}\r\n\t\t\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"GeneralSubtree.js"}