{"version":3,"sources":["../src/IssuerAndSerialNumber.js"],"names":["IssuerAndSerialNumber","constructor","parameters","issuer","defaultValues","serialNumber","fromSchema","schema","memberName","RelativeDistinguishedNames","asn1js","Integer","Error","names","Sequence","name","blockName","value","asn1","compareSchema","verified","result","toSchema","toJSON"],"mappings":"6FAAA,sDACA,gCACA,mG,gfACA;AACA;;GAGe,KAAMA,CAAAA,qBACrB,CACC;AACA;;;;IAKAC,WAAW,CAACC,UAAU,CAAG,EAAd,CACX,CACC;AACA;;;KAIA,KAAKC,MAAL,CAAc,gCAAmBD,UAAnB,CAA+B,QAA/B,CAAyCF,qBAAqB,CAACI,aAAtB,CAAoC,QAApC,CAAzC,CAAd,CACA;;;KAIA,KAAKC,YAAL,CAAoB,gCAAmBH,UAAnB,CAA+B,cAA/B,CAA+CF,qBAAqB,CAACI,aAAtB,CAAoC,cAApC,CAA/C,CAApB,CACA;AAEA;AACA,GAAG,UAAYF,CAAAA,UAAf,CACC,KAAKI,UAAL,CAAgBJ,UAAU,CAACK,MAA3B,EACD;AACA,CACD;AACA;;;IAIA,MAAOH,CAAAA,aAAP,CAAqBI,UAArB,CACA,CACC,OAAOA,UAAP,EAEC,IAAK,QAAL,CACC,MAAO,IAAIC,oCAAJ,EAAP,CACD,IAAK,cAAL,CACC,MAAO,IAAIC,CAAAA,MAAM,CAACC,OAAX,EAAP,CACD,QACC,KAAM,IAAIC,CAAAA,KAAJ,CAAW,wDAAuDJ,UAAW,EAA7E,CAAN,CAPF,CASA,CACD;AACA;;;;;;;;;;;;;;IAeA,MAAOD,CAAAA,MAAP,CAAcL,UAAU,CAAG,EAA3B,CACA,CACC;;;;;KAMA,KAAMW,CAAAA,KAAK,CAAG,gCAAmBX,UAAnB,CAA+B,OAA/B,CAAwC,EAAxC,CAAd,CAEA,MAAQ,IAAIQ,CAAAA,MAAM,CAACI,QAAX,CAAoB,CAC3BC,IAAI,CAAGF,KAAK,CAACG,SAAN,EAAmB,EADC,CAE3BC,KAAK,CAAE,CACNR,oCAA2BF,MAA3B,CAAkCM,KAAK,CAACV,MAAN,EAAgB,EAAlD,CADM,CAEN,GAAIO,CAAAA,MAAM,CAACC,OAAX,CAAmB,CAAEI,IAAI,CAAGF,KAAK,CAACR,YAAN,EAAsB,EAA/B,CAAnB,CAFM,CAFoB,CAApB,CAAR,CAOA,CACD;AACA;;;IAIAC,UAAU,CAACC,MAAD,CACV,CACC;AACA,wBAAWA,MAAX,CAAmB,CAClB,QADkB,CAElB,cAFkB,CAAnB,EAIA;AAEA;AACA,KAAMW,CAAAA,IAAI,CAAGR,MAAM,CAACS,aAAP,CAAqBZ,MAArB,CACZA,MADY,CAEZP,qBAAqB,CAACO,MAAtB,CAA6B,CAC5BM,KAAK,CAAE,CACNV,MAAM,CAAE,CACPU,KAAK,CAAE,CACNG,SAAS,CAAE,QADL,CADA,CADF,CAMNX,YAAY,CAAE,cANR,CADqB,CAA7B,CAFY,CAAb,CAcA,GAAGa,IAAI,CAACE,QAAL,GAAkB,KAArB,CACC,KAAM,IAAIR,CAAAA,KAAJ,CAAU,+EAAV,CAAN,CACD;AAEA;AACA,KAAKT,MAAL,CAAc,GAAIM,oCAAJ,CAA+B,CAAEF,MAAM,CAAEW,IAAI,CAACG,MAAL,CAAYlB,MAAtB,CAA/B,CAAd,CACA,KAAKE,YAAL,CAAoBa,IAAI,CAACG,MAAL,CAAYhB,YAAhC,CACA;AACA,CACD;AACA;;;IAIAiB,QAAQ,EACR,CACC;AACA,MAAQ,IAAIZ,CAAAA,MAAM,CAACI,QAAX,CAAoB,CAC3BG,KAAK,CAAE,CACN,KAAKd,MAAL,CAAYmB,QAAZ,EADM,CAEN,KAAKjB,YAFC,CADoB,CAApB,CAAR,CAMA;AACA,CACD;AACA;;;IAIAkB,MAAM,EACN,CACC,MAAO,CACNpB,MAAM,CAAE,KAAKA,MAAL,CAAYoB,MAAZ,EADF,CAENlB,YAAY,CAAE,KAAKA,YAAL,CAAkBkB,MAAlB,EAFR,CAAP,CAIA,CACD;AAhJD,CAkJA","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class IssuerAndSerialNumber\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for IssuerAndSerialNumber class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {RelativeDistinguishedNames}\r\n\t\t * @desc issuer\r\n\t\t */\r\n\t\tthis.issuer = getParametersValue(parameters, \"issuer\", IssuerAndSerialNumber.defaultValues(\"issuer\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc serialNumber\r\n\t\t */\r\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", IssuerAndSerialNumber.defaultValues(\"serialNumber\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"issuer\":\r\n\t\t\t\treturn new RelativeDistinguishedNames();\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for IssuerAndSerialNumber class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * IssuerAndSerialNumber ::= SEQUENCE {\r\n\t *    issuer Name,\r\n\t *    serialNumber CertificateSerialNumber }\r\n\t *\r\n\t * CertificateSerialNumber ::= INTEGER\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [issuer]\r\n\t\t * @property {string} [serialNumber]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tRelativeDistinguishedNames.schema(names.issuer || {}),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"issuer\",\r\n\t\t\t\"serialNumber\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tIssuerAndSerialNumber.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tissuer: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"issuer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tserialNumber: \"serialNumber\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for IssuerAndSerialNumber\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.issuer = new RelativeDistinguishedNames({ schema: asn1.result.issuer });\r\n\t\tthis.serialNumber = asn1.result.serialNumber;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.issuer.toSchema(),\r\n\t\t\t\tthis.serialNumber\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tissuer: this.issuer.toJSON(),\r\n\t\t\tserialNumber: this.serialNumber.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"IssuerAndSerialNumber.js"}