{"version":3,"sources":["../src/OCSPResponse.js"],"names":["OCSPResponse","constructor","parameters","responseStatus","defaultValues","responseBytes","fromSchema","schema","memberName","asn1js","Enumerated","ResponseBytes","Error","compareWithDefault","memberValue","isEqual","responseType","response","names","Sequence","name","blockName","value","Constructed","optional","idBlock","tagClass","tagNumber","asn1","compareSchema","verified","result","toSchema","outputArray","push","toJSON","_object","getCertificateStatus","certificate","issuerCertificate","basicResponse","isForCertificate","status","asn1Basic","fromBER","valueBlock","valueHex","BasicOCSPResponse","ex","sign","privateKey","hashAlgorithm","Promise","reject","verify","certs"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport ResponseBytes from \"./ResponseBytes.js\";\r\nimport BasicOCSPResponse from \"./BasicOCSPResponse.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class OCSPResponse\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OCSPResponse class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Enumerated}\r\n\t\t * @desc responseStatus\r\n\t\t */\r\n\t\tthis.responseStatus = getParametersValue(parameters, \"responseStatus\", OCSPResponse.defaultValues(\"responseStatus\"));\r\n\r\n\t\tif(\"responseBytes\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ResponseBytes}\r\n\t\t\t * @desc responseBytes\r\n\t\t\t */\r\n\t\t\tthis.responseBytes = getParametersValue(parameters, \"responseBytes\", OCSPResponse.defaultValues(\"responseBytes\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"responseStatus\":\r\n\t\t\t\treturn new asn1js.Enumerated();\r\n\t\t\tcase \"responseBytes\":\r\n\t\t\t\treturn new ResponseBytes();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OCSPResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"responseStatus\":\r\n\t\t\t\treturn (memberValue.isEqual(OCSPResponse.defaultValues(memberName)));\r\n\t\t\tcase \"responseBytes\":\r\n\t\t\t\treturn ((ResponseBytes.compareWithDefault(\"responseType\", memberValue.responseType)) &&\r\n\t\t\t\t\t\t(ResponseBytes.compareWithDefault(\"response\", memberValue.response)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OCSPResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * OCSPResponse ::= SEQUENCE {\r\n\t *    responseStatus         OCSPResponseStatus,\r\n\t *    responseBytes          [0] EXPLICIT ResponseBytes OPTIONAL }\r\n\t *\r\n\t * OCSPResponseStatus ::= ENUMERATED {\r\n\t *    successful            (0),  -- Response has valid confirmations\r\n\t *    malformedRequest      (1),  -- Illegal confirmation request\r\n\t *    internalError         (2),  -- Internal error in issuer\r\n\t *    tryLater              (3),  -- Try again later\r\n\t *    -- (4) is not used\r\n\t *    sigRequired           (5),  -- Must sign the request\r\n\t *    unauthorized          (6)   -- Request unauthorized\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [responseStatus]\r\n\t\t * @property {string} [responseBytes]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"OCSPResponse\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Enumerated({ name: (names.responseStatus || \"responseStatus\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tResponseBytes.schema(names.responseBytes || {\r\n\t\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\t\tblockName: \"responseBytes\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"responseStatus\",\r\n\t\t\t\"responseBytes\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOCSPResponse.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OCSPResponse\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.responseStatus = asn1.result.responseStatus;\r\n\t\tif(\"responseBytes\" in asn1.result)\r\n\t\t\tthis.responseBytes = new ResponseBytes({ schema: asn1.result.responseBytes });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(this.responseStatus);\r\n\t\tif(\"responseBytes\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [this.responseBytes.toSchema()]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tresponseStatus: this.responseStatus.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"responseBytes\" in this)\r\n\t\t\t_object.responseBytes = this.responseBytes.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get OCSP response status for specific certificate\r\n\t * @param {Certificate} certificate\r\n\t * @param {Certificate} issuerCertificate\r\n\t * @returns {*}\r\n\t */\r\n\tgetCertificateStatus(certificate, issuerCertificate)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet basicResponse;\r\n\r\n\t\tconst result = {\r\n\t\t\tisForCertificate: false,\r\n\t\t\tstatus: 2 // 0 = good, 1 = revoked, 2 = unknown\r\n\t\t};\r\n\t\t//endregion\r\n\r\n\t\t//region Check that \"ResponseBytes\" contain \"OCSP_BASIC_RESPONSE\"\r\n\t\tif((\"responseBytes\" in this) === false)\r\n\t\t\treturn result;\r\n\r\n\t\tif(this.responseBytes.responseType !== \"1.3.6.1.5.5.7.48.1.1\") // id-pkix-ocsp-basic\r\n\t\t\treturn result;\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\tconst asn1Basic = asn1js.fromBER(this.responseBytes.response.valueBlock.valueHex);\r\n\t\t\tbasicResponse = new BasicOCSPResponse({ schema: asn1Basic.result });\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\treturn basicResponse.getCertificateStatus(certificate, issuerCertificate);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Make a signature for current OCSP Response\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1\r\n\t * @returns {Promise}\r\n\t */\r\n\tsign(privateKey, hashAlgorithm)\r\n\t{\r\n\t\t//region Check that ResponseData has type BasicOCSPResponse and sign it\r\n\t\tif(this.responseBytes.responseType === \"1.3.6.1.5.5.7.48.1.1\")\r\n\t\t{\r\n\t\t\tconst asn1 = asn1js.fromBER(this.responseBytes.response.valueBlock.valueHex);\r\n\t\t\tconst basicResponse = new BasicOCSPResponse({ schema: asn1.result });\r\n\r\n\t\t\treturn basicResponse.sign(privateKey, hashAlgorithm);\r\n\t\t}\r\n\r\n\t\treturn Promise.reject(`Unknown ResponseBytes type: ${this.responseBytes.responseType}`);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify current OCSP Response\r\n\t * @param {Certificate|null} issuerCertificate In order to decrease size of resp issuer cert could be ommited. In such case you need manually provide it.\r\n\t * @returns {Promise}\r\n\t */\r\n\tverify(issuerCertificate = null)\r\n\t{\r\n\t\t//region Check that ResponseBytes exists in the object\r\n\t\tif((\"responseBytes\" in this) === false)\r\n\t\t\treturn Promise.reject(\"Empty ResponseBytes field\");\r\n\t\t//endregion\r\n\r\n\t\t//region Check that ResponceData has type BasicOCSPResponse and verify it\r\n\t\tif(this.responseBytes.responseType === \"1.3.6.1.5.5.7.48.1.1\")\r\n\t\t{\r\n\t\t\tconst asn1 = asn1js.fromBER(this.responseBytes.response.valueBlock.valueHex);\r\n\t\t\tconst basicResponse = new BasicOCSPResponse({ schema: asn1.result });\r\n\r\n\t\t\tif(issuerCertificate !== null)\r\n\t\t\t{\r\n\t\t\t\tif((\"certs\" in basicResponse) === false)\r\n\t\t\t\t\tbasicResponse.certs = [];\r\n\t\t\t\t\r\n\t\t\t\tbasicResponse.certs.push(issuerCertificate);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn basicResponse.verify();\r\n\t\t}\r\n\r\n\t\treturn Promise.reject(`Unknown ResponseBytes type: ${this.responseBytes.responseType}`);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"OCSPResponse.js"}