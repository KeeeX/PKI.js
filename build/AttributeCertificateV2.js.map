{"version":3,"sources":["../src/AttributeCertificateV2.js"],"names":["ObjectDigestInfo","constructor","parameters","digestedObjectType","defaultValues","otherObjectTypeID","digestAlgorithm","objectDigest","fromSchema","schema","memberName","asn1js","Enumerated","ObjectIdentifier","AlgorithmIdentifier","BitString","Error","names","Sequence","name","blockName","value","optional","asn1","compareSchema","verified","result","toSchema","push","toJSON","V2Form","issuerName","baseCertificateID","objectDigestInfo","GeneralNames","IssuerSerial","Constructed","idBlock","tagClass","tagNumber","valueBlock","Holder","entityName","AttributeCertificateInfoV2","version","holder","issuer","signature","serialNumber","attrCertValidityPeriod","attributes","issuerUniqueID","extensions","Integer","AttCertValidityPeriod","Extensions","Choice","Repeated","Attribute","valueDec","Array","from","element","AttributeCertificateV2","acinfo","signatureAlgorithm","signatureValue"],"mappings":"uLAAA,sDACA,gCACA,uEACA,qFACA,iEACA,mEACA,kE,gfACA;AACA;;GAGO,KAAMA,CAAAA,gBACb,CACC;AACA;;;;IAKAC,WAAW,CAACC,UAAU,CAAG,EAAd,CACX,CACC;AACA;;;KAIA,KAAKC,kBAAL,CAA0B,gCAAmBD,UAAnB,CAA+B,oBAA/B,CAAqDF,gBAAgB,CAACI,aAAjB,CAA+B,oBAA/B,CAArD,CAA1B,CAEA,GAAG,qBAAuBF,CAAAA,UAA1B,CACC;;;MAIA,KAAKG,iBAAL,CAAyB,gCAAmBH,UAAnB,CAA+B,mBAA/B,CAAoDF,gBAAgB,CAACI,aAAjB,CAA+B,mBAA/B,CAApD,CAAzB,CAED;;;KAIA,KAAKE,eAAL,CAAuB,gCAAmBJ,UAAnB,CAA+B,iBAA/B,CAAkDF,gBAAgB,CAACI,aAAjB,CAA+B,iBAA/B,CAAlD,CAAvB,CACA;;;KAIA,KAAKG,YAAL,CAAoB,gCAAmBL,UAAnB,CAA+B,cAA/B,CAA+CF,gBAAgB,CAACI,aAAjB,CAA+B,cAA/B,CAA/C,CAApB,CACA;AAEA;AACA,GAAG,UAAYF,CAAAA,UAAf,CACC,KAAKM,UAAL,CAAgBN,UAAU,CAACO,MAA3B,EACD;AACA,CACD;AACA;;;IAIA,MAAOL,CAAAA,aAAP,CAAqBM,UAArB,CACA,CACC,OAAOA,UAAP,EAEC,IAAK,oBAAL,CACC,MAAO,IAAIC,CAAAA,MAAM,CAACC,UAAX,EAAP,CACD,IAAK,mBAAL,CACC,MAAO,IAAID,CAAAA,MAAM,CAACE,gBAAX,EAAP,CACD,IAAK,iBAAL,CACC,MAAO,IAAIC,6BAAJ,EAAP,CACD,IAAK,cAAL,CACC,MAAO,IAAIH,CAAAA,MAAM,CAACI,SAAX,EAAP,CACD,QACC,KAAM,IAAIC,CAAAA,KAAJ,CAAW,mDAAkDN,UAAW,EAAxE,CAAN,CAXF,CAaA,CACD;AACA;;;;;;;;;;;;;;;;;;;;IAqBA,MAAOD,CAAAA,MAAP,CAAcP,UAAU,CAAG,EAA3B,CACA,CACC;;;;;;;KAQA,KAAMe,CAAAA,KAAK,CAAG,gCAAmBf,UAAnB,CAA+B,OAA/B,CAAwC,EAAxC,CAAd,CAEA,MAAQ,IAAIS,CAAAA,MAAM,CAACO,QAAX,CAAoB,CAC3BC,IAAI,CAAGF,KAAK,CAACG,SAAN,EAAmB,EADC,CAE3BC,KAAK,CAAE,CACN,GAAIV,CAAAA,MAAM,CAACC,UAAX,CAAsB,CAAEO,IAAI,CAAGF,KAAK,CAACd,kBAAN,EAA4B,EAArC,CAAtB,CADM,CAEN,GAAIQ,CAAAA,MAAM,CAACE,gBAAX,CAA4B,CAC3BS,QAAQ,CAAE,IADiB,CAE3BH,IAAI,CAAGF,KAAK,CAACZ,iBAAN,EAA2B,EAFP,CAA5B,CAFM,CAMNS,6BAAoBL,MAApB,CAA2BQ,KAAK,CAACX,eAAN,EAAyB,EAApD,CANM,CAON,GAAIK,CAAAA,MAAM,CAACI,SAAX,CAAqB,CAAEI,IAAI,CAAGF,KAAK,CAACV,YAAN,EAAsB,EAA/B,CAArB,CAPM,CAFoB,CAApB,CAAR,CAYA,CACD;AACA;;;IAIAC,UAAU,CAACC,MAAD,CACV,CACC;AACA,wBAAWA,MAAX,CAAmB,CAClB,oBADkB,CAElB,mBAFkB,CAGlB,iBAHkB,CAIlB,cAJkB,CAAnB,EAMA;AAEA;AACA,KAAMc,CAAAA,IAAI,CAAGZ,MAAM,CAACa,aAAP,CAAqBf,MAArB,CACZA,MADY,CAEZT,gBAAgB,CAACS,MAAjB,CAAwB,CACvBQ,KAAK,CAAE,CACNd,kBAAkB,CAAE,oBADd,CAENE,iBAAiB,CAAE,mBAFb,CAGNC,eAAe,CAAE,CAChBW,KAAK,CAAE,CACNG,SAAS,CAAE,iBADL,CADS,CAHX,CAQNb,YAAY,CAAE,cARR,CADgB,CAAxB,CAFY,CAAb,CAgBA,GAAGgB,IAAI,CAACE,QAAL,GAAkB,KAArB,CACC,KAAM,IAAIT,CAAAA,KAAJ,CAAU,0EAAV,CAAN,CACD;AAEA;AACA,KAAKb,kBAAL,CAA0BoB,IAAI,CAACG,MAAL,CAAYvB,kBAAtC,CAEA,GAAG,qBAAuBoB,CAAAA,IAAI,CAACG,MAA/B,CACC,KAAKrB,iBAAL,CAAyBkB,IAAI,CAACG,MAAL,CAAYrB,iBAArC,CAED,KAAKC,eAAL,CAAuB,GAAIQ,6BAAJ,CAAwB,CAAEL,MAAM,CAAEc,IAAI,CAACG,MAAL,CAAYpB,eAAtB,CAAxB,CAAvB,CACA,KAAKC,YAAL,CAAoBgB,IAAI,CAACG,MAAL,CAAYnB,YAAhC,CACA;AACA,CACD;AACA;;;IAIAoB,QAAQ,EACR,CACC,KAAMD,CAAAA,MAAM,CAAG,GAAIf,CAAAA,MAAM,CAACO,QAAX,CAAoB,CAClCG,KAAK,CAAE,CAAC,KAAKlB,kBAAN,CAD2B,CAApB,CAAf,CAIA,GAAG,qBAAuB,KAA1B,CACCuB,MAAM,CAACL,KAAP,CAAaO,IAAb,CAAkB,KAAKvB,iBAAvB,EAEDqB,MAAM,CAACL,KAAP,CAAaO,IAAb,CAAkB,KAAKtB,eAAL,CAAqBqB,QAArB,EAAlB,EACAD,MAAM,CAACL,KAAP,CAAaO,IAAb,CAAkB,KAAKrB,YAAvB,EAEA,MAAOmB,CAAAA,MAAP,CACA,CACD;AACA;;;IAIAG,MAAM,EACN,CACC,KAAMH,CAAAA,MAAM,CAAG,CACdvB,kBAAkB,CAAE,KAAKA,kBAAL,CAAwB0B,MAAxB,EADN,CAAf,CAIA,GAAG,qBAAuB,KAA1B,CACCH,MAAM,CAACrB,iBAAP,CAA2B,KAAKA,iBAAL,CAAuBwB,MAAvB,EAA3B,CAEDH,MAAM,CAACpB,eAAP,CAAyB,KAAKA,eAAL,CAAqBuB,MAArB,EAAzB,CACAH,MAAM,CAACnB,YAAP,CAAsB,KAAKA,YAAL,CAAkBsB,MAAlB,EAAtB,CAEA,MAAOH,CAAAA,MAAP,CACA,CACD;AAjMD,CAmMA;AACA;;6CAGO,KAAMI,CAAAA,MACb,CACC;AACA;;;;IAKA7B,WAAW,CAACC,UAAU,CAAG,EAAd,CACX,CACC;AACA,GAAG,cAAgBA,CAAAA,UAAnB,CACC;;;MAIA,KAAK6B,UAAL,CAAkB,gCAAmB7B,UAAnB,CAA+B,YAA/B,CAA6C4B,MAAM,CAAC1B,aAAP,CAAqB,YAArB,CAA7C,CAAlB,CAED,GAAG,qBAAuBF,CAAAA,UAA1B,CACC;;;MAIA,KAAK8B,iBAAL,CAAyB,gCAAmB9B,UAAnB,CAA+B,mBAA/B,CAAoD4B,MAAM,CAAC1B,aAAP,CAAqB,mBAArB,CAApD,CAAzB,CAED,GAAG,oBAAsBF,CAAAA,UAAzB,CACC;;;MAIA,KAAK+B,gBAAL,CAAwB,gCAAmB/B,UAAnB,CAA+B,kBAA/B,CAAmD4B,MAAM,CAAC1B,aAAP,CAAqB,kBAArB,CAAnD,CAAxB,CACD;AAEA;AACA,GAAG,UAAYF,CAAAA,UAAf,CACC,KAAKM,UAAL,CAAgBN,UAAU,CAACO,MAA3B,EACD;AACA,CACD;AACA;;;IAIA,MAAOL,CAAAA,aAAP,CAAqBM,UAArB,CACA,CACC,OAAOA,UAAP,EAEC,IAAK,YAAL,CACC,MAAO,IAAIwB,sBAAJ,EAAP,CACD,IAAK,mBAAL,CACC,MAAO,IAAIC,oCAAJ,EAAP,CACD,IAAK,kBAAL,CACC,MAAO,IAAInC,CAAAA,gBAAJ,EAAP,CACD,QACC,KAAM,IAAIgB,CAAAA,KAAJ,CAAW,yCAAwCN,UAAW,EAA9D,CAAN,CATF,CAWA,CACD;AACA;;;;;;;;;;;;;;;;;IAkBA,MAAOD,CAAAA,MAAP,CAAcP,UAAU,CAAG,EAA3B,CACA,CACC;;;;;;KAOA,KAAMe,CAAAA,KAAK,CAAG,gCAAmBf,UAAnB,CAA+B,OAA/B,CAAwC,EAAxC,CAAd,CAEA,MAAQ,IAAIS,CAAAA,MAAM,CAACO,QAAX,CAAoB,CAC3BC,IAAI,CAAGF,KAAK,CAACG,SAAN,EAAmB,EADC,CAE3BC,KAAK,CAAE,CACNa,sBAAazB,MAAb,CAAoB,CACnBQ,KAAK,CAAE,CACNG,SAAS,CAAEH,KAAK,CAACc,UADX,CADY,CAApB,CAIG,IAJH,CADM,CAMN,GAAIpB,CAAAA,MAAM,CAACyB,WAAX,CAAuB,CACtBd,QAAQ,CAAE,IADY,CAEtBH,IAAI,CAAGF,KAAK,CAACe,iBAAN,EAA2B,EAFZ,CAGtBK,OAAO,CAAE,CACRC,QAAQ,CAAE,CADF,CAERC,SAAS,CAAE,CAAE;AAFL,CAHa,CAOtBlB,KAAK,CAAEc,oCAAa1B,MAAb,GAAsB+B,UAAtB,CAAiCnB,KAPlB,CAAvB,CANM,CAeN,GAAIV,CAAAA,MAAM,CAACyB,WAAX,CAAuB,CACtBd,QAAQ,CAAE,IADY,CAEtBH,IAAI,CAAGF,KAAK,CAACgB,gBAAN,EAA0B,EAFX,CAGtBI,OAAO,CAAE,CACRC,QAAQ,CAAE,CADF,CAERC,SAAS,CAAE,CAAE;AAFL,CAHa,CAOtBlB,KAAK,CAAErB,gBAAgB,CAACS,MAAjB,GAA0B+B,UAA1B,CAAqCnB,KAPtB,CAAvB,CAfM,CAFoB,CAApB,CAAR,CA4BA,CACD;AACA;;;IAIAb,UAAU,CAACC,MAAD,CACV,CACC;AACA,wBAAWA,MAAX,CAAmB,CAClB,YADkB,CAElB,mBAFkB,CAGlB,kBAHkB,CAAnB,EAKA;AAEA;AACA,KAAMc,CAAAA,IAAI,CAAGZ,MAAM,CAACa,aAAP,CAAqBf,MAArB,CACZA,MADY,CAEZqB,MAAM,CAACrB,MAAP,CAAc,CACbQ,KAAK,CAAE,CACNc,UAAU,CAAE,YADN,CAENC,iBAAiB,CAAE,mBAFb,CAGNC,gBAAgB,CAAE,kBAHZ,CADM,CAAd,CAFY,CAAb,CAWA,GAAGV,IAAI,CAACE,QAAL,GAAkB,KAArB,CACC,KAAM,IAAIT,CAAAA,KAAJ,CAAU,gEAAV,CAAN,CACD;AAEA;AACA,GAAG,cAAgBO,CAAAA,IAAI,CAACG,MAAxB,CACC,KAAKK,UAAL,CAAkB,GAAIG,sBAAJ,CAAiB,CAAEzB,MAAM,CAAEc,IAAI,CAACG,MAAL,CAAYK,UAAtB,CAAjB,CAAlB,CAED,GAAG,qBAAuBR,CAAAA,IAAI,CAACG,MAA/B,CACA,CACC,KAAKM,iBAAL,CAAyB,GAAIG,oCAAJ,CAAiB,CACzC1B,MAAM,CAAE,GAAIE,CAAAA,MAAM,CAACO,QAAX,CAAoB,CAC3BG,KAAK,CAAEE,IAAI,CAACG,MAAL,CAAYM,iBAAZ,CAA8BQ,UAA9B,CAAyCnB,KADrB,CAApB,CADiC,CAAjB,CAAzB,CAKA,CAED,GAAG,oBAAsBE,CAAAA,IAAI,CAACG,MAA9B,CACA,CACC,KAAKO,gBAAL,CAAwB,GAAIjC,CAAAA,gBAAJ,CAAqB,CAC5CS,MAAM,CAAE,GAAIE,CAAAA,MAAM,CAACO,QAAX,CAAoB,CAC3BG,KAAK,CAAEE,IAAI,CAACG,MAAL,CAAYO,gBAAZ,CAA6BO,UAA7B,CAAwCnB,KADpB,CAApB,CADoC,CAArB,CAAxB,CAKA,CACD;AACA,CACD;AACA;;;IAIAM,QAAQ,EACR,CACC,KAAMD,CAAAA,MAAM,CAAG,GAAIf,CAAAA,MAAM,CAACO,QAAX,EAAf,CAEA,GAAG,cAAgB,KAAnB,CACCQ,MAAM,CAACc,UAAP,CAAkBnB,KAAlB,CAAwBO,IAAxB,CAA6B,KAAKG,UAAL,CAAgBJ,QAAhB,EAA7B,EAED,GAAG,qBAAuB,KAA1B,CACA,CACCD,MAAM,CAACc,UAAP,CAAkBnB,KAAlB,CAAwBO,IAAxB,CAA6B,GAAIjB,CAAAA,MAAM,CAACyB,WAAX,CAAuB,CACnDC,OAAO,CAAE,CACRC,QAAQ,CAAE,CADF,CAERC,SAAS,CAAE,CAAE;AAFL,CAD0C,CAKnDlB,KAAK,CAAE,KAAKW,iBAAL,CAAuBL,QAAvB,GAAkCa,UAAlC,CAA6CnB,KALD,CAAvB,CAA7B,EAOA,CAED,GAAG,oBAAsB,KAAzB,CACA,CACCK,MAAM,CAACc,UAAP,CAAkBnB,KAAlB,CAAwBO,IAAxB,CAA6B,GAAIjB,CAAAA,MAAM,CAACyB,WAAX,CAAuB,CACnDC,OAAO,CAAE,CACRC,QAAQ,CAAE,CADF,CAERC,SAAS,CAAE,CAAE;AAFL,CAD0C,CAKnDlB,KAAK,CAAE,KAAKY,gBAAL,CAAsBN,QAAtB,GAAiCa,UAAjC,CAA4CnB,KALA,CAAvB,CAA7B,EAOA,CAED;AACA,MAAOK,CAAAA,MAAP,CACA;AACA,CACD;AACA;;;IAIAG,MAAM,EACN,CACC,KAAMH,CAAAA,MAAM,CAAG,EAAf,CAEA,GAAG,cAAgB,KAAnB,CACCA,MAAM,CAACK,UAAP,CAAoB,KAAKA,UAAL,CAAgBF,MAAhB,EAApB,CAED,GAAG,qBAAuB,KAA1B,CACCH,MAAM,CAACM,iBAAP,CAA2B,KAAKA,iBAAL,CAAuBH,MAAvB,EAA3B,CAED,GAAG,oBAAsB,KAAzB,CACCH,MAAM,CAACO,gBAAP,CAA0B,KAAKA,gBAAL,CAAsBJ,MAAtB,EAA1B,CAED,MAAOH,CAAAA,MAAP,CACA,CACD;AAnOD,CAqOA;AACA;;yBAGO,KAAMe,CAAAA,MACb,CACC;AACA;;;;IAKAxC,WAAW,CAACC,UAAU,CAAG,EAAd,CACX,CACC;AACA,GAAG,qBAAuBA,CAAAA,UAA1B,CACC;;;MAIA,KAAK8B,iBAAL,CAAyB,gCAAmB9B,UAAnB,CAA+B,mBAA/B,CAAoDuC,MAAM,CAACrC,aAAP,CAAqB,mBAArB,CAApD,CAAzB,CAED,GAAG,cAAgBF,CAAAA,UAAnB,CACC;;;MAIA,KAAKwC,UAAL,CAAkB,gCAAmBxC,UAAnB,CAA+B,YAA/B,CAA6CuC,MAAM,CAACrC,aAAP,CAAqB,YAArB,CAA7C,CAAlB,CAED,GAAG,oBAAsBF,CAAAA,UAAzB,CACC;;;MAIA,KAAK+B,gBAAL,CAAwB,gCAAmB/B,UAAnB,CAA+B,kBAA/B,CAAmDuC,MAAM,CAACrC,aAAP,CAAqB,kBAArB,CAAnD,CAAxB,CACD;AAEA;AACA,GAAG,UAAYF,CAAAA,UAAf,CACC,KAAKM,UAAL,CAAgBN,UAAU,CAACO,MAA3B,EACD;AACA,CACD;AACA;;;IAIA,MAAOL,CAAAA,aAAP,CAAqBM,UAArB,CACA,CACC,OAAOA,UAAP,EAEC,IAAK,mBAAL,CACC,MAAO,IAAIyB,oCAAJ,EAAP,CACD,IAAK,YAAL,CACC,MAAO,IAAID,sBAAJ,EAAP,CACD,IAAK,kBAAL,CACC,MAAO,IAAIlC,CAAAA,gBAAJ,EAAP,CACD,QACC,KAAM,IAAIgB,CAAAA,KAAJ,CAAW,yCAAwCN,UAAW,EAA9D,CAAN,CATF,CAWA,CACD;AACA;;;;;;;;;;;;;;;;;;;IAoBA,MAAOD,CAAAA,MAAP,CAAcP,UAAU,CAAG,EAA3B,CACA,CACC;;;;;;KAOA,KAAMe,CAAAA,KAAK,CAAG,gCAAmBf,UAAnB,CAA+B,OAA/B,CAAwC,EAAxC,CAAd,CAEA,MAAQ,IAAIS,CAAAA,MAAM,CAACO,QAAX,CAAoB,CAC3BC,IAAI,CAAGF,KAAK,CAACG,SAAN,EAAmB,EADC,CAE3BC,KAAK,CAAE,CACN,GAAIV,CAAAA,MAAM,CAACyB,WAAX,CAAuB,CACtBd,QAAQ,CAAE,IADY,CAEtBH,IAAI,CAAGF,KAAK,CAACe,iBAAN,EAA2B,EAFZ,CAGtBK,OAAO,CAAE,CACRC,QAAQ,CAAE,CADF,CAERC,SAAS,CAAE,CAAE;AAFL,CAHa,CAOtBlB,KAAK,CAAEc,oCAAa1B,MAAb,GAAsB+B,UAAtB,CAAiCnB,KAPlB,CAAvB,CADM,CAUN,GAAIV,CAAAA,MAAM,CAACyB,WAAX,CAAuB,CACtBd,QAAQ,CAAE,IADY,CAEtBH,IAAI,CAAGF,KAAK,CAACyB,UAAN,EAAoB,EAFL,CAGtBL,OAAO,CAAE,CACRC,QAAQ,CAAE,CADF,CAERC,SAAS,CAAE,CAAE;AAFL,CAHa,CAOtBlB,KAAK,CAAEa,sBAAazB,MAAb,GAAsB+B,UAAtB,CAAiCnB,KAPlB,CAAvB,CAVM,CAmBN,GAAIV,CAAAA,MAAM,CAACyB,WAAX,CAAuB,CACtBd,QAAQ,CAAE,IADY,CAEtBH,IAAI,CAAGF,KAAK,CAACgB,gBAAN,EAA0B,EAFX,CAGtBI,OAAO,CAAE,CACRC,QAAQ,CAAE,CADF,CAERC,SAAS,CAAE,CAAE;AAFL,CAHa,CAOtBlB,KAAK,CAAErB,gBAAgB,CAACS,MAAjB,GAA0B+B,UAA1B,CAAqCnB,KAPtB,CAAvB,CAnBM,CAFoB,CAApB,CAAR,CAgCA,CACD;AACA;;;IAIAb,UAAU,CAACC,MAAD,CACV,CACC;AACA,wBAAWA,MAAX,CAAmB,CAClB,mBADkB,CAElB,YAFkB,CAGlB,kBAHkB,CAAnB,EAKA;AAEA;AACA,KAAMc,CAAAA,IAAI,CAAGZ,MAAM,CAACa,aAAP,CAAqBf,MAArB,CACZA,MADY,CAEZgC,MAAM,CAAChC,MAAP,CAAc,CACbQ,KAAK,CAAE,CACNe,iBAAiB,CAAE,mBADb,CAENU,UAAU,CAAE,YAFN,CAGNT,gBAAgB,CAAE,kBAHZ,CADM,CAAd,CAFY,CAAb,CAWA,GAAGV,IAAI,CAACE,QAAL,GAAkB,KAArB,CACC,KAAM,IAAIT,CAAAA,KAAJ,CAAU,gEAAV,CAAN,CACD;AAEA;AACA,GAAG,qBAAuBO,CAAAA,IAAI,CAACG,MAA/B,CACA,CACC,KAAKM,iBAAL,CAAyB,GAAIG,oCAAJ,CAAiB,CACzC1B,MAAM,CAAE,GAAIE,CAAAA,MAAM,CAACO,QAAX,CAAoB,CAC3BG,KAAK,CAAEE,IAAI,CAACG,MAAL,CAAYM,iBAAZ,CAA8BQ,UAA9B,CAAyCnB,KADrB,CAApB,CADiC,CAAjB,CAAzB,CAKA,CAED,GAAG,cAAgBE,CAAAA,IAAI,CAACG,MAAxB,CACA,CACC,KAAKgB,UAAL,CAAkB,GAAIR,sBAAJ,CAAiB,CAClCzB,MAAM,CAAE,GAAIE,CAAAA,MAAM,CAACO,QAAX,CAAoB,CAC3BG,KAAK,CAAEE,IAAI,CAACG,MAAL,CAAYgB,UAAZ,CAAuBF,UAAvB,CAAkCnB,KADd,CAApB,CAD0B,CAAjB,CAAlB,CAKA,CAED,GAAG,oBAAsBE,CAAAA,IAAI,CAACG,MAA9B,CACA,CACC,KAAKO,gBAAL,CAAwB,GAAIjC,CAAAA,gBAAJ,CAAqB,CAC5CS,MAAM,CAAE,GAAIE,CAAAA,MAAM,CAACO,QAAX,CAAoB,CAC3BG,KAAK,CAAEE,IAAI,CAACG,MAAL,CAAYO,gBAAZ,CAA6BO,UAA7B,CAAwCnB,KADpB,CAApB,CADoC,CAArB,CAAxB,CAKA,CACD;AACA,CACD;AACA;;;IAIAM,QAAQ,EACR,CACC,KAAMD,CAAAA,MAAM,CAAG,GAAIf,CAAAA,MAAM,CAACO,QAAX,EAAf,CAEA,GAAG,qBAAuB,KAA1B,CACA,CACCQ,MAAM,CAACc,UAAP,CAAkBnB,KAAlB,CAAwBO,IAAxB,CAA6B,GAAIjB,CAAAA,MAAM,CAACyB,WAAX,CAAuB,CACnDC,OAAO,CAAE,CACRC,QAAQ,CAAE,CADF,CAERC,SAAS,CAAE,CAAE;AAFL,CAD0C,CAKnDlB,KAAK,CAAE,KAAKW,iBAAL,CAAuBL,QAAvB,GAAkCa,UAAlC,CAA6CnB,KALD,CAAvB,CAA7B,EAOA,CAED,GAAG,cAAgB,KAAnB,CACA,CACCK,MAAM,CAACc,UAAP,CAAkBnB,KAAlB,CAAwBO,IAAxB,CAA6B,GAAIjB,CAAAA,MAAM,CAACyB,WAAX,CAAuB,CACnDC,OAAO,CAAE,CACRC,QAAQ,CAAE,CADF,CAERC,SAAS,CAAE,CAAE;AAFL,CAD0C,CAKnDlB,KAAK,CAAE,KAAKqB,UAAL,CAAgBf,QAAhB,GAA2Ba,UAA3B,CAAsCnB,KALM,CAAvB,CAA7B,EAOA,CAED,GAAG,oBAAsB,KAAzB,CACA,CACCK,MAAM,CAACc,UAAP,CAAkBnB,KAAlB,CAAwBO,IAAxB,CAA6B,GAAIjB,CAAAA,MAAM,CAACyB,WAAX,CAAuB,CACnDC,OAAO,CAAE,CACRC,QAAQ,CAAE,CADF,CAERC,SAAS,CAAE,CAAE;AAFL,CAD0C,CAKnDlB,KAAK,CAAE,KAAKY,gBAAL,CAAsBN,QAAtB,GAAiCa,UAAjC,CAA4CnB,KALA,CAAvB,CAA7B,EAOA,CAED,MAAOK,CAAAA,MAAP,CACA,CACD;AACA;;;IAIAG,MAAM,EACN,CACC,KAAMH,CAAAA,MAAM,CAAG,EAAf,CAEA,GAAG,qBAAuB,KAA1B,CACCA,MAAM,CAACM,iBAAP,CAA2B,KAAKA,iBAAL,CAAuBH,MAAvB,EAA3B,CAED,GAAG,cAAgB,KAAnB,CACCH,MAAM,CAACgB,UAAP,CAAoB,KAAKA,UAAL,CAAgBb,MAAhB,EAApB,CAED,GAAG,oBAAsB,KAAzB,CACCH,MAAM,CAACO,gBAAP,CAA0B,KAAKA,gBAAL,CAAsBJ,MAAtB,EAA1B,CAED,MAAOH,CAAAA,MAAP,CACA,CACD;AArPD,CAuPA;AACA;;yBAGO,KAAMiB,CAAAA,0BACb,CACC;AACA;;;;IAKA1C,WAAW,CAACC,UAAU,CAAG,EAAd,CACX,CACC;AACA;;;KAIA,KAAK0C,OAAL,CAAe,gCAAmB1C,UAAnB,CAA+B,SAA/B,CAA0CyC,0BAA0B,CAACvC,aAA3B,CAAyC,SAAzC,CAA1C,CAAf,CACA;;;KAIA,KAAKyC,MAAL,CAAc,gCAAmB3C,UAAnB,CAA+B,QAA/B,CAAyCyC,0BAA0B,CAACvC,aAA3B,CAAyC,QAAzC,CAAzC,CAAd,CACA;;;KAIA,KAAK0C,MAAL,CAAc,gCAAmB5C,UAAnB,CAA+B,QAA/B,CAAyCyC,0BAA0B,CAACvC,aAA3B,CAAyC,QAAzC,CAAzC,CAAd,CACA;;;KAIA,KAAK2C,SAAL,CAAiB,gCAAmB7C,UAAnB,CAA+B,WAA/B,CAA4CyC,0BAA0B,CAACvC,aAA3B,CAAyC,WAAzC,CAA5C,CAAjB,CACA;;;KAIA,KAAK4C,YAAL,CAAoB,gCAAmB9C,UAAnB,CAA+B,cAA/B,CAA+CyC,0BAA0B,CAACvC,aAA3B,CAAyC,cAAzC,CAA/C,CAApB,CACA;;;KAIA,KAAK6C,sBAAL,CAA8B,gCAAmB/C,UAAnB,CAA+B,wBAA/B,CAAyDyC,0BAA0B,CAACvC,aAA3B,CAAyC,wBAAzC,CAAzD,CAA9B,CACA;;;KAIA,KAAK8C,UAAL,CAAkB,gCAAmBhD,UAAnB,CAA+B,YAA/B,CAA6CyC,0BAA0B,CAACvC,aAA3B,CAAyC,YAAzC,CAA7C,CAAlB,CAEA,GAAG,kBAAoBF,CAAAA,UAAvB,CACC;;;MAIA,KAAKiD,cAAL,CAAsB,gCAAmBjD,UAAnB,CAA+B,gBAA/B,CAAiDyC,0BAA0B,CAACvC,aAA3B,CAAyC,gBAAzC,CAAjD,CAAtB,CAED,GAAG,cAAgBF,CAAAA,UAAnB,CACC;;;MAIA,KAAKkD,UAAL,CAAkB,gCAAmBlD,UAAnB,CAA+B,YAA/B,CAA6CyC,0BAA0B,CAACvC,aAA3B,CAAyC,YAAzC,CAA7C,CAAlB,CACD;AAEA;AACA,GAAG,UAAYF,CAAAA,UAAf,CACC,KAAKM,UAAL,CAAgBN,UAAU,CAACO,MAA3B,EACD;AACA,CACD;AACA;;;IAIA,MAAOL,CAAAA,aAAP,CAAqBM,UAArB,CACA,CACC,OAAOA,UAAP,EAEC,IAAK,SAAL,CACC,MAAO,EAAP,CACD,IAAK,QAAL,CACC,MAAO,IAAI+B,CAAAA,MAAJ,EAAP,CACD,IAAK,QAAL,CACC,MAAO,EAAP,CACD,IAAK,WAAL,CACC,MAAO,IAAI3B,6BAAJ,EAAP,CACD,IAAK,cAAL,CACC,MAAO,IAAIH,CAAAA,MAAM,CAAC0C,OAAX,EAAP,CACD,IAAK,wBAAL,CACC,MAAO,IAAIC,6CAAJ,EAAP,CACD,IAAK,YAAL,CACC,MAAO,EAAP,CACD,IAAK,gBAAL,CACC,MAAO,IAAI3C,CAAAA,MAAM,CAACI,SAAX,EAAP,CACD,IAAK,YAAL,CACC,MAAO,IAAIwC,oBAAJ,EAAP,CACD,QACC,KAAM,IAAIvC,CAAAA,KAAJ,CAAW,6DAA4DN,UAAW,EAAlF,CAAN,CArBF,CAuBA,CACD;AACA;;;;;;;;;;;;;;;;;;;;IAqBA,MAAOD,CAAAA,MAAP,CAAcP,UAAU,CAAG,EAA3B,CACA,CACC;;;;;KAMA,KAAMe,CAAAA,KAAK,CAAG,gCAAmBf,UAAnB,CAA+B,OAA/B,CAAwC,EAAxC,CAAd,CAEA,MAAQ,IAAIS,CAAAA,MAAM,CAACO,QAAX,CAAoB,CAC3BC,IAAI,CAAGF,KAAK,CAACG,SAAN,EAAmB,EADC,CAE3BC,KAAK,CAAE,CACN,GAAIV,CAAAA,MAAM,CAAC0C,OAAX,CAAmB,CAAElC,IAAI,CAAGF,KAAK,CAAC2B,OAAN,EAAiB,EAA1B,CAAnB,CADM,CAENH,MAAM,CAAChC,MAAP,CAAcQ,KAAK,CAAC4B,MAAN,EAAgB,EAA9B,CAFM,CAGN,GAAIlC,CAAAA,MAAM,CAAC6C,MAAX,CAAkB,CACjBnC,KAAK,CAAE,CACNa,sBAAazB,MAAb,CAAoB,CACnBQ,KAAK,CAAE,CACNG,SAAS,CAAGH,KAAK,CAAC6B,MAAN,EAAgB,EADtB,CADY,CAApB,CADM,CAMN,GAAInC,CAAAA,MAAM,CAACyB,WAAX,CAAuB,CACtBjB,IAAI,CAAGF,KAAK,CAAC6B,MAAN,EAAgB,EADD,CAEtBT,OAAO,CAAE,CACRC,QAAQ,CAAE,CADF,CACK;AACbC,SAAS,CAAE,CAAE;AAFL,CAFa,CAMtBlB,KAAK,CAAES,MAAM,CAACrB,MAAP,GAAgB+B,UAAhB,CAA2BnB,KANZ,CAAvB,CANM,CADU,CAAlB,CAHM,CAoBNP,6BAAoBL,MAApB,CAA2BQ,KAAK,CAAC8B,SAAN,EAAmB,EAA9C,CApBM,CAqBN,GAAIpC,CAAAA,MAAM,CAAC0C,OAAX,CAAmB,CAAElC,IAAI,CAAGF,KAAK,CAAC+B,YAAN,EAAsB,EAA/B,CAAnB,CArBM,CAsBNM,6CAAsB7C,MAAtB,CAA6BQ,KAAK,CAACgC,sBAAN,EAAgC,EAA7D,CAtBM,CAuBN,GAAItC,CAAAA,MAAM,CAACO,QAAX,CAAoB,CACnBC,IAAI,CAAGF,KAAK,CAACiC,UAAN,EAAoB,EADR,CAEnB7B,KAAK,CAAE,CACN,GAAIV,CAAAA,MAAM,CAAC8C,QAAX,CAAoB,CACnBpC,KAAK,CAAEqC,mBAAUjD,MAAV,EADY,CAApB,CADM,CAFY,CAApB,CAvBM,CA+BN,GAAIE,CAAAA,MAAM,CAACI,SAAX,CAAqB,CACpBO,QAAQ,CAAE,IADU,CAEpBH,IAAI,CAAGF,KAAK,CAACkC,cAAN,EAAwB,EAFX,CAArB,CA/BM,CAmCNI,oBAAW9C,MAAX,CAAkBQ,KAAK,CAACmC,UAAN,EAAoB,EAAtC,CAA0C,IAA1C,CAnCM,CAFoB,CAApB,CAAR,CAwCA,CACD;AACA;;;IAIA5C,UAAU,CAACC,MAAD,CACV,CACC;AACA,wBAAWA,MAAX,CAAmB,CAClB,SADkB,CAElB,QAFkB,CAGlB,QAHkB,CAIlB,WAJkB,CAKlB,cALkB,CAMlB,wBANkB,CAOlB,YAPkB,CAQlB,gBARkB,CASlB,YATkB,CAAnB,EAWA;AAEA;AACA,KAAMc,CAAAA,IAAI,CAAGZ,MAAM,CAACa,aAAP,CAAqBf,MAArB,CACZA,MADY,CAEZkC,0BAA0B,CAAClC,MAA3B,CAAkC,CACjCQ,KAAK,CAAE,CACN2B,OAAO,CAAE,SADH,CAENC,MAAM,CAAE,CACP5B,KAAK,CAAE,CACNG,SAAS,CAAE,QADL,CADA,CAFF,CAON0B,MAAM,CAAE,QAPF,CAQNC,SAAS,CAAE,CACV9B,KAAK,CAAE,CACNG,SAAS,CAAE,WADL,CADG,CARL,CAaN4B,YAAY,CAAE,cAbR,CAcNC,sBAAsB,CAAE,CACvBhC,KAAK,CAAE,CACNG,SAAS,CAAE,wBADL,CADgB,CAdlB,CAmBN8B,UAAU,CAAE,YAnBN,CAoBNC,cAAc,CAAE,gBApBV,CAqBNC,UAAU,CAAE,CACXnC,KAAK,CAAE,CACNG,SAAS,CAAE,YADL,CADI,CArBN,CAD0B,CAAlC,CAFY,CAAb,CAiCA,GAAGG,IAAI,CAACE,QAAL,GAAkB,KAArB,CACC,KAAM,IAAIT,CAAAA,KAAJ,CAAU,oFAAV,CAAN,CACD;AAEA;AACA,KAAK4B,OAAL,CAAerB,IAAI,CAACG,MAAL,CAAYkB,OAAZ,CAAoBJ,UAApB,CAA+BmB,QAA9C,CACA,KAAKd,MAAL,CAAc,GAAIJ,CAAAA,MAAJ,CAAW,CAAEhC,MAAM,CAAEc,IAAI,CAACG,MAAL,CAAYmB,MAAtB,CAAX,CAAd,CAEA,OAAOtB,IAAI,CAACG,MAAL,CAAYoB,MAAZ,CAAmBT,OAAnB,CAA2BC,QAAlC,EAEC,IAAK,EAAL,CAAQ;AACP,KAAKQ,MAAL,CAAc,GAAIhB,CAAAA,MAAJ,CAAW,CACxBrB,MAAM,CAAE,GAAIE,CAAAA,MAAM,CAACO,QAAX,CAAoB,CAC3BG,KAAK,CAAEE,IAAI,CAACG,MAAL,CAAYoB,MAAZ,CAAmBN,UAAnB,CAA8BnB,KADV,CAApB,CADgB,CAAX,CAAd,CAKA,MACD,IAAK,EAAL,CAAQ;AACR,QACC,KAAM,IAAIL,CAAAA,KAAJ,CAAU,2DAAV,CAAN,CAXF,CAcA,KAAK+B,SAAL,CAAiB,GAAIjC,6BAAJ,CAAwB,CAAEL,MAAM,CAAEc,IAAI,CAACG,MAAL,CAAYqB,SAAtB,CAAxB,CAAjB,CACA,KAAKC,YAAL,CAAoBzB,IAAI,CAACG,MAAL,CAAYsB,YAAhC,CACA,KAAKC,sBAAL,CAA8B,GAAIK,6CAAJ,CAA0B,CAAE7C,MAAM,CAAEc,IAAI,CAACG,MAAL,CAAYuB,sBAAtB,CAA1B,CAA9B,CACA,KAAKC,UAAL,CAAkBU,KAAK,CAACC,IAAN,CAAWtC,IAAI,CAACG,MAAL,CAAYwB,UAAZ,CAAuBV,UAAvB,CAAkCnB,KAA7C,CAAoDyC,OAAO,EAAI,GAAIJ,mBAAJ,CAAc,CAAEjD,MAAM,CAAEqD,OAAV,CAAd,CAA/D,CAAlB,CAEA,GAAG,kBAAoBvC,CAAAA,IAAI,CAACG,MAA5B,CACC,KAAKyB,cAAL,CAAsB5B,IAAI,CAACG,MAAL,CAAYyB,cAAlC,CAED,GAAG,cAAgB5B,CAAAA,IAAI,CAACG,MAAxB,CACC,KAAK0B,UAAL,CAAkB,GAAIG,oBAAJ,CAAe,CAAE9C,MAAM,CAAEc,IAAI,CAACG,MAAL,CAAY0B,UAAtB,CAAf,CAAlB,CACD;AACA,CACD;AACA;;;IAIAzB,QAAQ,EACR,CACC,KAAMD,CAAAA,MAAM,CAAG,GAAIf,CAAAA,MAAM,CAACO,QAAX,CAAoB,CAClCG,KAAK,CAAE,CACN,GAAIV,CAAAA,MAAM,CAAC0C,OAAX,CAAmB,CAAEhC,KAAK,CAAE,KAAKuB,OAAd,CAAnB,CADM,CAEN,KAAKC,MAAL,CAAYlB,QAAZ,EAFM,CAGN,GAAIhB,CAAAA,MAAM,CAACyB,WAAX,CAAuB,CACtBC,OAAO,CAAE,CACRC,QAAQ,CAAE,CADF,CACK;AACbC,SAAS,CAAE,CAAE;AAFL,CADa,CAKtBlB,KAAK,CAAE,KAAKyB,MAAL,CAAYnB,QAAZ,GAAuBa,UAAvB,CAAkCnB,KALnB,CAAvB,CAHM,CAUN,KAAK0B,SAAL,CAAepB,QAAf,EAVM,CAWN,KAAKqB,YAXC,CAYN,KAAKC,sBAAL,CAA4BtB,QAA5B,EAZM,CAaN,GAAIhB,CAAAA,MAAM,CAACO,QAAX,CAAoB,CACnBG,KAAK,CAAEuC,KAAK,CAACC,IAAN,CAAW,KAAKX,UAAhB,CAA4BY,OAAO,EAAIA,OAAO,CAACnC,QAAR,EAAvC,CADY,CAApB,CAbM,CAD2B,CAApB,CAAf,CAoBA,GAAG,kBAAoB,KAAvB,CACCD,MAAM,CAACc,UAAP,CAAkBnB,KAAlB,CAAwBO,IAAxB,CAA6B,KAAKuB,cAAlC,EAED,GAAG,cAAgB,KAAnB,CACCzB,MAAM,CAACc,UAAP,CAAkBnB,KAAlB,CAAwBO,IAAxB,CAA6B,KAAKwB,UAAL,CAAgBzB,QAAhB,EAA7B,EAED,MAAOD,CAAAA,MAAP,CACA,CACD;AACA;;;IAIAG,MAAM,EACN,CACC,KAAMH,CAAAA,MAAM,CAAG,CACdkB,OAAO,CAAE,KAAKA,OADA,CAEdC,MAAM,CAAE,KAAKA,MAAL,CAAYhB,MAAZ,EAFM,CAGdiB,MAAM,CAAE,KAAKA,MAAL,CAAYjB,MAAZ,EAHM,CAIdkB,SAAS,CAAE,KAAKA,SAAL,CAAelB,MAAf,EAJG,CAKdmB,YAAY,CAAE,KAAKA,YAAL,CAAkBnB,MAAlB,EALA,CAMdoB,sBAAsB,CAAE,KAAKA,sBAAL,CAA4BpB,MAA5B,EANV,CAOdqB,UAAU,CAAEU,KAAK,CAACC,IAAN,CAAW,KAAKX,UAAhB,CAA4BY,OAAO,EAAIA,OAAO,CAACjC,MAAR,EAAvC,CAPE,CAAf,CAUA,GAAG,kBAAoB,KAAvB,CACCH,MAAM,CAACyB,cAAP,CAAwB,KAAKA,cAAL,CAAoBtB,MAApB,EAAxB,CAED,GAAG,cAAgB,KAAnB,CACCH,MAAM,CAAC0B,UAAP,CAAoB,KAAKA,UAAL,CAAgBvB,MAAhB,EAApB,CAED,MAAOH,CAAAA,MAAP,CACA,CACD;AA/TD,CAiUA;AACA;;iEAGe,KAAMqC,CAAAA,sBACrB,CACC;AACA;;;;IAKA9D,WAAW,CAACC,UAAU,CAAG,EAAd,CACX,CACC;AACA;;;KAIA,KAAK8D,MAAL,CAAc,gCAAmB9D,UAAnB,CAA+B,QAA/B,CAAyC6D,sBAAsB,CAAC3D,aAAvB,CAAqC,QAArC,CAAzC,CAAd,CACA;;;KAIA,KAAK6D,kBAAL,CAA0B,gCAAmB/D,UAAnB,CAA+B,oBAA/B,CAAqD6D,sBAAsB,CAAC3D,aAAvB,CAAqC,oBAArC,CAArD,CAA1B,CACA;;;KAIA,KAAK8D,cAAL,CAAsB,gCAAmBhE,UAAnB,CAA+B,gBAA/B,CAAiD6D,sBAAsB,CAAC3D,aAAvB,CAAqC,gBAArC,CAAjD,CAAtB,CACA;AAEA;AACA,GAAG,UAAYF,CAAAA,UAAf,CACC,KAAKM,UAAL,CAAgBN,UAAU,CAACO,MAA3B,EACD;AACA,CACD;AACA;;;IAIA,MAAOL,CAAAA,aAAP,CAAqBM,UAArB,CACA,CACC,OAAOA,UAAP,EAEC,IAAK,QAAL,CACC,MAAO,IAAIiC,CAAAA,0BAAJ,EAAP,CACD,IAAK,oBAAL,CACC,MAAO,IAAI7B,6BAAJ,EAAP,CACD,IAAK,gBAAL,CACC,MAAO,IAAIH,CAAAA,MAAM,CAACI,SAAX,EAAP,CACD,QACC,KAAM,IAAIC,CAAAA,KAAJ,CAAW,yDAAwDN,UAAW,EAA9E,CAAN,CATF,CAWA,CACD;AACA;;;;;;;;;;;;;;IAeA,MAAOD,CAAAA,MAAP,CAAcP,UAAU,CAAG,EAA3B,CACA,CACC;;;;;;KAOA,KAAMe,CAAAA,KAAK,CAAG,gCAAmBf,UAAnB,CAA+B,OAA/B,CAAwC,EAAxC,CAAd,CAEA,MAAQ,IAAIS,CAAAA,MAAM,CAACO,QAAX,CAAoB,CAC3BC,IAAI,CAAGF,KAAK,CAACG,SAAN,EAAmB,EADC,CAE3BC,KAAK,CAAE,CACNsB,0BAA0B,CAAClC,MAA3B,CAAkCQ,KAAK,CAAC+C,MAAN,EAAgB,EAAlD,CADM,CAENlD,6BAAoBL,MAApB,CAA2BQ,KAAK,CAACgD,kBAAN,EAA4B,EAAvD,CAFM,CAGN,GAAItD,CAAAA,MAAM,CAACI,SAAX,CAAqB,CAAEI,IAAI,CAAGF,KAAK,CAACiD,cAAN,EAAwB,EAAjC,CAArB,CAHM,CAFoB,CAApB,CAAR,CAQA,CACD;AACA;;;IAIA1D,UAAU,CAACC,MAAD,CACV,CACC;AACA,wBAAWA,MAAX,CAAmB,CAClB,QADkB,CAElB,oBAFkB,CAGlB,gBAHkB,CAAnB,EAKA;AAEA;AACA,KAAMc,CAAAA,IAAI,CAAGZ,MAAM,CAACa,aAAP,CAAqBf,MAArB,CACZA,MADY,CAEZsD,sBAAsB,CAACtD,MAAvB,CAA8B,CAC7BQ,KAAK,CAAE,CACN+C,MAAM,CAAE,CACP/C,KAAK,CAAE,CACNG,SAAS,CAAE,QADL,CADA,CADF,CAMN6C,kBAAkB,CAAE,CACnBhD,KAAK,CAAE,CACNG,SAAS,CAAE,oBADL,CADY,CANd,CAWN8C,cAAc,CAAE,gBAXV,CADsB,CAA9B,CAFY,CAAb,CAmBA,GAAG3C,IAAI,CAACE,QAAL,GAAkB,KAArB,CACC,KAAM,IAAIT,CAAAA,KAAJ,CAAU,gFAAV,CAAN,CACD;AAEA;AACA,KAAKgD,MAAL,CAAc,GAAIrB,CAAAA,0BAAJ,CAA+B,CAAElC,MAAM,CAAEc,IAAI,CAACG,MAAL,CAAYsC,MAAtB,CAA/B,CAAd,CACA,KAAKC,kBAAL,CAA0B,GAAInD,6BAAJ,CAAwB,CAAEL,MAAM,CAAEc,IAAI,CAACG,MAAL,CAAYuC,kBAAtB,CAAxB,CAA1B,CACA,KAAKC,cAAL,CAAsB3C,IAAI,CAACG,MAAL,CAAYwC,cAAlC,CACA;AACA,CACD;AACA;;;IAIAvC,QAAQ,EACR,CACC,MAAQ,IAAIhB,CAAAA,MAAM,CAACO,QAAX,CAAoB,CAC3BG,KAAK,CAAE,CACN,KAAK2C,MAAL,CAAYrC,QAAZ,EADM,CAEN,KAAKsC,kBAAL,CAAwBtC,QAAxB,EAFM,CAGN,KAAKuC,cAHC,CADoB,CAApB,CAAR,CAOA,CACD;AACA;;;IAIArC,MAAM,EACN,CACC,MAAO,CACNmC,MAAM,CAAE,KAAKA,MAAL,CAAYnC,MAAZ,EADF,CAENoC,kBAAkB,CAAE,KAAKA,kBAAL,CAAwBpC,MAAxB,EAFd,CAGNqC,cAAc,CAAE,KAAKA,cAAL,CAAoBrC,MAApB,EAHV,CAAP,CAKA,CACD;AAhKD,CAkKA","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport GeneralNames from \"./GeneralNames.js\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\nimport Attribute from \"./Attribute.js\";\nimport Extensions from \"./Extensions.js\";\nimport { AttCertValidityPeriod, IssuerSerial } from \"./AttributeCertificateV1.js\";\n//**************************************************************************************\n/**\n * Class from RFC5755\n */\nexport class ObjectDigestInfo\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for ObjectDigestInfo class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {Enumerated}\n\t\t * @desc digestedObjectType\n\t\t */\n\t\tthis.digestedObjectType = getParametersValue(parameters, \"digestedObjectType\", ObjectDigestInfo.defaultValues(\"digestedObjectType\"));\n\t\t\n\t\tif(\"otherObjectTypeID\" in parameters)\n\t\t\t/**\n\t\t\t * @type {ObjectIdentifier}\n\t\t\t * @desc otherObjectTypeID\n\t\t\t */\n\t\t\tthis.otherObjectTypeID = getParametersValue(parameters, \"otherObjectTypeID\", ObjectDigestInfo.defaultValues(\"otherObjectTypeID\"));\n\t\t\n\t\t/**\n\t\t * @type {AlgorithmIdentifier}\n\t\t * @desc digestAlgorithm\n\t\t */\n\t\tthis.digestAlgorithm = getParametersValue(parameters, \"digestAlgorithm\", ObjectDigestInfo.defaultValues(\"digestAlgorithm\"));\n\t\t/**\n\t\t * @type {BitString}\n\t\t * @desc objectDigest\n\t\t */\n\t\tthis.objectDigest = getParametersValue(parameters, \"objectDigest\", ObjectDigestInfo.defaultValues(\"objectDigest\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"digestedObjectType\":\n\t\t\t\treturn new asn1js.Enumerated();\n\t\t\tcase \"otherObjectTypeID\":\n\t\t\t\treturn new asn1js.ObjectIdentifier();\n\t\t\tcase \"digestAlgorithm\":\n\t\t\t\treturn new AlgorithmIdentifier();\n\t\t\tcase \"objectDigest\":\n\t\t\t\treturn new asn1js.BitString();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for ObjectDigestInfo class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * ObjectDigestInfo ::= SEQUENCE {\n\t *   digestedObjectType  ENUMERATED {\n\t *     publicKey            (0),\n\t *     publicKeyCert        (1),\n\t *     otherObjectTypes     (2) },\n\t *   -- otherObjectTypes MUST NOT\n\t *   -- be used in this profile\n\t *   otherObjectTypeID   OBJECT IDENTIFIER OPTIONAL,\n\t *   digestAlgorithm     AlgorithmIdentifier,\n\t *   objectDigest        BIT STRING\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [digestedObjectType]\n\t\t * @property {string} [otherObjectTypeID]\n\t\t * @property {string} [digestAlgorithm]\n\t\t * @property {string} [objectDigest]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.Enumerated({ name: (names.digestedObjectType || \"\") }),\n\t\t\t\tnew asn1js.ObjectIdentifier({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.otherObjectTypeID || \"\")\n\t\t\t\t}),\n\t\t\t\tAlgorithmIdentifier.schema(names.digestAlgorithm || {}),\n\t\t\t\tnew asn1js.BitString({ name: (names.objectDigest || \"\") }),\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"digestedObjectType\",\n\t\t\t\"otherObjectTypeID\",\n\t\t\t\"digestAlgorithm\",\n\t\t\t\"objectDigest\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tObjectDigestInfo.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tdigestedObjectType: \"digestedObjectType\",\n\t\t\t\t\totherObjectTypeID: \"otherObjectTypeID\",\n\t\t\t\t\tdigestAlgorithm: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"digestAlgorithm\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tobjectDigest: \"objectDigest\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ObjectDigestInfo\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tthis.digestedObjectType = asn1.result.digestedObjectType;\n\t\t\n\t\tif(\"otherObjectTypeID\" in asn1.result)\n\t\t\tthis.otherObjectTypeID = asn1.result.otherObjectTypeID;\n\t\t\n\t\tthis.digestAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.digestAlgorithm });\n\t\tthis.objectDigest = asn1.result.objectDigest;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\tconst result = new asn1js.Sequence({\n\t\t\tvalue: [this.digestedObjectType]\n\t\t});\n\t\t\n\t\tif(\"otherObjectTypeID\" in this)\n\t\t\tresult.value.push(this.otherObjectTypeID);\n\t\t\n\t\tresult.value.push(this.digestAlgorithm.toSchema());\n\t\tresult.value.push(this.objectDigest);\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst result = {\n\t\t\tdigestedObjectType: this.digestedObjectType.toJSON()\n\t\t};\n\t\t\n\t\tif(\"otherObjectTypeID\" in this)\n\t\t\tresult.otherObjectTypeID = this.otherObjectTypeID.toJSON();\n\t\t\n\t\tresult.digestAlgorithm = this.digestAlgorithm.toJSON();\n\t\tresult.objectDigest = this.objectDigest.toJSON();\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Class from RFC5755\n */\nexport class V2Form\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for V2Form class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\tif(\"issuerName\" in parameters)\n\t\t\t/**\n\t\t\t * @type {GeneralNames}\n\t\t\t * @desc issuerName\n\t\t\t */\n\t\t\tthis.issuerName = getParametersValue(parameters, \"issuerName\", V2Form.defaultValues(\"issuerName\"));\n\t\t\n\t\tif(\"baseCertificateID\" in parameters)\n\t\t\t/**\n\t\t\t * @type {IssuerSerial}\n\t\t\t * @desc baseCertificateID\n\t\t\t */\n\t\t\tthis.baseCertificateID = getParametersValue(parameters, \"baseCertificateID\", V2Form.defaultValues(\"baseCertificateID\"));\n\t\t\n\t\tif(\"objectDigestInfo\" in parameters)\n\t\t\t/**\n\t\t\t * @type {ObjectDigestInfo}\n\t\t\t * @desc objectDigestInfo\n\t\t\t */\n\t\t\tthis.objectDigestInfo = getParametersValue(parameters, \"objectDigestInfo\", V2Form.defaultValues(\"objectDigestInfo\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"issuerName\":\n\t\t\t\treturn new GeneralNames();\n\t\t\tcase \"baseCertificateID\":\n\t\t\t\treturn new IssuerSerial();\n\t\t\tcase \"objectDigestInfo\":\n\t\t\t\treturn new ObjectDigestInfo();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for V2Form class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * V2Form ::= SEQUENCE {\n\t *   issuerName            GeneralNames  OPTIONAL,\n\t *   baseCertificateID     [0] IssuerSerial  OPTIONAL,\n\t *   objectDigestInfo      [1] ObjectDigestInfo  OPTIONAL\n\t *     -- issuerName MUST be present in this profile\n\t *     -- baseCertificateID and objectDigestInfo MUST NOT\n\t *     -- be present in this profile\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [issuerName]\n\t\t * @property {string} [baseCertificateID]\n\t\t * @property {string} [objectDigestInfo]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tGeneralNames.schema({\n\t\t\t\t\tnames: {\n\t\t\t\t\t\tblockName: names.issuerName\n\t\t\t\t\t}\n\t\t\t\t}, true),\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.baseCertificateID || \"\"),\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3,\n\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: IssuerSerial.schema().valueBlock.value\n\t\t\t\t}),\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.objectDigestInfo || \"\"),\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3,\n\t\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: ObjectDigestInfo.schema().valueBlock.value\n\t\t\t\t})\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"issuerName\",\n\t\t\t\"baseCertificateID\",\n\t\t\t\"objectDigestInfo\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tV2Form.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tissuerName: \"issuerName\",\n\t\t\t\t\tbaseCertificateID: \"baseCertificateID\",\n\t\t\t\t\tobjectDigestInfo: \"objectDigestInfo\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for V2Form\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tif(\"issuerName\" in asn1.result)\n\t\t\tthis.issuerName = new GeneralNames({ schema: asn1.result.issuerName });\n\t\t\n\t\tif(\"baseCertificateID\" in asn1.result)\n\t\t{\n\t\t\tthis.baseCertificateID = new IssuerSerial({\n\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\tvalue: asn1.result.baseCertificateID.valueBlock.value\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t\t\n\t\tif(\"objectDigestInfo\" in asn1.result)\n\t\t{\n\t\t\tthis.objectDigestInfo = new ObjectDigestInfo({\n\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\tvalue: asn1.result.objectDigestInfo.valueBlock.value\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\tconst result = new asn1js.Sequence();\n\t\t\n\t\tif(\"issuerName\" in this)\n\t\t\tresult.valueBlock.value.push(this.issuerName.toSchema());\n\t\t\n\t\tif(\"baseCertificateID\" in this)\n\t\t{\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3,\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tvalue: this.baseCertificateID.toSchema().valueBlock.value\n\t\t\t}));\n\t\t}\n\t\t\n\t\tif(\"objectDigestInfo\" in this)\n\t\t{\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3,\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t},\n\t\t\t\tvalue: this.objectDigestInfo.toSchema().valueBlock.value\n\t\t\t}));\n\t\t}\n\t\t\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn result;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst result = {};\n\t\t\n\t\tif(\"issuerName\" in this)\n\t\t\tresult.issuerName = this.issuerName.toJSON();\n\t\t\n\t\tif(\"baseCertificateID\" in this)\n\t\t\tresult.baseCertificateID = this.baseCertificateID.toJSON();\n\t\t\n\t\tif(\"objectDigestInfo\" in this)\n\t\t\tresult.objectDigestInfo = this.objectDigestInfo.toJSON();\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Class from RFC5755\n */\nexport class Holder\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for Holder class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\tif(\"baseCertificateID\" in parameters)\n\t\t\t/**\n\t\t\t * @type {IssuerSerial}\n\t\t\t * @desc baseCertificateID\n\t\t\t */\n\t\t\tthis.baseCertificateID = getParametersValue(parameters, \"baseCertificateID\", Holder.defaultValues(\"baseCertificateID\"));\n\t\t\n\t\tif(\"entityName\" in parameters)\n\t\t\t/**\n\t\t\t * @type {GeneralNames}\n\t\t\t * @desc entityName\n\t\t\t */\n\t\t\tthis.entityName = getParametersValue(parameters, \"entityName\", Holder.defaultValues(\"entityName\"));\n\t\t\n\t\tif(\"objectDigestInfo\" in parameters)\n\t\t\t/**\n\t\t\t * @type {ObjectDigestInfo}\n\t\t\t * @desc objectDigestInfo\n\t\t\t */\n\t\t\tthis.objectDigestInfo = getParametersValue(parameters, \"objectDigestInfo\", Holder.defaultValues(\"objectDigestInfo\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"baseCertificateID\":\n\t\t\t\treturn new IssuerSerial();\n\t\t\tcase \"entityName\":\n\t\t\t\treturn new GeneralNames();\n\t\t\tcase \"objectDigestInfo\":\n\t\t\t\treturn new ObjectDigestInfo();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for Holder class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * Holder ::= SEQUENCE {\n\t *   baseCertificateID   [0] IssuerSerial OPTIONAL,\n\t *       -- the issuer and serial number of\n\t *       -- the holder's Public Key Certificate\n\t *   entityName          [1] GeneralNames OPTIONAL,\n\t *       -- the name of the claimant or role\n\t *   objectDigestInfo    [2] ObjectDigestInfo OPTIONAL\n\t *       -- used to directly authenticate the holder,\n\t *       -- for example, an executable\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [baseCertificateID]\n\t\t * @property {string} [entityName]\n\t\t * @property {string} [objectDigestInfo]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.baseCertificateID || \"\"),\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3,\n\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: IssuerSerial.schema().valueBlock.value\n\t\t\t\t}),\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.entityName || \"\"),\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3,\n\t\t\t\t\t\ttagNumber: 1 // [2]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: GeneralNames.schema().valueBlock.value\n\t\t\t\t}),\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.objectDigestInfo || \"\"),\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3,\n\t\t\t\t\t\ttagNumber: 2 // [2]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: ObjectDigestInfo.schema().valueBlock.value\n\t\t\t\t})\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"baseCertificateID\",\n\t\t\t\"entityName\",\n\t\t\t\"objectDigestInfo\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tHolder.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tbaseCertificateID: \"baseCertificateID\",\n\t\t\t\t\tentityName: \"entityName\",\n\t\t\t\t\tobjectDigestInfo: \"objectDigestInfo\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for Holder\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tif(\"baseCertificateID\" in asn1.result)\n\t\t{\n\t\t\tthis.baseCertificateID = new IssuerSerial({\n\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\tvalue: asn1.result.baseCertificateID.valueBlock.value\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t\t\n\t\tif(\"entityName\" in asn1.result)\n\t\t{\n\t\t\tthis.entityName = new GeneralNames({\n\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\tvalue: asn1.result.entityName.valueBlock.value\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t\t\n\t\tif(\"objectDigestInfo\" in asn1.result)\n\t\t{\n\t\t\tthis.objectDigestInfo = new ObjectDigestInfo({\n\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\tvalue: asn1.result.objectDigestInfo.valueBlock.value\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\tconst result = new asn1js.Sequence();\n\t\t\n\t\tif(\"baseCertificateID\" in this)\n\t\t{\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3,\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tvalue: this.baseCertificateID.toSchema().valueBlock.value\n\t\t\t}));\n\t\t}\n\t\t\n\t\tif(\"entityName\" in this)\n\t\t{\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3,\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t},\n\t\t\t\tvalue: this.entityName.toSchema().valueBlock.value\n\t\t\t}));\n\t\t}\n\t\t\n\t\tif(\"objectDigestInfo\" in this)\n\t\t{\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3,\n\t\t\t\t\ttagNumber: 2 // [2]\n\t\t\t\t},\n\t\t\t\tvalue: this.objectDigestInfo.toSchema().valueBlock.value\n\t\t\t}));\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst result = {};\n\t\t\n\t\tif(\"baseCertificateID\" in this)\n\t\t\tresult.baseCertificateID = this.baseCertificateID.toJSON();\n\t\t\n\t\tif(\"entityName\" in this)\n\t\t\tresult.entityName = this.entityName.toJSON();\n\t\t\n\t\tif(\"objectDigestInfo\" in this)\n\t\t\tresult.objectDigestInfo = this.objectDigestInfo.toJSON();\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Class from RFC5755\n */\nexport class AttributeCertificateInfoV2\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for AttributeCertificateInfoV2 class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {Number}\n\t\t * @desc version\n\t\t */\n\t\tthis.version = getParametersValue(parameters, \"version\", AttributeCertificateInfoV2.defaultValues(\"version\"));\n\t\t/**\n\t\t * @type {Holder}\n\t\t * @desc holder\n\t\t */\n\t\tthis.holder = getParametersValue(parameters, \"holder\", AttributeCertificateInfoV2.defaultValues(\"holder\"));\n\t\t/**\n\t\t * @type {GeneralNames|V2Form}\n\t\t * @desc issuer\n\t\t */\n\t\tthis.issuer = getParametersValue(parameters, \"issuer\", AttributeCertificateInfoV2.defaultValues(\"issuer\"));\n\t\t/**\n\t\t * @type {AlgorithmIdentifier}\n\t\t * @desc signature\n\t\t */\n\t\tthis.signature = getParametersValue(parameters, \"signature\", AttributeCertificateInfoV2.defaultValues(\"signature\"));\n\t\t/**\n\t\t * @type {Integer}\n\t\t * @desc serialNumber\n\t\t */\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", AttributeCertificateInfoV2.defaultValues(\"serialNumber\"));\n\t\t/**\n\t\t * @type {AttCertValidityPeriod}\n\t\t * @desc attrCertValidityPeriod\n\t\t */\n\t\tthis.attrCertValidityPeriod = getParametersValue(parameters, \"attrCertValidityPeriod\", AttributeCertificateInfoV2.defaultValues(\"attrCertValidityPeriod\"));\n\t\t/**\n\t\t * @type {Array.<Attribute>}\n\t\t * @desc attributes\n\t\t */\n\t\tthis.attributes = getParametersValue(parameters, \"attributes\", AttributeCertificateInfoV2.defaultValues(\"attributes\"));\n\t\t\n\t\tif(\"issuerUniqueID\" in parameters)\n\t\t\t/**\n\t\t\t * @type {BitString}\n\t\t\t * @desc issuerUniqueID\n\t\t\t */\n\t\t\tthis.issuerUniqueID = getParametersValue(parameters, \"issuerUniqueID\", AttributeCertificateInfoV2.defaultValues(\"issuerUniqueID\"));\n\t\t\n\t\tif(\"extensions\" in parameters)\n\t\t\t/**\n\t\t\t * @type {Extensions}\n\t\t\t * @desc extensions\n\t\t\t */\n\t\t\tthis.extensions = getParametersValue(parameters, \"extensions\", AttributeCertificateInfoV2.defaultValues(\"extensions\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"version\":\n\t\t\t\treturn 1;\n\t\t\tcase \"holder\":\n\t\t\t\treturn new Holder();\n\t\t\tcase \"issuer\":\n\t\t\t\treturn {};\n\t\t\tcase \"signature\":\n\t\t\t\treturn new AlgorithmIdentifier();\n\t\t\tcase \"serialNumber\":\n\t\t\t\treturn new asn1js.Integer();\n\t\t\tcase \"attrCertValidityPeriod\":\n\t\t\t\treturn new AttCertValidityPeriod();\n\t\t\tcase \"attributes\":\n\t\t\t\treturn [];\n\t\t\tcase \"issuerUniqueID\":\n\t\t\t\treturn new asn1js.BitString();\n\t\t\tcase \"extensions\":\n\t\t\t\treturn new Extensions();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for AttributeCertificateInfoV2 class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * AttributeCertificateInfoV2 ::= SEQUENCE {\n\t *   version                 AttCertVersion, -- version is v2\n\t *   holder                  Holder,\n\t *   issuer                  AttCertIssuer,\n\t *   signature               AlgorithmIdentifier,\n\t *   serialNumber            CertificateSerialNumber,\n\t *   attrCertValidityPeriod  AttCertValidityPeriod,\n\t *   attributes              SEQUENCE OF Attribute,\n\t *   issuerUniqueID          UniqueIdentifier OPTIONAL,\n\t *   extensions              Extensions OPTIONAL\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [issuer]\n\t\t * @property {string} [serialNumber]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\n\t\t\t\tHolder.schema(names.holder || {}),\n\t\t\t\tnew asn1js.Choice({\n\t\t\t\t\tvalue: [\n\t\t\t\t\t\tGeneralNames.schema({\n\t\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\t\tblockName: (names.issuer || \"\")\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\t\t\tname: (names.issuer || \"\"),\n\t\t\t\t\t\t\tidBlock: {\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tvalue: V2Form.schema().valueBlock.value\n\t\t\t\t\t\t})\n\t\t\t\t\t]\n\t\t\t\t}),\n\t\t\t\tAlgorithmIdentifier.schema(names.signature || {}),\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"\") }),\n\t\t\t\tAttCertValidityPeriod.schema(names.attrCertValidityPeriod || {}),\n\t\t\t\tnew asn1js.Sequence({\n\t\t\t\t\tname: (names.attributes || \"\"),\n\t\t\t\t\tvalue: [\n\t\t\t\t\t\tnew asn1js.Repeated({\n\t\t\t\t\t\t\tvalue: Attribute.schema()\n\t\t\t\t\t\t})\n\t\t\t\t\t]\n\t\t\t\t}),\n\t\t\t\tnew asn1js.BitString({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.issuerUniqueID || \"\")\n\t\t\t\t}),\n\t\t\t\tExtensions.schema(names.extensions || {}, true)\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"version\",\n\t\t\t\"holder\",\n\t\t\t\"issuer\",\n\t\t\t\"signature\",\n\t\t\t\"serialNumber\",\n\t\t\t\"attrCertValidityPeriod\",\n\t\t\t\"attributes\",\n\t\t\t\"issuerUniqueID\",\n\t\t\t\"extensions\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tAttributeCertificateInfoV2.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tversion: \"version\",\n\t\t\t\t\tholder: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"holder\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tissuer: \"issuer\",\n\t\t\t\t\tsignature: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"signature\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tserialNumber: \"serialNumber\",\n\t\t\t\t\tattrCertValidityPeriod: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"attrCertValidityPeriod\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tattributes: \"attributes\",\n\t\t\t\t\tissuerUniqueID: \"issuerUniqueID\",\n\t\t\t\t\textensions: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"extensions\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttributeCertificateInfoV2\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\n\t\tthis.holder = new Holder({ schema: asn1.result.holder });\n\t\t\n\t\tswitch(asn1.result.issuer.idBlock.tagClass)\n\t\t{\n\t\t\tcase 3: // V2Form\n\t\t\t\tthis.issuer = new V2Form({\n\t\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\t\tvalue: asn1.result.issuer.valueBlock.value\n\t\t\t\t\t})\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 1: // GeneralNames (should not be used)\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"Incorect value for 'issuer' in AttributeCertificateInfoV2\");\n\t\t}\n\t\t\n\t\tthis.signature = new AlgorithmIdentifier({ schema: asn1.result.signature });\n\t\tthis.serialNumber = asn1.result.serialNumber;\n\t\tthis.attrCertValidityPeriod = new AttCertValidityPeriod({ schema: asn1.result.attrCertValidityPeriod });\n\t\tthis.attributes = Array.from(asn1.result.attributes.valueBlock.value, element => new Attribute({ schema: element }));\n\t\t\n\t\tif(\"issuerUniqueID\" in asn1.result)\n\t\t\tthis.issuerUniqueID = asn1.result.issuerUniqueID;\n\t\t\n\t\tif(\"extensions\" in asn1.result)\n\t\t\tthis.extensions = new Extensions({ schema: asn1.result.extensions });\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\tconst result = new asn1js.Sequence({\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.Integer({ value: this.version }),\n\t\t\t\tthis.holder.toSchema(),\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: this.issuer.toSchema().valueBlock.value\n\t\t\t\t}),\n\t\t\t\tthis.signature.toSchema(),\n\t\t\t\tthis.serialNumber,\n\t\t\t\tthis.attrCertValidityPeriod.toSchema(),\n\t\t\t\tnew asn1js.Sequence({\n\t\t\t\t\tvalue: Array.from(this.attributes, element => element.toSchema())\n\t\t\t\t})\n\t\t\t]\n\t\t});\n\t\t\n\t\tif(\"issuerUniqueID\" in this)\n\t\t\tresult.valueBlock.value.push(this.issuerUniqueID);\n\t\t\n\t\tif(\"extensions\" in this)\n\t\t\tresult.valueBlock.value.push(this.extensions.toSchema());\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst result = {\n\t\t\tversion: this.version,\n\t\t\tholder: this.holder.toJSON(),\n\t\t\tissuer: this.issuer.toJSON(),\n\t\t\tsignature: this.signature.toJSON(),\n\t\t\tserialNumber: this.serialNumber.toJSON(),\n\t\t\tattrCertValidityPeriod: this.attrCertValidityPeriod.toJSON(),\n\t\t\tattributes: Array.from(this.attributes, element => element.toJSON())\n\t\t};\n\t\t\n\t\tif(\"issuerUniqueID\" in this)\n\t\t\tresult.issuerUniqueID = this.issuerUniqueID.toJSON();\n\t\t\n\t\tif(\"extensions\" in this)\n\t\t\tresult.extensions = this.extensions.toJSON();\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Class from RFC5755\n */\nexport default class AttributeCertificateV2\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for AttributeCertificateV2 class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {AttributeCertificateInfoV2}\n\t\t * @desc acinfo\n\t\t */\n\t\tthis.acinfo = getParametersValue(parameters, \"acinfo\", AttributeCertificateV2.defaultValues(\"acinfo\"));\n\t\t/**\n\t\t * @type {AlgorithmIdentifier}\n\t\t * @desc signatureAlgorithm\n\t\t */\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", AttributeCertificateV2.defaultValues(\"signatureAlgorithm\"));\n\t\t/**\n\t\t * @type {BitString}\n\t\t * @desc signatureValue\n\t\t */\n\t\tthis.signatureValue = getParametersValue(parameters, \"signatureValue\", AttributeCertificateV2.defaultValues(\"signatureValue\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"acinfo\":\n\t\t\t\treturn new AttributeCertificateInfoV2();\n\t\t\tcase \"signatureAlgorithm\":\n\t\t\t\treturn new AlgorithmIdentifier();\n\t\t\tcase \"signatureValue\":\n\t\t\t\treturn new asn1js.BitString();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for AttributeCertificateV2 class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * AttributeCertificate ::= SEQUENCE {\n\t *   acinfo               AttributeCertificateInfoV2,\n\t *   signatureAlgorithm   AlgorithmIdentifier,\n\t *   signatureValue       BIT STRING\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {Object} [acinfo]\n\t\t * @property {Object} [signatureAlgorithm]\n\t\t * @property {string} [signatureValue]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tAttributeCertificateInfoV2.schema(names.acinfo || {}),\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {}),\n\t\t\t\tnew asn1js.BitString({ name: (names.signatureValue || \"\") })\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"acinfo\",\n\t\t\t\"signatureAlgorithm\",\n\t\t\t\"signatureValue\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tAttributeCertificateV2.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tacinfo: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"acinfo\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tsignatureAlgorithm: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"signatureAlgorithm\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tsignatureValue: \"signatureValue\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttributeCertificateV2\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tthis.acinfo = new AttributeCertificateInfoV2({ schema: asn1.result.acinfo });\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\n\t\tthis.signatureValue = asn1.result.signatureValue;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\treturn (new asn1js.Sequence({\n\t\t\tvalue: [\n\t\t\t\tthis.acinfo.toSchema(),\n\t\t\t\tthis.signatureAlgorithm.toSchema(),\n\t\t\t\tthis.signatureValue\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\treturn {\n\t\t\tacinfo: this.acinfo.toJSON(),\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\n\t\t\tsignatureValue: this.signatureValue.toJSON()\n\t\t};\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n"],"file":"AttributeCertificateV2.js"}