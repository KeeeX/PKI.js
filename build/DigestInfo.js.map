{"version":3,"sources":["../src/DigestInfo.js"],"names":["DigestInfo","constructor","parameters","digestAlgorithm","defaultValues","digest","fromSchema","schema","memberName","AlgorithmIdentifier","asn1js","OctetString","Error","compareWithDefault","memberValue","algorithmId","isEqual","names","Sequence","name","blockName","value","asn1","compareSchema","verified","result","toSchema","toJSON"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3447\r\n */\r\nexport default class DigestInfo \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for DigestInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc digestAlgorithm\r\n\t\t */\r\n\t\tthis.digestAlgorithm = getParametersValue(parameters, \"digestAlgorithm\", DigestInfo.defaultValues(\"digestAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc digest\r\n\t\t */\r\n\t\tthis.digest = getParametersValue(parameters, \"digest\", DigestInfo.defaultValues(\"digest\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"digestAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"digest\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for DigestInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"digestAlgorithm\":\r\n\t\t\t\treturn ((AlgorithmIdentifier.compareWithDefault(\"algorithmId\", memberValue.algorithmId)) &&\r\n\t\t\t\t((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"digest\":\r\n\t\t\t\treturn (memberValue.isEqual(DigestInfo.defaultValues(memberName)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for DigestInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * DigestInfo ::= SEQUENCE {\r\n\t *    digestAlgorithm DigestAlgorithmIdentifier,\r\n\t *    digest Digest }\r\n\t *\r\n\t * Digest ::= OCTET STRING\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [type]\r\n\t\t * @property {string} [setName]\r\n\t\t * @property {string} [values]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.digestAlgorithm || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"digestAlgorithm\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.digest || \"digest\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"digestAlgorithm\",\r\n\t\t\t\"digest\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tDigestInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tdigestAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"digestAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tdigest: \"digest\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for DigestInfo\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.digestAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.digestAlgorithm });\r\n\t\tthis.digest = asn1.result.digest;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.digestAlgorithm.toSchema(),\r\n\t\t\t\tthis.digest\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tdigestAlgorithm: this.digestAlgorithm.toJSON(),\r\n\t\t\tdigest: this.digest.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"DigestInfo.js"}