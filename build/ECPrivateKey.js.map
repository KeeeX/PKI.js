{"version":3,"sources":["../src/ECPrivateKey.js"],"names":["ECPrivateKey","constructor","parameters","version","defaultValues","privateKey","namedCurve","publicKey","fromSchema","schema","fromJSON","json","memberName","asn1js","OctetString","ECPublicKey","Error","compareWithDefault","memberValue","isEqual","x","y","names","Sequence","name","blockName","value","Integer","Constructed","optional","idBlock","tagClass","tagNumber","ObjectIdentifier","BitString","asn1","compareSchema","verified","result","valueBlock","valueDec","toString","publicKeyData","valueHex","toSchema","outputArray","push","toBER","toJSON","crvName","privateKeyJSON","crv","d","publicKeyJSON","coodinateLength","toUpperCase","convertBuffer","byteLength","buffer","ArrayBuffer","view","Uint8Array","convertBufferView","set","slice"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, toBase64, arrayBufferToString, stringToArrayBuffer, fromBase64, clearProps } from \"pvutils\";\r\nimport ECPublicKey from \"./ECPublicKey.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5915\r\n */\r\nexport default class ECPrivateKey\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for ECCPrivateKey class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", ECPrivateKey.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc privateKey\r\n\t\t */\r\n\t\tthis.privateKey = getParametersValue(parameters, \"privateKey\", ECPrivateKey.defaultValues(\"privateKey\"));\r\n\r\n\t\tif(\"namedCurve\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {string}\r\n\t\t\t * @desc namedCurve\r\n\t\t\t */\r\n\t\t\tthis.namedCurve = getParametersValue(parameters, \"namedCurve\", ECPrivateKey.defaultValues(\"namedCurve\"));\r\n\r\n\t\tif(\"publicKey\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ECPublicKey}\r\n\t\t\t * @desc publicKey\r\n\t\t\t */\r\n\t\t\tthis.publicKey = getParametersValue(parameters, \"publicKey\", ECPrivateKey.defaultValues(\"publicKey\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 1;\r\n\t\t\tcase \"privateKey\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"namedCurve\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"publicKey\":\r\n\t\t\t\treturn new ECPublicKey();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ECCPrivateKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === ECPrivateKey.defaultValues(memberName));\r\n\t\t\tcase \"privateKey\":\r\n\t\t\t\treturn (memberValue.isEqual(ECPrivateKey.defaultValues(memberName)));\r\n\t\t\tcase \"namedCurve\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"publicKey\":\r\n\t\t\t\treturn ((ECPublicKey.compareWithDefault(\"namedCurve\", memberValue.namedCurve)) &&\r\n\t\t\t\t\t\t(ECPublicKey.compareWithDefault(\"x\", memberValue.x)) &&\r\n\t\t\t\t\t\t(ECPublicKey.compareWithDefault(\"y\", memberValue.y)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ECCPrivateKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * ECPrivateKey ::= SEQUENCE {\r\n\t * version        INTEGER { ecPrivkeyVer1(1) } (ecPrivkeyVer1),\r\n\t * privateKey     OCTET STRING,\r\n\t * parameters [0] ECParameters {{ NamedCurve }} OPTIONAL,\r\n\t * publicKey  [1] BIT STRING OPTIONAL\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [privateKey]\r\n\t\t * @property {string} [namedCurve]\r\n\t\t * @property {string} [publicKey]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.privateKey || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.namedCurve || \"\") })\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.BitString({ name: (names.publicKey || \"\") })\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"privateKey\",\r\n\t\t\t\"namedCurve\",\r\n\t\t\t\"publicKey\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tECPrivateKey.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tprivateKey: \"privateKey\",\r\n\t\t\t\t\tnamedCurve: \"namedCurve\",\r\n\t\t\t\t\tpublicKey: \"publicKey\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ECPrivateKey\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.privateKey = asn1.result.privateKey;\r\n\r\n\t\tif(\"namedCurve\" in asn1.result)\r\n\t\t\tthis.namedCurve = asn1.result.namedCurve.valueBlock.toString();\r\n\r\n\t\tif(\"publicKey\" in asn1.result)\r\n\t\t{\r\n\t\t\tconst publicKeyData = { schema: asn1.result.publicKey.valueBlock.valueHex };\r\n\t\t\tif(\"namedCurve\" in this)\r\n\t\t\t\tpublicKeyData.namedCurve = this.namedCurve;\r\n\r\n\t\t\tthis.publicKey = new ECPublicKey(publicKeyData);\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tconst outputArray = [\r\n\t\t\tnew asn1js.Integer({ value: this.version }),\r\n\t\t\tthis.privateKey\r\n\t\t];\r\n\r\n\t\tif(\"namedCurve\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.namedCurve })\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\tif(\"publicKey\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.BitString({ valueHex: this.publicKey.toSchema().toBER(false) })\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\treturn new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t});\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tif(((\"namedCurve\" in this) === false) || (ECPrivateKey.compareWithDefault(\"namedCurve\", this.namedCurve)))\r\n\t\t\tthrow new Error(\"Not enough information for making JSON: absent \\\"namedCurve\\\" value\");\r\n\r\n\t\tlet crvName = \"\";\r\n\r\n\t\tswitch(this.namedCurve)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.3.1.7\": // P-256\r\n\t\t\t\tcrvName = \"P-256\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.3.132.0.34\": // P-384\r\n\t\t\t\tcrvName = \"P-384\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.3.132.0.35\": // P-521\r\n\t\t\t\tcrvName = \"P-521\";\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\r\n\t\tconst privateKeyJSON = {\r\n\t\t\tcrv: crvName,\r\n\t\t\td: toBase64(arrayBufferToString(this.privateKey.valueBlock.valueHex), true, true, false)\r\n\t\t};\r\n\r\n\t\tif(\"publicKey\" in this)\r\n\t\t{\r\n\t\t\tconst publicKeyJSON = this.publicKey.toJSON();\r\n\r\n\t\t\tprivateKeyJSON.x = publicKeyJSON.x;\r\n\t\t\tprivateKeyJSON.y = publicKeyJSON.y;\r\n\t\t}\r\n\r\n\t\treturn privateKeyJSON;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tlet coodinateLength = 0;\r\n\r\n\t\tif(\"crv\" in json)\r\n\t\t{\r\n\t\t\tswitch(json.crv.toUpperCase())\r\n\t\t\t{\r\n\t\t\t\tcase \"P-256\":\r\n\t\t\t\t\tthis.namedCurve = \"1.2.840.10045.3.1.7\";\r\n\t\t\t\t\tcoodinateLength = 32;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"P-384\":\r\n\t\t\t\t\tthis.namedCurve = \"1.3.132.0.34\";\r\n\t\t\t\t\tcoodinateLength = 48;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"P-521\":\r\n\t\t\t\t\tthis.namedCurve = \"1.3.132.0.35\";\r\n\t\t\t\t\tcoodinateLength = 66;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"crv\\\"\");\r\n\r\n\t\tif(\"d\" in json)\r\n\t\t{\r\n\t\t\tconst convertBuffer = stringToArrayBuffer(fromBase64(json.d, true));\r\n\t\t\t\r\n\t\t\tif(convertBuffer.byteLength < coodinateLength)\r\n\t\t\t{\r\n\t\t\t\tconst buffer = new ArrayBuffer(coodinateLength);\r\n\t\t\t\tconst view = new Uint8Array(buffer);\r\n\t\t\t\tconst convertBufferView = new Uint8Array(convertBuffer);\r\n\t\t\t\tview.set(convertBufferView, 1);\r\n\t\t\t\t\r\n\t\t\t\tthis.privateKey = new asn1js.OctetString({ valueHex: buffer });\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tthis.privateKey = new asn1js.OctetString({ valueHex: convertBuffer.slice(0, coodinateLength) });\r\n\t\t}\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"d\\\"\");\r\n\r\n\t\tif((\"x\" in json) && (\"y\" in json))\r\n\t\t\tthis.publicKey = new ECPublicKey({ json });\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"ECPrivateKey.js"}