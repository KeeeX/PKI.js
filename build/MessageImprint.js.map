{"version":3,"sources":["../src/MessageImprint.js"],"names":["MessageImprint","constructor","parameters","hashAlgorithm","defaultValues","hashedMessage","fromSchema","schema","memberName","AlgorithmIdentifier","asn1js","OctetString","Error","compareWithDefault","memberValue","algorithmId","isEqual","names","Sequence","name","blockName","value","asn1","compareSchema","verified","result","toSchema","toJSON"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3161\r\n */\r\nexport default class MessageImprint\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for MessageImprint class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc hashAlgorithm\r\n\t\t */\r\n\t\tthis.hashAlgorithm = getParametersValue(parameters, \"hashAlgorithm\", MessageImprint.defaultValues(\"hashAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc hashedMessage\r\n\t\t */\r\n\t\tthis.hashedMessage = getParametersValue(parameters, \"hashedMessage\", MessageImprint.defaultValues(\"hashedMessage\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"hashAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"hashedMessage\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for MessageImprint class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"hashAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"hashedMessage\":\r\n\t\t\t\treturn (memberValue.isEqual(MessageImprint.defaultValues(memberName)) === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for MessageImprint class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * MessageImprint ::= SEQUENCE  {\r\n\t *    hashAlgorithm                AlgorithmIdentifier,\r\n\t *    hashedMessage                OCTET STRING  }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [hashAlgorithm]\r\n\t\t * @property {string} [hashedMessage]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.hashAlgorithm || {}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.hashedMessage || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"hashAlgorithm\",\r\n\t\t\t\"hashedMessage\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tMessageImprint.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\thashAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"hashAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\thashedMessage: \"hashedMessage\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for MessageImprint\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.hashAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.hashAlgorithm });\r\n\t\tthis.hashedMessage = asn1.result.hashedMessage;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.hashAlgorithm.toSchema(),\r\n\t\t\t\tthis.hashedMessage\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\thashAlgorithm: this.hashAlgorithm.toJSON(),\r\n\t\t\thashedMessage: this.hashedMessage.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"MessageImprint.js"}