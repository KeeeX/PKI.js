{"version":3,"sources":["../src/OtherPrimeInfo.js"],"names":["OtherPrimeInfo","constructor","parameters","prime","defaultValues","exponent","coefficient","fromSchema","schema","fromJSON","json","memberName","asn1js","Integer","Error","names","Sequence","name","blockName","value","asn1","compareSchema","verified","result","convertFromDER","toSchema","convertToDER","toJSON","r","valueBlock","valueHex","d","t"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, toBase64, arrayBufferToString, stringToArrayBuffer, fromBase64, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3447\r\n */\r\nexport default class OtherPrimeInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OtherPrimeInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc prime\r\n\t\t */\r\n\t\tthis.prime = getParametersValue(parameters, \"prime\", OtherPrimeInfo.defaultValues(\"prime\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc exponent\r\n\t\t */\r\n\t\tthis.exponent = getParametersValue(parameters, \"exponent\", OtherPrimeInfo.defaultValues(\"exponent\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc coefficient\r\n\t\t */\r\n\t\tthis.coefficient = getParametersValue(parameters, \"coefficient\", OtherPrimeInfo.defaultValues(\"coefficient\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"prime\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"exponent\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"coefficient\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OtherPrimeInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * OtherPrimeInfo ::= Sequence {\r\n\t *    prime             Integer,  -- ri\r\n\t *    exponent          Integer,  -- di\r\n\t *    coefficient       Integer   -- ti\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} prime\r\n\t\t * @property {string} exponent\r\n\t\t * @property {string} coefficient\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.prime || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.exponent || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.coefficient || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"prime\",\r\n\t\t\t\"exponent\",\r\n\t\t\t\"coefficient\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOtherPrimeInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tprime: \"prime\",\r\n\t\t\t\t\texponent: \"exponent\",\r\n\t\t\t\t\tcoefficient: \"coefficient\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OtherPrimeInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.prime = asn1.result.prime.convertFromDER();\r\n\t\tthis.exponent = asn1.result.exponent.convertFromDER();\r\n\t\tthis.coefficient = asn1.result.coefficient.convertFromDER();\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.prime.convertToDER(),\r\n\t\t\t\tthis.exponent.convertToDER(),\r\n\t\t\t\tthis.coefficient.convertToDER()\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tr: toBase64(arrayBufferToString(this.prime.valueBlock.valueHex), true, true),\r\n\t\t\td: toBase64(arrayBufferToString(this.exponent.valueBlock.valueHex), true, true),\r\n\t\t\tt: toBase64(arrayBufferToString(this.coefficient.valueBlock.valueHex), true, true)\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tif(\"r\" in json)\r\n\t\t\tthis.prime = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.r, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"r\\\"\");\r\n\r\n\t\tif(\"d\" in json)\r\n\t\t\tthis.exponent = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.d, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"d\\\"\");\r\n\r\n\t\tif(\"t\" in json)\r\n\t\t\tthis.coefficient = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.t, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"t\\\"\");\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"OtherPrimeInfo.js"}