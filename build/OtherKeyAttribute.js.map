{"version":3,"sources":["../src/OtherKeyAttribute.js"],"names":["OtherKeyAttribute","constructor","parameters","keyAttrId","defaultValues","keyAttr","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","Object","keys","length","names","asn1js","Sequence","optional","name","blockName","value","ObjectIdentifier","Any","asn1","compareSchema","verified","result","valueBlock","toString","toSchema","outputArray","push","toJSON","_object"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class OtherKeyAttribute\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OtherKeyAttribute class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc keyAttrId\r\n\t\t */\r\n\t\tthis.keyAttrId = getParametersValue(parameters, \"keyAttrId\", OtherKeyAttribute.defaultValues(\"keyAttrId\"));\r\n\r\n\t\tif(\"keyAttr\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {*}\r\n\t\t\t * @desc keyAttr\r\n\t\t\t */\r\n\t\t\tthis.keyAttr = getParametersValue(parameters, \"keyAttr\", OtherKeyAttribute.defaultValues(\"keyAttr\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"keyAttrId\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"keyAttr\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OtherKeyAttribute class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"keyAttrId\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"keyAttr\":\r\n\t\t\t\treturn (Object.keys(memberValue).length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OtherKeyAttribute class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * OtherKeyAttribute ::= SEQUENCE {\r\n\t *    keyAttrId OBJECT IDENTIFIER,\r\n\t *    keyAttr ANY DEFINED BY keyAttrId OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [optional]\r\n\t\t * @property {string} [keyAttrId]\r\n\t\t * @property {string} [keyAttr]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\toptional: (names.optional || true),\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.keyAttrId || \"\") }),\r\n\t\t\t\tnew asn1js.Any({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.keyAttr || \"\")\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"keyAttrId\",\r\n\t\t\t\"keyAttr\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOtherKeyAttribute.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tkeyAttrId: \"keyAttrId\",\r\n\t\t\t\t\tkeyAttr: \"keyAttr\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OtherKeyAttribute\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.keyAttrId = asn1.result.keyAttrId.valueBlock.toString();\r\n\r\n\t\tif(\"keyAttr\" in asn1.result)\r\n\t\t\tthis.keyAttr = asn1.result.keyAttr;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.keyAttrId }));\r\n\r\n\t\tif(\"keyAttr\" in this)\r\n\t\t\toutputArray.push(this.keyAttr.toSchema());\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tkeyAttrId: this.keyAttrId\r\n\t\t};\r\n\r\n\t\tif(\"keyAttr\" in this)\r\n\t\t\t_object.keyAttr = this.keyAttr.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"OtherKeyAttribute.js"}