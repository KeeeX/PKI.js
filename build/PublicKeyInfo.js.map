{"version":3,"sources":["../src/PublicKeyInfo.js"],"names":["PublicKeyInfo","constructor","parameters","algorithm","defaultValues","subjectPublicKey","parsedKey","fromSchema","schema","fromJSON","json","memberName","AlgorithmIdentifier","asn1js","BitString","Error","names","Sequence","name","blockName","value","asn1","compareSchema","verified","result","algorithmId","algorithmParams","ObjectIdentifier","ECPublicKey","namedCurve","valueBlock","toString","valueHex","ex","publicKeyASN1","fromBER","offset","RSAPublicKey","toSchema","toJSON","jwk","kty","publicKeyJWK","Object","keys","key","toUpperCase","Null","toBER","importKey","publicKey","sequence","Promise","resolve","_this","reject","crypto","then","exportKey","exportedKey","exception","undefined","error"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport { getCrypto } from \"./common.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport ECPublicKey from \"./ECPublicKey.js\";\r\nimport RSAPublicKey from \"./RSAPublicKey.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class PublicKeyInfo \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PublicKeyInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc Algorithm identifier\r\n\t\t */\r\n\t\tthis.algorithm = getParametersValue(parameters, \"algorithm\", PublicKeyInfo.defaultValues(\"algorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @desc Subject public key value\r\n\t\t */\r\n\t\tthis.subjectPublicKey = getParametersValue(parameters, \"subjectPublicKey\", PublicKeyInfo.defaultValues(\"subjectPublicKey\"));\r\n\t\t\r\n\t\tif(\"parsedKey\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ECPublicKey|RSAPublicKey}\r\n\t\t\t * @desc Parsed public key value\r\n\t\t\t */\r\n\t\t\tthis.parsedKey = getParametersValue(parameters, \"parsedKey\", PublicKeyInfo.defaultValues(\"parsedKey\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"algorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"subjectPublicKey\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PublicKeyInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * SubjectPublicKeyInfo  ::=  Sequence  {\r\n\t *    algorithm            AlgorithmIdentifier,\r\n\t *    subjectPublicKey     BIT STRING  }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [algorithm]\r\n\t\t * @property {string} [subjectPublicKey]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.algorithm || {}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.subjectPublicKey || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"algorithm\",\r\n\t\t\t\"subjectPublicKey\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPublicKeyInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"algorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsubjectPublicKey: \"subjectPublicKey\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PublicKeyInfo\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.algorithm = new AlgorithmIdentifier({ schema: asn1.result.algorithm });\r\n\t\tthis.subjectPublicKey = asn1.result.subjectPublicKey;\r\n\t\t\r\n\t\tswitch(this.algorithm.algorithmId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.2.1\": // ECDSA\r\n\t\t\t\tif(\"algorithmParams\" in this.algorithm)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this.algorithm.algorithmParams instanceof asn1js.ObjectIdentifier)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.parsedKey = new ECPublicKey({\r\n\t\t\t\t\t\t\t\tnamedCurve: this.algorithm.algorithmParams.valueBlock.toString(),\r\n\t\t\t\t\t\t\t\tschema: this.subjectPublicKey.valueBlock.valueHex\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(ex){} // Could be a problems during recognision of internal public key data here. Let's ignore them.\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.1.1\": // RSA\r\n\t\t\t\t{\r\n\t\t\t\t\tconst publicKeyASN1 = asn1js.fromBER(this.subjectPublicKey.valueBlock.valueHex);\r\n\t\t\t\t\tif(publicKeyASN1.offset !== (-1))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.parsedKey = new RSAPublicKey({ schema: publicKeyASN1.result });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(ex){} // Could be a problems during recognision of internal public key data here. Let's ignore them.\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.algorithm.toSchema(),\r\n\t\t\t\tthis.subjectPublicKey\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\t//region Return common value in case we do not have enough info fo making JWK\r\n\t\tif((\"parsedKey\" in this) === false)\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\talgorithm: this.algorithm.toJSON(),\r\n\t\t\t\tsubjectPublicKey: this.subjectPublicKey.toJSON()\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Making JWK\r\n\t\tconst jwk = {};\r\n\t\t\r\n\t\tswitch(this.algorithm.algorithmId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.2.1\": // ECDSA\r\n\t\t\t\tjwk.kty = \"EC\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.1.1\": // RSA\r\n\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t\r\n\t\tconst publicKeyJWK = this.parsedKey.toJSON();\r\n\t\t\r\n\t\tfor(const key of Object.keys(publicKeyJWK))\r\n\t\t\tjwk[key] = publicKeyJWK[key];\r\n\t\t\r\n\t\treturn jwk;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tif(\"kty\" in json)\r\n\t\t{\r\n\t\t\tswitch(json.kty.toUpperCase())\r\n\t\t\t{\r\n\t\t\t\tcase \"EC\":\r\n\t\t\t\t\tthis.parsedKey = new ECPublicKey({ json });\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.algorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: \"1.2.840.10045.2.1\",\r\n\t\t\t\t\t\talgorithmParams: new asn1js.ObjectIdentifier({ value: this.parsedKey.namedCurve })\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"RSA\":\r\n\t\t\t\t\tthis.parsedKey = new RSAPublicKey({ json });\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.algorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.1\",\r\n\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(`Invalid value for \"kty\" parameter: ${json.kty}`);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.subjectPublicKey = new asn1js.BitString({ valueHex: this.parsedKey.toSchema().toBER(false) });\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\timportKey(publicKey)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tconst _this = this;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial check\r\n\t\tif(typeof publicKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide publicKey input parameter\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Export public key\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tcrypto.exportKey(\"spki\", publicKey));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initialize internal variables by parsing exported value\r\n\t\tsequence = sequence.then(\r\n\t\t\t/**\r\n\t\t\t * @param {ArrayBuffer} exportedKey\r\n\t\t\t */\r\n\t\t\texportedKey =>\r\n\t\t\t{\r\n\t\t\t\tconst asn1 = asn1js.fromBER(exportedKey);\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\t_this.fromSchema(asn1.result);\r\n\t\t\t\t}\r\n\t\t\t\tcatch(exception)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject(\"Error during initializing object from schema\");\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn undefined;\r\n\t\t\t},\r\n\t\t\terror => Promise.reject(`Error during exporting public key: ${error}`)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"PublicKeyInfo.js"}