{"version":3,"sources":["../src/PBES2Params.js"],"names":["PBES2Params","constructor","parameters","keyDerivationFunc","defaultValues","encryptionScheme","fromSchema","schema","memberName","AlgorithmIdentifier","Error","names","asn1js","Sequence","name","blockName","value","asn1","compareSchema","verified","result","toSchema","toJSON"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC2898\r\n */\r\nexport default class PBES2Params\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PBES2Params class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc keyDerivationFunc\r\n\t\t */\r\n\t\tthis.keyDerivationFunc = getParametersValue(parameters, \"keyDerivationFunc\", PBES2Params.defaultValues(\"keyDerivationFunc\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc encryptionScheme\r\n\t\t */\r\n\t\tthis.encryptionScheme = getParametersValue(parameters, \"encryptionScheme\", PBES2Params.defaultValues(\"encryptionScheme\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"keyDerivationFunc\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"encryptionScheme\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PBES2Params class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PBES2-params ::= SEQUENCE {\r\n\t *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},\r\n\t *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}} }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [keyDerivationFunc]\r\n\t\t * @property {string} [encryptionScheme]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.keyDerivationFunc || {}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.encryptionScheme || {})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"keyDerivationFunc\",\r\n\t\t\t\"encryptionScheme\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPBES2Params.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tkeyDerivationFunc: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"keyDerivationFunc\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tencryptionScheme: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"encryptionScheme\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PBES2Params\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.keyDerivationFunc = new AlgorithmIdentifier({ schema: asn1.result.keyDerivationFunc });\r\n\t\tthis.encryptionScheme = new AlgorithmIdentifier({ schema: asn1.result.encryptionScheme });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.keyDerivationFunc.toSchema(),\r\n\t\t\t\tthis.encryptionScheme.toSchema()\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tkeyDerivationFunc: this.keyDerivationFunc.toJSON(),\r\n\t\t\tencryptionScheme: this.encryptionScheme.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"PBES2Params.js"}