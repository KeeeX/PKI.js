{"version":3,"sources":["../src/TimeStampResp.js"],"names":["TimeStampResp","constructor","parameters","status","defaultValues","timeStampToken","fromSchema","schema","memberName","PKIStatusInfo","ContentInfo","Error","compareWithDefault","memberValue","contentType","content","asn1js","Any","names","Sequence","name","blockName","value","optional","asn1","compareSchema","verified","result","toSchema","outputArray","push","toJSON","_object","sign","privateKey","hashAlgorithm","Promise","reject","signed","verify","verificationParameters","signer","trustedCerts","data","ArrayBuffer","SignedData"],"mappings":"6FAAA,sDACA,gCACA,yEACA,qEACA,mE,gfACA;AACA;;GAGe,KAAMA,CAAAA,aACrB,CACC;AACA;;;;IAKAC,WAAW,CAACC,UAAU,CAAG,EAAd,CACX,CACC;AACA;;;KAIA,KAAKC,MAAL,CAAc,gCAAmBD,UAAnB,CAA+B,QAA/B,CAAyCF,aAAa,CAACI,aAAd,CAA4B,QAA5B,CAAzC,CAAd,CAEA,GAAG,kBAAoBF,CAAAA,UAAvB,CACC;;;MAIA,KAAKG,cAAL,CAAsB,gCAAmBH,UAAnB,CAA+B,gBAA/B,CAAiDF,aAAa,CAACI,aAAd,CAA4B,gBAA5B,CAAjD,CAAtB,CACD;AAEA;AACA,GAAG,UAAYF,CAAAA,UAAf,CACC,KAAKI,UAAL,CAAgBJ,UAAU,CAACK,MAA3B,EACD;AACA,CACD;AACA;;;IAIA,MAAOH,CAAAA,aAAP,CAAqBI,UAArB,CACA,CACC,OAAOA,UAAP,EAEC,IAAK,QAAL,CACC,MAAO,IAAIC,uBAAJ,EAAP,CACD,IAAK,gBAAL,CACC,MAAO,IAAIC,qBAAJ,EAAP,CACD,QACC,KAAM,IAAIC,CAAAA,KAAJ,CAAW,gDAA+CH,UAAW,EAArE,CAAN,CAPF,CASA,CACD;AACA;;;;IAKA,MAAOI,CAAAA,kBAAP,CAA0BJ,UAA1B,CAAsCK,WAAtC,CACA,CACC,OAAOL,UAAP,EAEC,IAAK,QAAL,CACC,MAASC,wBAAcG,kBAAd,CAAiC,QAAjC,CAA2CC,WAAW,CAACV,MAAvD,CAAD,EACJ,iBAAmBU,CAAAA,WAApB,GAAqC,KADhC,EAEJ,YAAcA,CAAAA,WAAf,GAAgC,KAFnC,CAGD,IAAK,gBAAL,CACC,MAASA,CAAAA,WAAW,CAACC,WAAZ,GAA4B,EAA7B,EACLD,WAAW,CAACE,OAAZ,WAA+BC,CAAAA,MAAM,CAACC,GADzC,CAED,QACC,KAAM,IAAIN,CAAAA,KAAJ,CAAW,gDAA+CH,UAAW,EAArE,CAAN,CAVF,CAYA,CACD;AACA;;;;;;;;;;;;IAaA,MAAOD,CAAAA,MAAP,CAAcL,UAAU,CAAG,EAA3B,CACA,CACC;;;;;KAMA,KAAMgB,CAAAA,KAAK,CAAG,gCAAmBhB,UAAnB,CAA+B,OAA/B,CAAwC,EAAxC,CAAd,CAEA,MAAQ,IAAIc,CAAAA,MAAM,CAACG,QAAX,CAAoB,CAC3BC,IAAI,CAAGF,KAAK,CAACG,SAAN,EAAmB,eADC,CAE3BC,KAAK,CAAE,CACNb,uBAAcF,MAAd,CAAqBW,KAAK,CAACf,MAAN,EAAgB,CACpCe,KAAK,CAAE,CACNG,SAAS,CAAE,sBADL,CAD6B,CAArC,CADM,CAMNX,qBAAYH,MAAZ,CAAmBW,KAAK,CAACb,cAAN,EAAwB,CAC1Ca,KAAK,CAAE,CACNG,SAAS,CAAE,8BADL,CAENE,QAAQ,CAAE,IAFJ,CADmC,CAA3C,CANM,CAFoB,CAApB,CAAR,CAgBA,CACD;AACA;;;IAIAjB,UAAU,CAACC,MAAD,CACV,CACC;AACA,wBAAWA,MAAX,CAAmB,CAClB,sBADkB,CAElB,8BAFkB,CAAnB,EAIA;AAEA;AACA,KAAMiB,CAAAA,IAAI,CAAGR,MAAM,CAACS,aAAP,CAAqBlB,MAArB,CACZA,MADY,CAEZP,aAAa,CAACO,MAAd,EAFY,CAAb,CAKA,GAAGiB,IAAI,CAACE,QAAL,GAAkB,KAArB,CACC,KAAM,IAAIf,CAAAA,KAAJ,CAAU,uEAAV,CAAN,CACD;AAEA;AACA,KAAKR,MAAL,CAAc,GAAIM,uBAAJ,CAAkB,CAAEF,MAAM,CAAEiB,IAAI,CAACG,MAAL,CAAY,sBAAZ,CAAV,CAAlB,CAAd,CACA,GAAG,gCAAkCH,CAAAA,IAAI,CAACG,MAA1C,CACC,KAAKtB,cAAL,CAAsB,GAAIK,qBAAJ,CAAgB,CAAEH,MAAM,CAAEiB,IAAI,CAACG,MAAL,CAAY,8BAAZ,CAAV,CAAhB,CAAtB,CACD;AACA,CACD;AACA;;;IAIAC,QAAQ,EACR,CACC;AACA,KAAMC,CAAAA,WAAW,CAAG,EAApB,CAEAA,WAAW,CAACC,IAAZ,CAAiB,KAAK3B,MAAL,CAAYyB,QAAZ,EAAjB,EACA,GAAG,kBAAoB,KAAvB,CACCC,WAAW,CAACC,IAAZ,CAAiB,KAAKzB,cAAL,CAAoBuB,QAApB,EAAjB,EACD;AAEA;AACA,MAAQ,IAAIZ,CAAAA,MAAM,CAACG,QAAX,CAAoB,CAC3BG,KAAK,CAAEO,WADoB,CAApB,CAAR,CAGA;AACA,CACD;AACA;;;IAIAE,MAAM,EACN,CACC,KAAMC,CAAAA,OAAO,CAAG,CACf7B,MAAM,CAAE,KAAKA,MADE,CAAhB,CAIA,GAAG,kBAAoB,KAAvB,CACC6B,OAAO,CAAC3B,cAAR,CAAyB,KAAKA,cAAL,CAAoB0B,MAApB,EAAzB,CAED,MAAOC,CAAAA,OAAP,CACA,CACD;AACA;;;;;IAMAC,IAAI,CAACC,UAAD,CAAaC,aAAb,CACJ,CACC;AACA,GAAI,kBAAoB,KAArB,GAA+B,KAAlC,CACC,MAAOC,CAAAA,OAAO,CAACC,MAAR,CAAe,0CAAf,CAAP,CACD;AAEA;AACA,GAAG,KAAKhC,cAAL,CAAoBS,WAApB,GAAoC,sBAAvC,CAA+D;AAC9D,MAAOsB,CAAAA,OAAO,CAACC,MAAR,CAAgB,mCAAkC,KAAKhC,cAAL,CAAoBS,WAAY,EAAlF,CAAP,CACD;AAEA;AACA,KAAMwB,CAAAA,MAAM,CAAG,GAAI5B,qBAAJ,CAAgB,CAAEH,MAAM,CAAE,KAAKF,cAAL,CAAoBU,OAA9B,CAAhB,CAAf,CAEA,MAAOuB,CAAAA,MAAM,CAACL,IAAP,CAAYC,UAAZ,CAAwB,CAAxB,CAA2BC,aAA3B,CAAP,CACA;AACA,CACD;AACA;;;;IAKAI,MAAM,CAACC,sBAAsB,CAAG,CAAEC,MAAM,CAAE,CAAV,CAAaC,YAAY,CAAE,EAA3B,CAA+BC,IAAI,CAAE,GAAIC,CAAAA,WAAJ,CAAgB,CAAhB,CAArC,CAA1B,CACN,CACC;AACA,GAAI,kBAAoB,KAArB,GAA+B,KAAlC,CACC,MAAOR,CAAAA,OAAO,CAACC,MAAR,CAAe,0CAAf,CAAP,CACD;AAEA;AACA,GAAG,KAAKhC,cAAL,CAAoBS,WAApB,GAAoC,sBAAvC,CAA+D;AAC9D,MAAOsB,CAAAA,OAAO,CAACC,MAAR,CAAgB,mCAAkC,KAAKhC,cAAL,CAAoBS,WAAY,EAAlF,CAAP,CACD;AAEA;AACA,KAAMwB,CAAAA,MAAM,CAAG,GAAIO,oBAAJ,CAAe,CAAEtC,MAAM,CAAE,KAAKF,cAAL,CAAoBU,OAA9B,CAAf,CAAf,CAEA,MAAOuB,CAAAA,MAAM,CAACC,MAAP,CAAcC,sBAAd,CAAP,CACA;AACA,CACD;AAhOD,CAkOA","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport PKIStatusInfo from \"./PKIStatusInfo.js\";\r\nimport ContentInfo from \"./ContentInfo.js\";\r\nimport SignedData from \"./SignedData.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3161\r\n */\r\nexport default class TimeStampResp\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for TimeStampResp class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {PKIStatusInfo}\r\n\t\t * @desc status\r\n\t\t */\r\n\t\tthis.status = getParametersValue(parameters, \"status\", TimeStampResp.defaultValues(\"status\"));\r\n\r\n\t\tif(\"timeStampToken\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ContentInfo}\r\n\t\t\t * @desc timeStampToken\r\n\t\t\t */\r\n\t\t\tthis.timeStampToken = getParametersValue(parameters, \"timeStampToken\", TimeStampResp.defaultValues(\"timeStampToken\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"status\":\r\n\t\t\t\treturn new PKIStatusInfo();\r\n\t\t\tcase \"timeStampToken\":\r\n\t\t\t\treturn new ContentInfo();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TimeStampResp class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"status\":\r\n\t\t\t\treturn ((PKIStatusInfo.compareWithDefault(\"status\", memberValue.status)) &&\r\n\t\t\t\t\t\t((\"statusStrings\" in memberValue) === false) &&\r\n\t\t\t\t\t\t((\"failInfo\" in memberValue) === false));\r\n\t\t\tcase \"timeStampToken\":\r\n\t\t\t\treturn ((memberValue.contentType === \"\") &&\r\n\t\t\t\t\t\t(memberValue.content instanceof asn1js.Any));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TimeStampResp class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * TimeStampResp ::= SEQUENCE  {\r\n\t *    status                  PKIStatusInfo,\r\n\t *    timeStampToken          TimeStampToken     OPTIONAL  }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [status]\r\n\t\t * @property {string} [timeStampToken]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"TimeStampResp\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tPKIStatusInfo.schema(names.status || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"TimeStampResp.status\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tContentInfo.schema(names.timeStampToken || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"TimeStampResp.timeStampToken\",\r\n\t\t\t\t\t\toptional: true\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"TimeStampResp.status\",\r\n\t\t\t\"TimeStampResp.timeStampToken\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tTimeStampResp.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for TimeStampResp\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.status = new PKIStatusInfo({ schema: asn1.result[\"TimeStampResp.status\"] });\r\n\t\tif(\"TimeStampResp.timeStampToken\" in asn1.result)\r\n\t\t\tthis.timeStampToken = new ContentInfo({ schema: asn1.result[\"TimeStampResp.timeStampToken\"] });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(this.status.toSchema());\r\n\t\tif(\"timeStampToken\" in this)\r\n\t\t\toutputArray.push(this.timeStampToken.toSchema());\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tstatus: this.status\r\n\t\t};\r\n\r\n\t\tif(\"timeStampToken\" in this)\r\n\t\t\t_object.timeStampToken = this.timeStampToken.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Sign current TSP Response\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1\r\n\t * @returns {Promise}\r\n\t */\r\n\tsign(privateKey, hashAlgorithm)\r\n\t{\r\n\t\t//region Check that \"timeStampToken\" exists\r\n\t\tif((\"timeStampToken\" in this) === false)\r\n\t\t\treturn Promise.reject(\"timeStampToken is absent in TSP response\");\r\n\t\t//endregion\r\n\r\n\t\t//region Check that \"timeStampToken\" has a right internal format\r\n\t\tif(this.timeStampToken.contentType !== \"1.2.840.113549.1.7.2\") // Must be a CMS signed data\r\n\t\t\treturn Promise.reject(`Wrong format of timeStampToken: ${this.timeStampToken.contentType}`);\r\n\t\t//endregion\r\n\r\n\t\t//region Sign internal signed data value\r\n\t\tconst signed = new ContentInfo({ schema: this.timeStampToken.content });\r\n\r\n\t\treturn signed.sign(privateKey, 0, hashAlgorithm);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify current TSP Response\r\n\t * @param {Object} verificationParameters Input parameters for verification\r\n\t * @returns {Promise}\r\n\t */\r\n\tverify(verificationParameters = { signer: 0, trustedCerts: [], data: new ArrayBuffer(0) })\r\n\t{\r\n\t\t//region Check that \"timeStampToken\" exists\r\n\t\tif((\"timeStampToken\" in this) === false)\r\n\t\t\treturn Promise.reject(\"timeStampToken is absent in TSP response\");\r\n\t\t//endregion\r\n\r\n\t\t//region Check that \"timeStampToken\" has a right internal format\r\n\t\tif(this.timeStampToken.contentType !== \"1.2.840.113549.1.7.2\") // Must be a CMS signed data\r\n\t\t\treturn Promise.reject(`Wrong format of timeStampToken: ${this.timeStampToken.contentType}`);\r\n\t\t//endregion\r\n\r\n\t\t//region Verify internal signed data value\r\n\t\tconst signed = new SignedData({ schema: this.timeStampToken.content });\r\n\r\n\t\treturn signed.verify(verificationParameters);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"TimeStampResp.js"}