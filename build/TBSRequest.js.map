{"version":3,"sources":["../src/TBSRequest.js"],"names":["TBSRequest","constructor","parameters","tbs","defaultValues","version","requestorName","requestList","requestExtensions","fromSchema","schema","memberName","ArrayBuffer","GeneralName","Error","compareWithDefault","memberValue","byteLength","type","Object","keys","value","length","names","asn1js","Sequence","name","blockName","Constructed","optional","idBlock","tagClass","tagNumber","Integer","TBSRequestVersion","Repeated","requests","Request","requestNames","Extensions","extensions","asn1","compareSchema","verified","result","valueBeforeDecode","valueBlock","valueDec","Array","from","element","Extension","toSchema","encodeFlag","tbsSchema","fromBER","outputArray","push","toJSON","_object"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport GeneralName from \"./GeneralName.js\";\r\nimport Request from \"./Request.js\";\r\nimport Extension from \"./Extension.js\";\r\nimport Extensions from \"./Extensions.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class TBSRequest\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for TBSRequest class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc tbs\r\n\t\t */\r\n\t\tthis.tbs = getParametersValue(parameters, \"tbs\", TBSRequest.defaultValues(\"tbs\"));\r\n\r\n\t\tif(\"version\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {number}\r\n\t\t\t * @desc version\r\n\t\t\t */\r\n\t\t\tthis.version = getParametersValue(parameters, \"version\", TBSRequest.defaultValues(\"version\"));\r\n\r\n\t\tif(\"requestorName\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {GeneralName}\r\n\t\t\t * @desc requestorName\r\n\t\t\t */\r\n\t\t\tthis.requestorName = getParametersValue(parameters, \"requestorName\", TBSRequest.defaultValues(\"requestorName\"));\r\n\r\n\t\t/**\r\n\t\t * @type {Array.<Request>}\r\n\t\t * @desc requestList\r\n\t\t */\r\n\t\tthis.requestList = getParametersValue(parameters, \"requestList\", TBSRequest.defaultValues(\"requestList\"));\r\n\r\n\t\tif(\"requestExtensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Extension>}\r\n\t\t\t * @desc requestExtensions\r\n\t\t\t */\r\n\t\t\tthis.requestExtensions = getParametersValue(parameters, \"requestExtensions\", TBSRequest.defaultValues(\"requestExtensions\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbs\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"requestorName\":\r\n\t\t\t\treturn new GeneralName();\r\n\t\t\tcase \"requestList\":\r\n\t\t\tcase \"requestExtensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TBSRequest class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbs\":\r\n\t\t\t\treturn (memberValue.byteLength === 0);\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === TBSRequest.defaultValues(memberName));\r\n\t\t\tcase \"requestorName\":\r\n\t\t\t\treturn ((memberValue.type === GeneralName.defaultValues(\"type\")) && (Object.keys(memberValue.value).length === 0));\r\n\t\t\tcase \"requestList\":\r\n\t\t\tcase \"requestExtensions\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TBSRequest class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * TBSRequest      ::=     SEQUENCE {\r\n\t *    version             [0]     EXPLICIT Version DEFAULT v1,\r\n\t *    requestorName       [1]     EXPLICIT GeneralName OPTIONAL,\r\n\t *    requestList                 SEQUENCE OF Request,\r\n\t *    requestExtensions   [2]     EXPLICIT Extensions OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [TBSRequestVersion]\r\n\t\t * @property {string} [requestorName]\r\n\t\t * @property {string} [requestList]\r\n\t\t * @property {string} [requests]\r\n\t\t * @property {string} [requestNames]\r\n\t\t * @property {string} [extensions]\r\n\t\t * @property {string} [requestExtensions]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"TBSRequest\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Integer({ name: (names.TBSRequestVersion || \"TBSRequest.version\") })]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [GeneralName.schema(names.requestorName || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"TBSRequest.requestorName\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\tname: (names.requestList || \"TBSRequest.requestList\"),\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.requests || \"TBSRequest.requests\"),\r\n\t\t\t\t\t\t\tvalue: Request.schema(names.requestNames || {})\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [Extensions.schema(names.extensions || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: (names.requestExtensions || \"TBSRequest.requestExtensions\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"TBSRequest\",\r\n\t\t\t\"TBSRequest.version\",\r\n\t\t\t\"TBSRequest.requestorName\",\r\n\t\t\t\"TBSRequest.requests\",\r\n\t\t\t\"TBSRequest.requestExtensions\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tTBSRequest.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for TBSRequest\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.tbs = asn1.result.TBSRequest.valueBeforeDecode;\r\n\r\n\t\tif(\"TBSRequest.version\" in asn1.result)\r\n\t\t\tthis.version = asn1.result[\"TBSRequest.version\"].valueBlock.valueDec;\r\n\t\tif(\"TBSRequest.requestorName\" in asn1.result)\r\n\t\t\tthis.requestorName = new GeneralName({ schema: asn1.result[\"TBSRequest.requestorName\"] });\r\n\r\n\t\tthis.requestList = Array.from(asn1.result[\"TBSRequest.requests\"], element => new Request({ schema: element }));\r\n\r\n\t\tif(\"TBSRequest.requestExtensions\" in asn1.result)\r\n\t\t\tthis.requestExtensions = Array.from(asn1.result[\"TBSRequest.requestExtensions\"].valueBlock.value, element => new Extension({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @param {boolean} encodeFlag If param equal to false then create TBS schema via decoding stored value. In othe case create TBS schema via assembling from TBS parts.\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\t//region Decode stored TBS value\r\n\t\tlet tbsSchema;\r\n\r\n\t\tif(encodeFlag === false)\r\n\t\t{\r\n\t\t\tif(this.tbs.byteLength === 0) // No stored TBS part\r\n\t\t\t\treturn TBSRequest.schema();\r\n\r\n\t\t\ttbsSchema = asn1js.fromBER(this.tbs).result;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Create TBS schema via assembling from TBS parts\r\n\t\telse\r\n\t\t{\r\n\t\t\tconst outputArray = [];\r\n\r\n\t\t\tif(\"version\" in this)\r\n\t\t\t{\r\n\t\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Integer({ value: this.version })]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\r\n\t\t\tif(\"requestorName\" in this)\r\n\t\t\t{\r\n\t\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [this.requestorName.toSchema()]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\r\n\t\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\t\tvalue: Array.from(this.requestList, element => element.toSchema())\r\n\t\t\t}));\r\n\r\n\t\t\tif(\"requestExtensions\" in this)\r\n\t\t\t{\r\n\t\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\t\tvalue: Array.from(this.requestExtensions, element => element.toSchema())\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\r\n\t\t\ttbsSchema = new asn1js.Sequence({\r\n\t\t\t\tvalue: outputArray\r\n\t\t\t});\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn tbsSchema;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {};\r\n\r\n\t\tif(\"version\" in this)\r\n\t\t\t_object.version = this.version;\r\n\r\n\t\tif(\"requestorName\" in this)\r\n\t\t\t_object.requestorName = this.requestorName.toJSON();\r\n\r\n\t\t_object.requestList = Array.from(this.requestList, element => element.toJSON());\r\n\r\n\t\tif(\"requestExtensions\" in this)\r\n\t\t\t_object.requestExtensions = Array.from(this.requestExtensions, element => element.toJSON());\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"TBSRequest.js"}