{"version":3,"sources":["../src/RelativeDistinguishedNames.js"],"names":["RelativeDistinguishedNames","constructor","parameters","typesAndValues","defaultValues","valueBeforeDecode","fromSchema","schema","memberName","ArrayBuffer","Error","compareWithDefault","memberValue","length","byteLength","names","asn1js","Sequence","name","blockName","value","Repeated","repeatedSequence","Set","repeatedSet","AttributeTypeAndValue","typeAndValue","asn1","compareSchema","verified","result","Array","from","element","RDN","toSchema","fromBER","toJSON","isEqual","compareTo","entries","index"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, isEqualBuffer, clearProps } from \"pvutils\";\r\nimport AttributeTypeAndValue from \"./AttributeTypeAndValue.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class RelativeDistinguishedNames\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for RelativeDistinguishedNames class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t * @property {Array.<AttributeTypeAndValue>} [typesAndValues] Array of \"type and value\" objects\r\n\t * @property {ArrayBuffer} [valueBeforeDecode] Value of the RDN before decoding from schema\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<AttributeTypeAndValue>}\r\n\t\t * @desc Array of \"type and value\" objects\r\n\t\t */\r\n\t\tthis.typesAndValues = getParametersValue(parameters, \"typesAndValues\", RelativeDistinguishedNames.defaultValues(\"typesAndValues\"));\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc Value of the RDN before decoding from schema\r\n\t\t */\r\n\t\tthis.valueBeforeDecode = getParametersValue(parameters, \"valueBeforeDecode\", RelativeDistinguishedNames.defaultValues(\"valueBeforeDecode\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"typesAndValues\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"valueBeforeDecode\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RelativeDistinguishedNames class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"typesAndValues\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tcase \"valueBeforeDecode\":\r\n\t\t\t\treturn (memberValue.byteLength === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RelativeDistinguishedNames class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * RDNSequence ::= Sequence OF RelativeDistinguishedName\r\n\t *\r\n\t * RelativeDistinguishedName ::=\r\n\t * SET SIZE (1..MAX) OF AttributeTypeAndValue\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName] Name for entire block\r\n\t\t * @property {string} [repeatedSequence] Name for \"repeatedSequence\" block\r\n\t\t * @property {string} [repeatedSet] Name for \"repeatedSet\" block\r\n\t\t * @property {string} [typeAndValue] Name for \"typeAndValue\" block\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.repeatedSequence || \"\"),\r\n\t\t\t\t\tvalue: new asn1js.Set({\r\n\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\t\tname: (names.repeatedSet || \"\"),\r\n\t\t\t\t\t\t\t\tvalue: AttributeTypeAndValue.schema(names.typeAndValue || {})\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"RDN\",\r\n\t\t\t\"typesAndValues\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRelativeDistinguishedNames.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"RDN\",\r\n\t\t\t\t\trepeatedSet: \"typesAndValues\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for RelativeDistinguishedNames\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"typesAndValues\" in asn1.result) // Could be a case when there is no \"types and values\"\r\n\t\t\tthis.typesAndValues = Array.from(asn1.result.typesAndValues, element => new AttributeTypeAndValue({ schema: element }));\r\n\r\n\t\t// noinspection JSUnresolvedVariable\r\n\t\tthis.valueBeforeDecode = asn1.result.RDN.valueBeforeDecode;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Decode stored TBS value\r\n\t\tif(this.valueBeforeDecode.byteLength === 0) // No stored encoded array, create \"from scratch\"\r\n\t\t{\r\n\t\t\treturn (new asn1js.Sequence({\r\n\t\t\t\tvalue: [new asn1js.Set({\r\n\t\t\t\t\tvalue: Array.from(this.typesAndValues, element => element.toSchema())\r\n\t\t\t\t})]\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\tconst asn1 = asn1js.fromBER(this.valueBeforeDecode);\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn asn1.result;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\ttypesAndValues: Array.from(this.typesAndValues, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare two RDN values, or RDN with ArrayBuffer value\r\n\t * @param {(RelativeDistinguishedNames|ArrayBuffer)} compareTo The value compare to current\r\n\t * @returns {boolean}\r\n\t */\r\n\tisEqual(compareTo)\r\n\t{\r\n\t\tif(compareTo instanceof RelativeDistinguishedNames)\r\n\t\t{\r\n\t\t\tif(this.typesAndValues.length !== compareTo.typesAndValues.length)\r\n\t\t\t\treturn false;\r\n\r\n\t\t\tfor(const [index, typeAndValue] of this.typesAndValues.entries())\r\n\t\t\t{\r\n\t\t\t\tif(typeAndValue.isEqual(compareTo.typesAndValues[index]) === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif(compareTo instanceof ArrayBuffer)\r\n\t\t\treturn isEqualBuffer(this.valueBeforeDecode, compareTo);\r\n\r\n\t\treturn false;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"RelativeDistinguishedNames.js"}