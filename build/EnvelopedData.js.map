{"version":3,"sources":["../src/EnvelopedData.js"],"names":["EnvelopedData","constructor","parameters","version","defaultValues","originatorInfo","recipientInfos","encryptedContentInfo","unprotectedAttrs","fromSchema","schema","memberName","OriginatorInfo","EncryptedContentInfo","Error","compareWithDefault","memberValue","certs","certificates","length","crls","contentType","contentEncryptionAlgorithm","encryptedContent","names","asn1js","Sequence","name","blockName","value","Integer","Constructed","optional","idBlock","tagClass","tagNumber","valueBlock","Set","Repeated","RecipientInfo","Attribute","asn1","compareSchema","verified","result","valueDec","Array","from","element","toSchema","outputArray","push","toJSON","_object","addRecipientByCertificate","certificate","variant","encryptionParameters","subjectPublicKeyInfo","algorithm","algorithmId","indexOf","oaepHashAlgorithm","kdfAlgorithm","kekEncryptionLength","oaepOID","hashOID","hashAlgorithm","AlgorithmIdentifier","algorithmParams","Null","rsaOAEPParams","RSAESOAEPParams","maskGenAlgorithm","keyInfo","KeyTransRecipientInfo","rid","IssuerAndSerialNumber","issuer","serialNumber","keyEncryptionAlgorithm","recipientCertificate","encryptedKey","RecipientEncryptedKey","KeyAgreeRecipientIdentifier","aesKWoid","aesKW","ecdhOID","kdf","ukmBuffer","ArrayBuffer","ukmView","Uint8Array","KeyAgreeRecipientInfo","ukm","OctetString","valueHex","recipientEncryptedKeys","RecipientEncryptedKeys","encryptedKeys","addRecipientByPreDefinedData","preDefinedData","byteLength","keyIdentifierBuffer","keyIdentifierView","keyIdentifier","hmacHashAlgorithm","iterationCount","keyEncryptionAlgorithmParams","kekOID","KEKRecipientInfo","kekid","KEKIdentifier","preDefinedKEK","pbkdf2OID","saltBuffer","saltView","hmacOID","hash","pbkdf2Params","PBKDF2Params","salt","prf","PasswordRecipientinfo","keyDerivationAlgorithm","password","encrypt","contentToEncrypt","sequence","Promise","resolve","ivBuffer","ivView","contentView","sessionKey","exportedSessionKey","recipientsPromises","_this","contentEncryptionOID","reject","crypto","then","generateKey","iv","error","exportKey","SubKeyAgreeRecipientInfo","index","currentSequence","ecdhPublicKey","ecdhPrivateKey","recipientCurve","recipientCurveLength","exportedECDHPublicKey","curveObject","ObjectIdentifier","curveOID","toString","namedCurve","publicKey","privateKey","getPublicKey","usages","deriveBits","public","aesKWAlgorithm","KWalgorithm","kwLength","kwLengthBuffer","kwLengthView","j","eccInfo","ECCCMSSharedInfo","entityUInfo","suppPubInfo","encodedInfo","toBER","ecdhAlgorithm","importKey","wrapKey","fromBER","originator","OriginatorIdentifierOrKey","OriginatorPublicKey","SubKeyTransRecipientInfo","SubKEKRecipientInfo","kekAlgorithm","SubPasswordRecipientinfo","ex","passwordView","iterations","deriveKey","i","all","decrypt","recipientIndex","decryptionParameters","recipientPrivateKey","buffer","unwrapKey","dataBuffer","isConstructed","content"],"mappings":"6FAAA,sDACA,gCACA,mCACA,2EACA,yEACA,uFACA,iEACA,qFACA,6EACA,yFACA,yFACA,yFACA,qGACA,yFACA,2FACA,+EACA,yEACA,uEACA,yFACA,+EACA,iGACA,qF,gfACA;AACA;;GAGe,KAAMA,CAAAA,aACrB,CACC;AACA;;;;IAKAC,WAAW,CAACC,UAAU,CAAG,EAAd,CACX,CACC;AACA;;;KAIA,KAAKC,OAAL,CAAe,gCAAmBD,UAAnB,CAA+B,SAA/B,CAA0CF,aAAa,CAACI,aAAd,CAA4B,SAA5B,CAA1C,CAAf,CAEA,GAAG,kBAAoBF,CAAAA,UAAvB,CACC;;;MAIA,KAAKG,cAAL,CAAsB,gCAAmBH,UAAnB,CAA+B,gBAA/B,CAAiDF,aAAa,CAACI,aAAd,CAA4B,gBAA5B,CAAjD,CAAtB,CAED;;;KAIA,KAAKE,cAAL,CAAsB,gCAAmBJ,UAAnB,CAA+B,gBAA/B,CAAiDF,aAAa,CAACI,aAAd,CAA4B,gBAA5B,CAAjD,CAAtB,CACA;;;KAIA,KAAKG,oBAAL,CAA4B,gCAAmBL,UAAnB,CAA+B,sBAA/B,CAAuDF,aAAa,CAACI,aAAd,CAA4B,sBAA5B,CAAvD,CAA5B,CAEA,GAAG,oBAAsBF,CAAAA,UAAzB,CACC;;;MAIA,KAAKM,gBAAL,CAAwB,gCAAmBN,UAAnB,CAA+B,kBAA/B,CAAmDF,aAAa,CAACI,aAAd,CAA4B,kBAA5B,CAAnD,CAAxB,CACD;AAEA;AACA,GAAG,UAAYF,CAAAA,UAAf,CACC,KAAKO,UAAL,CAAgBP,UAAU,CAACQ,MAA3B,EACD;AACA,CACD;AACA;;;IAIA,MAAON,CAAAA,aAAP,CAAqBO,UAArB,CACA,CACC,OAAOA,UAAP,EAEC,IAAK,SAAL,CACC,MAAO,EAAP,CACD,IAAK,gBAAL,CACC,MAAO,IAAIC,wBAAJ,EAAP,CACD,IAAK,gBAAL,CACC,MAAO,EAAP,CACD,IAAK,sBAAL,CACC,MAAO,IAAIC,8BAAJ,EAAP,CACD,IAAK,kBAAL,CACC,MAAO,EAAP,CACD,QACC,KAAM,IAAIC,CAAAA,KAAJ,CAAW,gDAA+CH,UAAW,EAArE,CAAN,CAbF,CAeA,CACD;AACA;;;;IAKA,MAAOI,CAAAA,kBAAP,CAA0BJ,UAA1B,CAAsCK,WAAtC,CACA,CACC,OAAOL,UAAP,EAEC,IAAK,SAAL,CACC,MAAQK,CAAAA,WAAW,GAAKhB,aAAa,CAACI,aAAd,CAA4BO,UAA5B,CAAxB,CACD,IAAK,gBAAL,CACC,MAASK,CAAAA,WAAW,CAACC,KAAZ,CAAkBC,YAAlB,CAA+BC,MAA/B,GAA0C,CAA3C,EAAkDH,WAAW,CAACI,IAAZ,CAAiBA,IAAjB,CAAsBD,MAAtB,GAAiC,CAA3F,CACD,IAAK,gBAAL,CACA,IAAK,kBAAL,CACC,MAAQH,CAAAA,WAAW,CAACG,MAAZ,GAAuB,CAA/B,CACD,IAAK,sBAAL,CACC,MAASN,+BAAqBE,kBAArB,CAAwC,aAAxC,CAAuDC,WAAW,CAACK,WAAnE,CAAD,EACPR,8BAAqBE,kBAArB,CAAwC,4BAAxC,CAAsEC,WAAW,CAACM,0BAAlF,GACAT,8BAAqBE,kBAArB,CAAwC,kBAAxC,CAA4DC,WAAW,CAACO,gBAAxE,CAFD,CAGD,QACC,KAAM,IAAIT,CAAAA,KAAJ,CAAW,gDAA+CH,UAAW,EAArE,CAAN,CAdF,CAgBA,CACD;AACA;;;;;;;;;;;;;;;IAgBA,MAAOD,CAAAA,MAAP,CAAcR,UAAU,CAAG,EAA3B,CACA,CACC;;;;;;;;KASA,KAAMsB,CAAAA,KAAK,CAAG,gCAAmBtB,UAAnB,CAA+B,OAA/B,CAAwC,EAAxC,CAAd,CAEA,MAAQ,IAAIuB,CAAAA,MAAM,CAACC,QAAX,CAAoB,CAC3BC,IAAI,CAAGH,KAAK,CAACI,SAAN,EAAmB,EADC,CAE3BC,KAAK,CAAE,CACN,GAAIJ,CAAAA,MAAM,CAACK,OAAX,CAAmB,CAAEH,IAAI,CAAGH,KAAK,CAACrB,OAAN,EAAiB,EAA1B,CAAnB,CADM,CAEN,GAAIsB,CAAAA,MAAM,CAACM,WAAX,CAAuB,CACtBJ,IAAI,CAAGH,KAAK,CAACnB,cAAN,EAAwB,EADT,CAEtB2B,QAAQ,CAAE,IAFY,CAGtBC,OAAO,CAAE,CACRC,QAAQ,CAAE,CADF,CACK;AACbC,SAAS,CAAE,CAAE;AAFL,CAHa,CAOtBN,KAAK,CAAEjB,wBAAeF,MAAf,GAAwB0B,UAAxB,CAAmCP,KAPpB,CAAvB,CAFM,CAWN,GAAIJ,CAAAA,MAAM,CAACY,GAAX,CAAe,CACdR,KAAK,CAAE,CACN,GAAIJ,CAAAA,MAAM,CAACa,QAAX,CAAoB,CACnBX,IAAI,CAAGH,KAAK,CAAClB,cAAN,EAAwB,EADZ,CAEnBuB,KAAK,CAAEU,uBAAc7B,MAAd,EAFY,CAApB,CADM,CADO,CAAf,CAXM,CAmBNG,8BAAqBH,MAArB,CAA4Bc,KAAK,CAACjB,oBAAN,EAA8B,EAA1D,CAnBM,CAoBN,GAAIkB,CAAAA,MAAM,CAACM,WAAX,CAAuB,CACtBC,QAAQ,CAAE,IADY,CAEtBC,OAAO,CAAE,CACRC,QAAQ,CAAE,CADF,CACK;AACbC,SAAS,CAAE,CAAE;AAFL,CAFa,CAMtBN,KAAK,CAAE,CACN,GAAIJ,CAAAA,MAAM,CAACa,QAAX,CAAoB,CACnBX,IAAI,CAAGH,KAAK,CAAChB,gBAAN,EAA0B,EADd,CAEnBqB,KAAK,CAAEW,mBAAU9B,MAAV,EAFY,CAApB,CADM,CANe,CAAvB,CApBM,CAFoB,CAApB,CAAR,CAqCA,CACD;AACA;;;IAIAD,UAAU,CAACC,MAAD,CACV,CACC;AACA,wBAAWA,MAAX,CAAmB,CAClB,SADkB,CAElB,gBAFkB,CAGlB,gBAHkB,CAIlB,sBAJkB,CAKlB,kBALkB,CAAnB,EAOA;AAEA;AACA,KAAM+B,CAAAA,IAAI,CAAGhB,MAAM,CAACiB,aAAP,CAAqBhC,MAArB,CACZA,MADY,CAEZV,aAAa,CAACU,MAAd,CAAqB,CACpBc,KAAK,CAAE,CACNrB,OAAO,CAAE,SADH,CAENE,cAAc,CAAE,gBAFV,CAGNC,cAAc,CAAE,gBAHV,CAINC,oBAAoB,CAAE,CACrBiB,KAAK,CAAE,CACNI,SAAS,CAAE,sBADL,CADc,CAJhB,CASNpB,gBAAgB,CAAE,kBATZ,CADa,CAArB,CAFY,CAAb,CAiBA,GAAGiC,IAAI,CAACE,QAAL,GAAkB,KAArB,CACC,KAAM,IAAI7B,CAAAA,KAAJ,CAAU,uEAAV,CAAN,CACD;AAEA;AACA,KAAKX,OAAL,CAAesC,IAAI,CAACG,MAAL,CAAYzC,OAAZ,CAAoBiC,UAApB,CAA+BS,QAA9C,CAEA,GAAG,kBAAoBJ,CAAAA,IAAI,CAACG,MAA5B,CACA,CACC,KAAKvC,cAAL,CAAsB,GAAIO,wBAAJ,CAAmB,CACxCF,MAAM,CAAE,GAAIe,CAAAA,MAAM,CAACC,QAAX,CAAoB,CAC3BG,KAAK,CAAEY,IAAI,CAACG,MAAL,CAAYvC,cAAZ,CAA2B+B,UAA3B,CAAsCP,KADlB,CAApB,CADgC,CAAnB,CAAtB,CAKA,CAED,KAAKvB,cAAL,CAAsBwC,KAAK,CAACC,IAAN,CAAWN,IAAI,CAACG,MAAL,CAAYtC,cAAvB,CAAuC0C,OAAO,EAAI,GAAIT,uBAAJ,CAAkB,CAAE7B,MAAM,CAAEsC,OAAV,CAAlB,CAAlD,CAAtB,CACA,KAAKzC,oBAAL,CAA4B,GAAIM,8BAAJ,CAAyB,CAAEH,MAAM,CAAE+B,IAAI,CAACG,MAAL,CAAYrC,oBAAtB,CAAzB,CAA5B,CAEA,GAAG,oBAAsBkC,CAAAA,IAAI,CAACG,MAA9B,CACC,KAAKpC,gBAAL,CAAwBsC,KAAK,CAACC,IAAN,CAAWN,IAAI,CAACG,MAAL,CAAYpC,gBAAvB,CAAyCwC,OAAO,EAAI,GAAIR,mBAAJ,CAAc,CAAE9B,MAAM,CAAEsC,OAAV,CAAd,CAApD,CAAxB,CACD;AACA,CACD;AACA;;;IAIAC,QAAQ,EACR,CACC;AACA,KAAMC,CAAAA,WAAW,CAAG,EAApB,CAEAA,WAAW,CAACC,IAAZ,CAAiB,GAAI1B,CAAAA,MAAM,CAACK,OAAX,CAAmB,CAAED,KAAK,CAAE,KAAK1B,OAAd,CAAnB,CAAjB,EAEA,GAAG,kBAAoB,KAAvB,CACA,CACC+C,WAAW,CAACC,IAAZ,CAAiB,GAAI1B,CAAAA,MAAM,CAACM,WAAX,CAAuB,CACvCC,QAAQ,CAAE,IAD6B,CAEvCC,OAAO,CAAE,CACRC,QAAQ,CAAE,CADF,CACK;AACbC,SAAS,CAAE,CAAE;AAFL,CAF8B,CAMvCN,KAAK,CAAE,KAAKxB,cAAL,CAAoB4C,QAApB,GAA+Bb,UAA/B,CAA0CP,KANV,CAAvB,CAAjB,EAQA,CAEDqB,WAAW,CAACC,IAAZ,CAAiB,GAAI1B,CAAAA,MAAM,CAACY,GAAX,CAAe,CAC/BR,KAAK,CAAEiB,KAAK,CAACC,IAAN,CAAW,KAAKzC,cAAhB,CAAgC0C,OAAO,EAAIA,OAAO,CAACC,QAAR,EAA3C,CADwB,CAAf,CAAjB,EAIAC,WAAW,CAACC,IAAZ,CAAiB,KAAK5C,oBAAL,CAA0B0C,QAA1B,EAAjB,EAEA,GAAG,oBAAsB,KAAzB,CACA,CACCC,WAAW,CAACC,IAAZ,CAAiB,GAAI1B,CAAAA,MAAM,CAACM,WAAX,CAAuB,CACvCC,QAAQ,CAAE,IAD6B,CAEvCC,OAAO,CAAE,CACRC,QAAQ,CAAE,CADF,CACK;AACbC,SAAS,CAAE,CAAE;AAFL,CAF8B,CAMvCN,KAAK,CAAEiB,KAAK,CAACC,IAAN,CAAW,KAAKvC,gBAAhB,CAAkCwC,OAAO,EAAIA,OAAO,CAACC,QAAR,EAA7C,CANgC,CAAvB,CAAjB,EAQA,CACD;AAEA;AACA,MAAQ,IAAIxB,CAAAA,MAAM,CAACC,QAAX,CAAoB,CAC3BG,KAAK,CAAEqB,WADoB,CAApB,CAAR,CAGA;AACA,CACD;AACA;;;IAIAE,MAAM,EACN,CACC,KAAMC,CAAAA,OAAO,CAAG,CACflD,OAAO,CAAE,KAAKA,OADC,CAAhB,CAIA,GAAG,kBAAoB,KAAvB,CACCkD,OAAO,CAAChD,cAAR,CAAyB,KAAKA,cAAL,CAAoB+C,MAApB,EAAzB,CAEDC,OAAO,CAAC/C,cAAR,CAAyBwC,KAAK,CAACC,IAAN,CAAW,KAAKzC,cAAhB,CAAgC0C,OAAO,EAAIA,OAAO,CAACI,MAAR,EAA3C,CAAzB,CACAC,OAAO,CAAC9C,oBAAR,CAA+B,KAAKA,oBAAL,CAA0B6C,MAA1B,EAA/B,CAEA,GAAG,oBAAsB,KAAzB,CACCC,OAAO,CAAC7C,gBAAR,CAA2BsC,KAAK,CAACC,IAAN,CAAW,KAAKvC,gBAAhB,CAAkCwC,OAAO,EAAIA,OAAO,CAACI,MAAR,EAA7C,CAA3B,CAED,MAAOC,CAAAA,OAAP,CACA,CACD;AACA;;;;;;;;IASAC,yBAAyB,CAACC,WAAD,CAAcrD,UAAd,CAA0BsD,OAA1B,CACzB,CACC;AACA,KAAMC,CAAAA,oBAAoB,CAAGvD,UAAU,EAAI,EAA3C,CACA;AAEA;AACA,GAAGqD,WAAW,CAACG,oBAAZ,CAAiCC,SAAjC,CAA2CC,WAA3C,CAAuDC,OAAvD,CAA+D,gBAA/D,IAAsF,CAAC,CAA1F,CACCL,OAAO,CAAG,CAAV,CAAa;AADd,IAGA,CACC,GAAGD,WAAW,CAACG,oBAAZ,CAAiCC,SAAjC,CAA2CC,WAA3C,CAAuDC,OAAvD,CAA+D,eAA/D,IAAqF,CAAC,CAAzF,CACCL,OAAO,CAAG,CAAV,CAAa;AADd,IAGC,MAAM,IAAI1C,CAAAA,KAAJ,CAAW,6CAA4CyC,WAAW,CAACG,oBAAZ,CAAiCC,SAAjC,CAA2CC,WAAY,EAA9G,CAAN,CACD,CACD;AAEA;AACA,GAAI,qBAAuBH,CAAAA,oBAAxB,GAAkD,KAArD,CACCA,oBAAoB,CAACK,iBAArB,CAAyC,SAAzC,CAED,GAAI,gBAAkBL,CAAAA,oBAAnB,GAA6C,KAAhD,CACCA,oBAAoB,CAACM,YAArB,CAAoC,SAApC,CAED,GAAI,uBAAyBN,CAAAA,oBAA1B,GAAoD,KAAvD,CACCA,oBAAoB,CAACO,mBAArB,CAA2C,GAA3C,CACD;AAEA;AACA,OAAOR,OAAP,EAEC,IAAK,EAAL,CAAQ;AACP,CACC;AACA,KAAMS,CAAAA,OAAO,CAAG,8BAAkB,CACjCtC,IAAI,CAAE,UAD2B,CAAlB,CAAhB,CAGA,GAAGsC,OAAO,GAAK,EAAf,CACC,KAAM,IAAInD,CAAAA,KAAJ,CAAU,2BAAV,CAAN,CACD;AAEA;AACA,KAAMoD,CAAAA,OAAO,CAAG,8BAAkB,CACjCvC,IAAI,CAAE8B,oBAAoB,CAACK,iBADM,CAAlB,CAAhB,CAGA,GAAGI,OAAO,GAAK,EAAf,CACC,KAAM,IAAIpD,CAAAA,KAAJ,CAAW,gCAA+B2C,oBAAoB,CAACK,iBAAkB,EAAjF,CAAN,CAED,KAAMK,CAAAA,aAAa,CAAG,GAAIC,6BAAJ,CAAwB,CAC7CR,WAAW,CAAEM,OADgC,CAE7CG,eAAe,CAAE,GAAI5C,CAAAA,MAAM,CAAC6C,IAAX,EAF4B,CAAxB,CAAtB,CAKA,KAAMC,CAAAA,aAAa,CAAG,GAAIC,yBAAJ,CAAoB,CACzCL,aADyC,CAEzCM,gBAAgB,CAAE,GAAIL,6BAAJ,CAAwB,CACzCR,WAAW,CAAE,sBAD4B,CACJ;AACrCS,eAAe,CAAEF,aAAa,CAAClB,QAAd,EAFwB,CAAxB,CAFuB,CAApB,CAAtB,CAOA;AAEA;AACA,KAAMyB,CAAAA,OAAO,CAAG,GAAIC,+BAAJ,CAA0B,CACzCxE,OAAO,CAAE,CADgC,CAEzCyE,GAAG,CAAE,GAAIC,+BAAJ,CAA0B,CAC9BC,MAAM,CAAEvB,WAAW,CAACuB,MADU,CAE9BC,YAAY,CAAExB,WAAW,CAACwB,YAFI,CAA1B,CAFoC,CAMzCC,sBAAsB,CAAE,GAAIZ,6BAAJ,CAAwB,CAC/CR,WAAW,CAAEK,OADkC,CAE/CI,eAAe,CAAEE,aAAa,CAACtB,QAAd,EAF8B,CAAxB,CANiB,CAUzCgC,oBAAoB,CAAE1B,WACtB;AAXyC,CAA1B,CAAhB,CAaA;AAEA;AACA,KAAKjD,cAAL,CAAoB6C,IAApB,CAAyB,GAAIZ,uBAAJ,CAAkB,CAC1CiB,OAAO,CAAE,CADiC,CAE1C3B,KAAK,CAAE6C,OAFmC,CAAlB,CAAzB,EAIA;AACA,CACD,MACD,IAAK,EAAL,CAAQ;AACP,CACC;AACA,KAAMQ,CAAAA,YAAY,CAAG,GAAIC,+BAAJ,CAA0B,CAC9CP,GAAG,CAAE,GAAIQ,qCAAJ,CAAgC,CACpC5B,OAAO,CAAE,CAD2B,CAEpC3B,KAAK,CAAE,GAAIgD,+BAAJ,CAA0B,CAChCC,MAAM,CAAEvB,WAAW,CAACuB,MADY,CAEhCC,YAAY,CAAExB,WAAW,CAACwB,YAFM,CAA1B,CAF6B,CAAhC,CAON;AAR+C,CAA1B,CAArB,CAUA;AAEA;AACA,KAAMM,CAAAA,QAAQ,CAAG,8BAAkB,CAClC1D,IAAI,CAAE,QAD4B,CAElCR,MAAM,CAAEsC,oBAAoB,CAACO,mBAFK,CAAlB,CAAjB,CAIA,GAAGqB,QAAQ,GAAK,EAAhB,CACC,KAAM,IAAIvE,CAAAA,KAAJ,CAAW,gDAA+C2C,oBAAoB,CAACO,mBAAoB,EAAnG,CAAN,CAED,KAAMsB,CAAAA,KAAK,CAAG,GAAIlB,6BAAJ,CAAwB,CACrCR,WAAW,CAAEyB,QADwB,CAErChB,eAAe,CAAE,GAAI5C,CAAAA,MAAM,CAAC6C,IAAX,EAFoB,CAAxB,CAAd,CAIA;AAEA;AACA,KAAMiB,CAAAA,OAAO,CAAG,8BAAkB,CACjC5D,IAAI,CAAE,MAD2B,CAEjC6D,GAAG,CAAE/B,oBAAoB,CAACM,YAFO,CAAlB,CAAhB,CAIA,GAAGwB,OAAO,GAAK,EAAf,CACC,KAAM,IAAIzE,CAAAA,KAAJ,CAAW,0BAAyB2C,oBAAoB,CAACM,YAAa,EAAtE,CAAN,CAED;AACA;AACA,KAAM0B,CAAAA,SAAS,CAAG,GAAIC,CAAAA,WAAJ,CAAgB,EAAhB,CAAlB,CACA,KAAMC,CAAAA,OAAO,CAAG,GAAIC,CAAAA,UAAJ,CAAeH,SAAf,CAAhB,CACA,4BAAgBE,OAAhB,EAA0B;AAE1B,KAAMjB,CAAAA,OAAO,CAAG,GAAImB,+BAAJ,CAA0B,CACzC1F,OAAO,CAAE,CADgC,CAEzC;AACA2F,GAAG,CAAE,GAAIrE,CAAAA,MAAM,CAACsE,WAAX,CAAuB,CAAEC,QAAQ,CAAEP,SAAZ,CAAvB,CAHoC,CAIzCT,sBAAsB,CAAE,GAAIZ,6BAAJ,CAAwB,CAC/CR,WAAW,CAAE2B,OADkC,CAE/ClB,eAAe,CAAEiB,KAAK,CAACrC,QAAN,EAF8B,CAAxB,CAJiB,CAQzCgD,sBAAsB,CAAE,GAAIC,gCAAJ,CAA2B,CAClDC,aAAa,CAAE,CAACjB,YAAD,CADmC,CAA3B,CARiB,CAWzCD,oBAAoB,CAAE1B,WAXmB,CAA1B,CAAhB,CAaA;AAEA;AACA,KAAKjD,cAAL,CAAoB6C,IAApB,CAAyB,GAAIZ,uBAAJ,CAAkB,CAC1CiB,OAAO,CAAE,CADiC,CAE1C3B,KAAK,CAAE6C,OAFmC,CAAlB,CAAzB,EAIA;AACA,CACD,MACD,QACC,KAAM,IAAI5D,CAAAA,KAAJ,CAAW,4BAA2B0C,OAAQ,EAA9C,CAAN,CA5HF,CA8HA;AAEA,MAAO,KAAP,CACA,CACD;AACA;;;;;IAMA4C,4BAA4B,CAACC,cAAD,CAAiBnG,UAAjB,CAA6BsD,OAA7B,CAC5B,CACC;AACA,KAAMC,CAAAA,oBAAoB,CAAGvD,UAAU,EAAI,EAA3C,CACA;AAEA;AACA,GAAImG,cAAc,WAAYX,CAAAA,WAA3B,GAA4C,KAA/C,CACC,KAAM,IAAI5E,CAAAA,KAAJ,CAAU,oDAAV,CAAN,CAED,GAAGuF,cAAc,CAACC,UAAf,GAA8B,CAAjC,CACC,KAAM,IAAIxF,CAAAA,KAAJ,CAAU,yCAAV,CAAN,CACD;AAEA;AACA,GAAI,iBAAmB2C,CAAAA,oBAApB,GAA8C,KAAjD,CACA,CACC,KAAM8C,CAAAA,mBAAmB,CAAG,GAAIb,CAAAA,WAAJ,CAAgB,EAAhB,CAA5B,CACA,KAAMc,CAAAA,iBAAiB,CAAG,GAAIZ,CAAAA,UAAJ,CAAeW,mBAAf,CAA1B,CACA,4BAAgBC,iBAAhB,EAEA/C,oBAAoB,CAACgD,aAArB,CAAqCF,mBAArC,CACA,CAED,GAAI,qBAAuB9C,CAAAA,oBAAxB,GAAkD,KAArD,CACCA,oBAAoB,CAACiD,iBAArB,CAAyC,SAAzC,CAED,GAAI,kBAAoBjD,CAAAA,oBAArB,GAA+C,KAAlD,CACCA,oBAAoB,CAACkD,cAArB,CAAsC,IAAtC,CAED,GAAI,0BAA4BlD,CAAAA,oBAA7B,GAAuD,KAA1D,CACA,CACCA,oBAAoB,CAACuB,sBAArB,CAA8C,CAC7CrD,IAAI,CAAE,QADuC,CAE7CR,MAAM,CAAE,GAFqC,CAA9C,CAIA,CAED,GAAI,gCAAkCsC,CAAAA,oBAAnC,GAA6D,KAAhE,CACCA,oBAAoB,CAACmD,4BAArB,CAAoD,GAAInF,CAAAA,MAAM,CAAC6C,IAAX,EAApD,CACD;AAEA;AACA,OAAOd,OAAP,EAEC,IAAK,EAAL,CAAQ;AACP,CACC;AACA,KAAMqD,CAAAA,MAAM,CAAG,8BAAkBpD,oBAAoB,CAACuB,sBAAvC,CAAf,CACA,GAAG6B,MAAM,GAAK,EAAd,CACC,KAAM,IAAI/F,CAAAA,KAAJ,CAAU,gDAAV,CAAN,CACD;AAEA;AACA,KAAM4D,CAAAA,OAAO,CAAG,GAAIoC,0BAAJ,CAAqB,CACpC3G,OAAO,CAAE,CAD2B,CAEpC4G,KAAK,CAAE,GAAIC,uBAAJ,CAAkB,CACxBP,aAAa,CAAE,GAAIhF,CAAAA,MAAM,CAACsE,WAAX,CAAuB,CAAEC,QAAQ,CAAEvC,oBAAoB,CAACgD,aAAjC,CAAvB,CADS,CAAlB,CAF6B,CAKpCzB,sBAAsB,CAAE,GAAIZ,6BAAJ,CAAwB,CAC/CR,WAAW,CAAEiD,MADkC,CAE/C;;UAGAxC,eAAe,CAAEZ,oBAAoB,CAACmD,4BALS,CAAxB,CALY,CAYpCK,aAAa,CAAEZ,cAChB;AAbqC,CAArB,CAAhB,CAeA;AAEA;AACA,KAAK/F,cAAL,CAAoB6C,IAApB,CAAyB,GAAIZ,uBAAJ,CAAkB,CAC1CiB,OAAO,CAAE,CADiC,CAE1C3B,KAAK,CAAE6C,OAFmC,CAAlB,CAAzB,EAIA;AACA,CACD,MACD,IAAK,EAAL,CAAQ;AACP,CACC;AACA,KAAMwC,CAAAA,SAAS,CAAG,8BAAkB,CACnCvF,IAAI,CAAE,QAD6B,CAAlB,CAAlB,CAGA,GAAGuF,SAAS,GAAK,EAAjB,CACC,KAAM,IAAIpG,CAAAA,KAAJ,CAAU,6BAAV,CAAN,CACD;AAEA;AACA,KAAMqG,CAAAA,UAAU,CAAG,GAAIzB,CAAAA,WAAJ,CAAgB,EAAhB,CAAnB,CACA,KAAM0B,CAAAA,QAAQ,CAAG,GAAIxB,CAAAA,UAAJ,CAAeuB,UAAf,CAAjB,CACA,4BAAgBC,QAAhB,EACA;AAEA;AACA,KAAMC,CAAAA,OAAO,CAAG,8BAAkB,CACjC1F,IAAI,CAAE,MAD2B,CAEjC2F,IAAI,CAAE,CACL3F,IAAI,CAAE8B,oBAAoB,CAACiD,iBADtB,CAF2B,CAAlB,CAAhB,CAMA,GAAGW,OAAO,GAAK,EAAf,CACC,KAAM,IAAIvG,CAAAA,KAAJ,CAAW,4CAA2C2C,oBAAoB,CAACiD,iBAAkB,EAA7F,CAAN,CACD;AAEA;AACA,KAAMa,CAAAA,YAAY,CAAG,GAAIC,sBAAJ,CAAiB,CACrCC,IAAI,CAAE,GAAIhG,CAAAA,MAAM,CAACsE,WAAX,CAAuB,CAAEC,QAAQ,CAAEmB,UAAZ,CAAvB,CAD+B,CAErCR,cAAc,CAAElD,oBAAoB,CAACkD,cAFA,CAGrCe,GAAG,CAAE,GAAItD,6BAAJ,CAAwB,CAC5BR,WAAW,CAAEyD,OADe,CAE5BhD,eAAe,CAAE,GAAI5C,CAAAA,MAAM,CAAC6C,IAAX,EAFW,CAAxB,CAHgC,CAAjB,CAArB,CAQA;AAEA;AACA,KAAMuC,CAAAA,MAAM,CAAG,8BAAkBpD,oBAAoB,CAACuB,sBAAvC,CAAf,CACA,GAAG6B,MAAM,GAAK,EAAd,CACC,KAAM,IAAI/F,CAAAA,KAAJ,CAAU,gDAAV,CAAN,CACD;AAEA;AACA,KAAM4D,CAAAA,OAAO,CAAG,GAAIiD,+BAAJ,CAA0B,CACzCxH,OAAO,CAAE,CADgC,CAEzCyH,sBAAsB,CAAE,GAAIxD,6BAAJ,CAAwB,CAC/CR,WAAW,CAAEsD,SADkC,CAE/C7C,eAAe,CAAEkD,YAAY,CAACtE,QAAb,EAF8B,CAAxB,CAFiB,CAMzC+B,sBAAsB,CAAE,GAAIZ,6BAAJ,CAAwB,CAC/CR,WAAW,CAAEiD,MADkC,CAE/C;;UAGAxC,eAAe,CAAEZ,oBAAoB,CAACmD,4BALS,CAAxB,CANiB,CAazCiB,QAAQ,CAAExB,cACX;AAd0C,CAA1B,CAAhB,CAgBA;AAEA;AACA,KAAK/F,cAAL,CAAoB6C,IAApB,CAAyB,GAAIZ,uBAAJ,CAAkB,CAC1CiB,OAAO,CAAE,CADiC,CAE1C3B,KAAK,CAAE6C,OAFmC,CAAlB,CAAzB,EAIA;AACA,CACD,MACD,QACC,KAAM,IAAI5D,CAAAA,KAAJ,CAAW,gCAA+B0C,OAAQ,EAAlD,CAAN,CA5GF,CA8GA;AACA,CACD;AACA;;;;;IAMAsE,OAAO,CAACxG,0BAAD,CAA6ByG,gBAA7B,CACP,CACC;AACA,GAAIC,CAAAA,QAAQ,CAAGC,OAAO,CAACC,OAAR,EAAf,CAEA,KAAMC,CAAAA,QAAQ,CAAG,GAAIzC,CAAAA,WAAJ,CAAgB,EAAhB,CAAjB,CAAsC;AACtC,KAAM0C,CAAAA,MAAM,CAAG,GAAIxC,CAAAA,UAAJ,CAAeuC,QAAf,CAAf,CACA,4BAAgBC,MAAhB,EAEA,KAAMC,CAAAA,WAAW,CAAG,GAAIzC,CAAAA,UAAJ,CAAemC,gBAAf,CAApB,CAEA,GAAIO,CAAAA,UAAJ,CACA,GAAI/G,CAAAA,gBAAJ,CACA,GAAIgH,CAAAA,kBAAJ,CAEA,KAAMC,CAAAA,kBAAkB,CAAG,EAA3B,CAEA,KAAMC,CAAAA,KAAK,CAAG,IAAd,CACA;AAEA;AACA,KAAMC,CAAAA,oBAAoB,CAAG,8BAAkBpH,0BAAlB,CAA7B,CACA,GAAGoH,oBAAoB,GAAK,EAA5B,CACC,MAAOT,CAAAA,OAAO,CAACU,MAAR,CAAe,4CAAf,CAAP,CACD;AAEA;AACA,KAAMC,CAAAA,MAAM,CAAG,uBAAf,CACA,GAAG,MAAOA,CAAAA,MAAP,GAAkB,WAArB,CACC,MAAOX,CAAAA,OAAO,CAACU,MAAR,CAAe,mCAAf,CAAP,CACD;AAEA;AACAX,QAAQ,CAAGA,QAAQ,CAACa,IAAT,CAAc,IACxBD,MAAM,CAACE,WAAP,CAAmBxH,0BAAnB,CAA+C,IAA/C,CAAqD,CAAC,SAAD,CAArD,CADU,CAAX,CAEA;AACA;AACA0G,QAAQ,CAAGA,QAAQ,CAACa,IAAT,CAAcjG,MAAM,EAC/B,CACC0F,UAAU,CAAG1F,MAAb,CAEA,MAAOgG,CAAAA,MAAM,CAACd,OAAP,CAAe,CACrBnG,IAAI,CAAEL,0BAA0B,CAACK,IADZ,CAErBoH,EAAE,CAAEX,MAFiB,CAAf,CAIPE,UAJO,CAKPD,WALO,CAAP,CAMA,CAVU,CAURW,KAAK,EACPf,OAAO,CAACU,MAAR,CAAeK,KAAf,CAXU,CAAX,CAYA;AACA;AACAhB,QAAQ,CAAGA,QAAQ,CAACa,IAAT,CAAcjG,MAAM,EAC/B,CACC;AACArB,gBAAgB,CAAGqB,MAAnB,CACA;AAEA,MAAOgG,CAAAA,MAAM,CAACK,SAAP,CAAiB,KAAjB,CAAwBX,UAAxB,CAAP,CACA,CAPU,CAORU,KAAK,EACPf,OAAO,CAACU,MAAR,CAAeK,KAAf,CARU,EASTH,IATS,CASJjG,MAAM,EACb,CACC2F,kBAAkB,CAAG3F,MAArB,CAEA,MAAO,KAAP,CACA,CAdU,CAcRoG,KAAK,EACPf,OAAO,CAACU,MAAR,CAAeK,KAAf,CAfU,CAAX,CAgBA;AACA;AACAhB,QAAQ,CAAGA,QAAQ,CAACa,IAAT,CAAc,IACzB,CACC,KAAK1I,OAAL,CAAe,CAAf,CACA,KAAKI,oBAAL,CAA4B,GAAIM,8BAAJ,CAAyB,CACpDQ,WAAW,CAAE,sBADuC,CACf;AACrCC,0BAA0B,CAAE,GAAI8C,6BAAJ,CAAwB,CACnDR,WAAW,CAAE8E,oBADsC,CAEnDrE,eAAe,CAAE,GAAI5C,CAAAA,MAAM,CAACsE,WAAX,CAAuB,CAAEC,QAAQ,CAAEmC,QAAZ,CAAvB,CAFkC,CAAxB,CAFwB,CAMpD5G,gBAAgB,CAAE,GAAIE,CAAAA,MAAM,CAACsE,WAAX,CAAuB,CAAEC,QAAQ,CAAEzE,gBAAZ,CAAvB,CANkC,CAAzB,CAA5B,CAQA,CAXU,CAWRyH,KAAK,EACPf,OAAO,CAACU,MAAR,CAAeK,KAAf,CAZU,CAAX,CAaA;AAEA;AACA,QAASE,CAAAA,wBAAT,CAAkCC,KAAlC,CACA,CACC;AACA,GAAIC,CAAAA,eAAe,CAAGnB,OAAO,CAACC,OAAR,EAAtB,CAEA,GAAImB,CAAAA,aAAJ,CACA,GAAIC,CAAAA,cAAJ,CAEA,GAAIC,CAAAA,cAAJ,CACA,GAAIC,CAAAA,oBAAJ,CAEA,GAAIC,CAAAA,qBAAJ,CACA;AAEA;AACAL,eAAe,CAAGA,eAAe,CAACP,IAAhB,CAAqB,IACvC,CACC,KAAMa,CAAAA,WAAW,CAAGjB,KAAK,CAACnI,cAAN,CAAqB6I,KAArB,EAA4BtH,KAA5B,CAAkCoD,oBAAlC,CAAuDvB,oBAAvD,CAA4EC,SAA5E,CAAsFU,eAA1G,CAEA,GAAIqF,WAAW,WAAYjI,CAAAA,MAAM,CAACkI,gBAA/B,GAAqD,KAAxD,CACC,MAAO1B,CAAAA,OAAO,CAACU,MAAR,CAAgB,8CAA6CQ,KAAM,EAAnE,CAAP,CAED,KAAMS,CAAAA,QAAQ,CAAGF,WAAW,CAACtH,UAAZ,CAAuByH,QAAvB,EAAjB,CAEA,OAAOD,QAAP,EAEC,IAAK,qBAAL,CACCL,cAAc,CAAG,OAAjB,CACAC,oBAAoB,CAAG,GAAvB,CACA,MACD,IAAK,cAAL,CACCD,cAAc,CAAG,OAAjB,CACAC,oBAAoB,CAAG,GAAvB,CACA,MACD,IAAK,cAAL,CACCD,cAAc,CAAG,OAAjB,CACAC,oBAAoB,CAAG,GAAvB,CACA,MACD,QACC,MAAOvB,CAAAA,OAAO,CAACU,MAAR,CAAgB,iCAAgCQ,KAAM,EAAtD,CAAP,CAfF,CAkBA,MAAOI,CAAAA,cAAP,CACA,CA5BiB,CA4BfP,KAAK,EACPf,OAAO,CAACU,MAAR,CAAeK,KAAf,CA7BiB,CAAlB,CA8BA;AAEA;AACAI,eAAe,CAAGA,eAAe,CAACP,IAAhB,CAAqBjG,MAAM,EAC5CgG,MAAM,CAACE,WAAP,CAAmB,CAClBnH,IAAI,CAAE,MADY,CAElBmI,UAAU,CAAElH,MAFM,CAAnB,CAIA,IAJA,CAKA,CAAC,YAAD,CALA,CADiB,CAOlBoG,KAAK,EACJf,OAAO,CAACU,MAAR,CAAeK,KAAf,CARiB,CAAlB,CAUA;AACA;AACAI,eAAe,CAAGA,eAAe,CAACP,IAAhB,CAAqBjG,MAAM,EAC7C,CACCyG,aAAa,CAAGzG,MAAM,CAACmH,SAAvB,CACAT,cAAc,CAAG1G,MAAM,CAACoH,UAAxB,CAEA,MAAOpB,CAAAA,MAAM,CAACK,SAAP,CAAiB,MAAjB,CAAyBI,aAAzB,CAAP,CACA,CANiB,CAOlBL,KAAK,EACJf,OAAO,CAACU,MAAR,CAAeK,KAAf,CARiB,CAAlB,CASA;AAEA;AACAI,eAAe,CAAGA,eAAe,CAACP,IAAhB,CAAqBjG,MAAM,EAC7C,CACC6G,qBAAqB,CAAG7G,MAAxB,CAEA,MAAO6F,CAAAA,KAAK,CAACnI,cAAN,CAAqB6I,KAArB,EAA4BtH,KAA5B,CAAkCoD,oBAAlC,CAAuDgF,YAAvD,CAAoE,CAC1EtG,SAAS,CAAE,CACVA,SAAS,CAAE,CACVhC,IAAI,CAAE,MADI,CAEVmI,UAAU,CAAEP,cAFF,CADD,CAKVW,MAAM,CAAE,EALE,CAD+D,CAApE,CAAP,CASA,CAbiB,CAaflB,KAAK,EACPf,OAAO,CAACU,MAAR,CAAeK,KAAf,CAdiB,CAAlB,CAeA;AACA;AACAI,eAAe,CAAGA,eAAe,CAACP,IAAhB,CAAqBjG,MAAM,EAAIgG,MAAM,CAACuB,UAAP,CAAkB,CAClExI,IAAI,CAAE,MAD4D,CAElEyI,MAAM,CAAExH,MAF0D,CAAlB,CAIjD0G,cAJiD,CAKjDE,oBALiD,CAA/B,CAMlBR,KAAK,EACJf,OAAO,CAACU,MAAR,CAAeK,KAAf,CAPiB,CAAlB,CAQA;AAEA;AACAI,eAAe,CAAGA,eAAe,CAACP,IAAhB,CACjB;;OAGAjG,MAAM,EACN,CACC;AACA,KAAMyH,CAAAA,cAAc,CAAG,GAAIjG,6BAAJ,CAAwB,CAAE1D,MAAM,CAAE+H,KAAK,CAACnI,cAAN,CAAqB6I,KAArB,EAA4BtH,KAA5B,CAAkCmD,sBAAlC,CAAyDX,eAAnE,CAAxB,CAAvB,CAEA,KAAMiG,CAAAA,WAAW,CAAG,8BAAkBD,cAAc,CAACzG,WAAjC,CAApB,CACA,GAAI,QAAU0G,CAAAA,WAAX,GAA4B,KAA/B,CACC,MAAOrC,CAAAA,OAAO,CAACU,MAAR,CAAgB,+CAA8C0B,cAAc,CAACzG,WAAY,EAAzF,CAAP,CACD;AAEA;AACA,GAAI2G,CAAAA,QAAQ,CAAGD,WAAW,CAACnJ,MAA3B,CAEA,KAAMqJ,CAAAA,cAAc,CAAG,GAAI9E,CAAAA,WAAJ,CAAgB,CAAhB,CAAvB,CACA,KAAM+E,CAAAA,YAAY,CAAG,GAAI7E,CAAAA,UAAJ,CAAe4E,cAAf,CAArB,CAEA,IAAI,GAAIE,CAAAA,CAAC,CAAG,CAAZ,CAAeA,CAAC,EAAI,CAApB,CAAuBA,CAAC,EAAxB,CACA,CACCD,YAAY,CAACC,CAAD,CAAZ,CAAkBH,QAAlB,CACAA,QAAQ,GAAK,CAAb,CACA,CACD;AAEA;AACA,KAAMI,CAAAA,OAAO,CAAG,GAAIC,0BAAJ,CAAqB,CACpClG,OAAO,CAAE,GAAIN,6BAAJ,CAAwB,CAChCR,WAAW,CAAEyG,cAAc,CAACzG,WADI,CAEhC;;;;UAKAS,eAAe,CAAE,GAAI5C,CAAAA,MAAM,CAAC6C,IAAX,EAPe,CAAxB,CAD2B,CAUpCuG,WAAW,CAAEpC,KAAK,CAACnI,cAAN,CAAqB6I,KAArB,EAA4BtH,KAA5B,CAAkCiE,GAVX,CAWpCgF,WAAW,CAAE,GAAIrJ,CAAAA,MAAM,CAACsE,WAAX,CAAuB,CAAEC,QAAQ,CAAEwE,cAAZ,CAAvB,CAXuB,CAArB,CAAhB,CAcA,KAAMO,CAAAA,WAAW,CAAGJ,OAAO,CAAC1H,QAAR,GAAmB+H,KAAnB,CAAyB,KAAzB,CAApB,CACA;AAEA;AACA,KAAMC,CAAAA,aAAa,CAAG,8BAAkBxC,KAAK,CAACnI,cAAN,CAAqB6I,KAArB,EAA4BtH,KAA5B,CAAkCmD,sBAAlC,CAAyDpB,WAA3E,CAAtB,CACA,GAAI,QAAUqH,CAAAA,aAAX,GAA8B,KAAjC,CACC,MAAOhD,CAAAA,OAAO,CAACU,MAAR,CAAgB,+CAA8CF,KAAK,CAACnI,cAAN,CAAqB6I,KAArB,EAA4BtH,KAA5B,CAAkCmD,sBAAlC,CAAyDpB,WAAY,EAAnI,CAAP,CACD;AAEA,MAAO,gBAAIqH,aAAa,CAACzF,GAAlB,CAAuB5C,MAAvB,CAA+B0H,WAAW,CAACnJ,MAA3C,CAAmD4J,WAAnD,CAAP,CACA,CApDgB,CAqDjB/B,KAAK,EACJf,OAAO,CAACU,MAAR,CAAeK,KAAf,CAtDgB,CAAlB,CAuDA;AACA;AACAI,eAAe,CAAGA,eAAe,CAACP,IAAhB,CAAqBjG,MAAM,EAC5CgG,MAAM,CAACsC,SAAP,CAAiB,KAAjB,CAAwBtI,MAAxB,CAAgC,CAAEjB,IAAI,CAAE,QAAR,CAAhC,CAAoD,IAApD,CAA0D,CAAC,SAAD,CAA1D,CADiB,CAElBqH,KAAK,EACJf,OAAO,CAACU,MAAR,CAAeK,KAAf,CAHiB,CAAlB,CAKA;AACA;AACAI,eAAe,CAAGA,eAAe,CAACP,IAAhB,CAAqBjG,MAAM,EAAIgG,MAAM,CAACuC,OAAP,CAAe,KAAf,CAAsB7C,UAAtB,CAAkC1F,MAAlC,CAA0C,CAAEjB,IAAI,CAAE,QAAR,CAA1C,CAA/B,CACjBqH,KAAK,EACJf,OAAO,CAACU,MAAR,CAAeK,KAAf,CAFgB,CAAlB,CAIA;AACA;AACAI,eAAe,CAAGA,eAAe,CAACP,IAAhB,CAAqBjG,MAAM,EAC7C,CACC;AACA,KAAMH,CAAAA,IAAI,CAAGhB,MAAM,CAAC2J,OAAP,CAAe3B,qBAAf,CAAb,CAEA,KAAM4B,CAAAA,UAAU,CAAG,GAAIC,mCAAJ,EAAnB,CACAD,UAAU,CAAC7H,OAAX,CAAqB,CAArB,CACA6H,UAAU,CAACxJ,KAAX,CAAmB,GAAI0J,6BAAJ,CAAwB,CAAE7K,MAAM,CAAE+B,IAAI,CAACG,MAAf,CAAxB,CAAnB,CACA;AACA,GAAG,mBAAqByI,CAAAA,UAAU,CAACxJ,KAAX,CAAiB8B,SAAzC,CACC,MAAO0H,CAAAA,UAAU,CAACxJ,KAAX,CAAiB8B,SAAjB,CAA2BU,eAAlC,CAEDoE,KAAK,CAACnI,cAAN,CAAqB6I,KAArB,EAA4BtH,KAA5B,CAAkCwJ,UAAlC,CAA+CA,UAA/C,CACA;AAEA;AACA;;OAGA5C,KAAK,CAACnI,cAAN,CAAqB6I,KAArB,EAA4BtH,KAA5B,CAAkCoE,sBAAlC,CAAyDE,aAAzD,CAAuE,CAAvE,EAA0EjB,YAA1E,CAAyF,GAAIzD,CAAAA,MAAM,CAACsE,WAAX,CAAuB,CAAEC,QAAQ,CAAEpD,MAAZ,CAAvB,CAAzF,CACA;AACA,CArBiB,CAqBfoG,KAAK,EACPf,OAAO,CAACU,MAAR,CAAeK,KAAf,CAtBiB,CAAlB,CAwBA;AAEA,MAAOI,CAAAA,eAAP,CACA,CAED,QAASoC,CAAAA,wBAAT,CAAkCrC,KAAlC,CACA,CACC;AACA,GAAIC,CAAAA,eAAe,CAAGnB,OAAO,CAACC,OAAR,EAAtB,CACA;AAEA;AACAkB,eAAe,CAAGA,eAAe,CAACP,IAAhB,CAAqB,IACvC,CACC;AACA,KAAMnI,CAAAA,MAAM,CAAG+H,KAAK,CAACnI,cAAN,CAAqB6I,KAArB,EAA4BtH,KAA5B,CAAkCmD,sBAAlC,CAAyDX,eAAxE,CACA,KAAME,CAAAA,aAAa,CAAG,GAAIC,yBAAJ,CAAoB,CAAE9D,MAAF,CAApB,CAAtB,CAEA,KAAMyD,CAAAA,aAAa,CAAG,8BAAkBI,aAAa,CAACJ,aAAd,CAA4BP,WAA9C,CAAtB,CACA,GAAI,QAAUO,CAAAA,aAAX,GAA8B,KAAjC,CACC,MAAO8D,CAAAA,OAAO,CAACU,MAAR,CAAgB,qCAAoCpE,aAAa,CAACJ,aAAd,CAA4BP,WAAY,EAA5F,CAAP,CACD;AAEA,MAAO6E,CAAAA,KAAK,CAACnI,cAAN,CAAqB6I,KAArB,EAA4BtH,KAA5B,CAAkCoD,oBAAlC,CAAuDgF,YAAvD,CAAoE,CAC1EtG,SAAS,CAAE,CACVA,SAAS,CAAE,CACVhC,IAAI,CAAE,UADI,CAEV2F,IAAI,CAAE,CACL3F,IAAI,CAAEwC,aAAa,CAACxC,IADf,CAFI,CADD,CAOVuI,MAAM,CAAE,CAAC,SAAD,CAAY,SAAZ,CAPE,CAD+D,CAApE,CAAP,CAWA,CAtBiB,CAsBflB,KAAK,EACPf,OAAO,CAACU,MAAR,CAAeK,KAAf,CAvBiB,CAAlB,CAwBA;AACA;AACAI,eAAe,CAAGA,eAAe,CAACP,IAAhB,CAAqBjG,MAAM,EAC5CgG,MAAM,CAACd,OAAP,CAAelF,MAAM,CAACe,SAAtB,CAAiCf,MAAjC,CAAyC2F,kBAAzC,CADiB,CAElBS,KAAK,EACJf,OAAO,CAACU,MAAR,CAAeK,KAAf,CAHiB,CAAlB,CAKA;AAEA;AACAI,eAAe,CAAGA,eAAe,CAACP,IAAhB,CAAqBjG,MAAM,EAC7C,CACC;AACA6F,KAAK,CAACnI,cAAN,CAAqB6I,KAArB,EAA4BtH,KAA5B,CAAkCqD,YAAlC,CAAiD,GAAIzD,CAAAA,MAAM,CAACsE,WAAX,CAAuB,CAAEC,QAAQ,CAAEpD,MAAZ,CAAvB,CAAjD,CACA;AACA,CALiB,CAKfoG,KAAK,EACPf,OAAO,CAACU,MAAR,CAAeK,KAAf,CANiB,CAAlB,CAQA;AAEA,MAAOI,CAAAA,eAAP,CACA,CAED,QAASqC,CAAAA,mBAAT,CAA6BtC,KAA7B,CACA,CACC;AACA,GAAIC,CAAAA,eAAe,CAAGnB,OAAO,CAACC,OAAR,EAAtB,CACA,GAAIwD,CAAAA,YAAJ,CACA;AAEA;AACAtC,eAAe,CAAGA,eAAe,CAACP,IAAhB,CAAqB,IACvC,CACC;AACA6C,YAAY,CAAG,8BAAkBjD,KAAK,CAACnI,cAAN,CAAqB6I,KAArB,EAA4BtH,KAA5B,CAAkCmD,sBAAlC,CAAyDpB,WAA3E,CAAf,CACA,GAAI,QAAU8H,CAAAA,YAAX,GAA6B,KAAhC,CACC,MAAOzD,CAAAA,OAAO,CAACU,MAAR,CAAgB,+CAA8CF,KAAK,CAACnI,cAAN,CAAqB6I,KAArB,EAA4BtH,KAA5B,CAAkCmD,sBAAlC,CAAyDpB,WAAY,EAAnI,CAAP,CACA;AAED,MAAOgF,CAAAA,MAAM,CAACsC,SAAP,CAAiB,KAAjB,CACN,GAAItF,CAAAA,UAAJ,CAAe6C,KAAK,CAACnI,cAAN,CAAqB6I,KAArB,EAA4BtH,KAA5B,CAAkCoF,aAAjD,CADM,CAENyE,YAFM,CAGN,IAHM,CAIN,CAAC,SAAD,CAJM,CAAP,CAIe;AACf,CAbiB,CAaf1C,KAAK,EACPf,OAAO,CAACU,MAAR,CAAeK,KAAf,CAdiB,CAAlB,CAgBA;AAEA;AACAI,eAAe,CAAGA,eAAe,CAACP,IAAhB,CAAqBjG,MAAM,EAC5CgG,MAAM,CAACuC,OAAP,CAAe,KAAf,CAAsB7C,UAAtB,CAAkC1F,MAAlC,CAA0C8I,YAA1C,CADiB,CAElB1C,KAAK,EACJf,OAAO,CAACU,MAAR,CAAeK,KAAf,CAHiB,CAAlB,CAKA;AACA;AACAI,eAAe,CAAGA,eAAe,CAACP,IAAhB,CAAqBjG,MAAM,EAC7C,CACC;AACA6F,KAAK,CAACnI,cAAN,CAAqB6I,KAArB,EAA4BtH,KAA5B,CAAkCqD,YAAlC,CAAiD,GAAIzD,CAAAA,MAAM,CAACsE,WAAX,CAAuB,CAAEC,QAAQ,CAAEpD,MAAZ,CAAvB,CAAjD,CACA;AACA,CALiB,CAKfoG,KAAK,EACPf,OAAO,CAACU,MAAR,CAAeK,KAAf,CANiB,CAAlB,CAQA;AAEA,MAAOI,CAAAA,eAAP,CACA,CAED,QAASuC,CAAAA,wBAAT,CAAkCxC,KAAlC,CACA,CACC;AACA,GAAIC,CAAAA,eAAe,CAAGnB,OAAO,CAACC,OAAR,EAAtB,CACA,GAAIX,CAAAA,YAAJ,CACA,GAAImE,CAAAA,YAAJ,CACA;AAEA;AACAtC,eAAe,CAAGA,eAAe,CAACP,IAAhB,CAAqB,IACvC,CACC,GAAI,0BAA4BJ,CAAAA,KAAK,CAACnI,cAAN,CAAqB6I,KAArB,EAA4BtH,KAAzD,GAAoE,KAAvE,CACC,MAAOoG,CAAAA,OAAO,CAACU,MAAR,CAAe,kDAAf,CAAP,CAED,GAAI,mBAAqBF,CAAAA,KAAK,CAACnI,cAAN,CAAqB6I,KAArB,EAA4BtH,KAA5B,CAAkC+F,sBAAxD,GAAoF,KAAvF,CACC,MAAOK,CAAAA,OAAO,CAACU,MAAR,CAAe,gDAAf,CAAP,CAED,GACA,CACCpB,YAAY,CAAG,GAAIC,sBAAJ,CAAiB,CAAE9G,MAAM,CAAE+H,KAAK,CAACnI,cAAN,CAAqB6I,KAArB,EAA4BtH,KAA5B,CAAkC+F,sBAAlC,CAAyDvD,eAAnE,CAAjB,CAAf,CACA,CACD,MAAMuH,EAAN,CACA,CACC,MAAO3D,CAAAA,OAAO,CAACU,MAAR,CAAe,gDAAf,CAAP,CACA,CAED,MAAOV,CAAAA,OAAO,CAACC,OAAR,EAAP,CACA,CAlBiB,CAkBfc,KAAK,EACPf,OAAO,CAACU,MAAR,CAAeK,KAAf,CAnBiB,CAAlB,CAqBA;AACA;AACAI,eAAe,CAAGA,eAAe,CAACP,IAAhB,CAAqB,IACvC,CACC,KAAMgD,CAAAA,YAAY,CAAG,GAAIjG,CAAAA,UAAJ,CAAe6C,KAAK,CAACnI,cAAN,CAAqB6I,KAArB,EAA4BtH,KAA5B,CAAkCgG,QAAjD,CAArB,CAEA,MAAOe,CAAAA,MAAM,CAACsC,SAAP,CAAiB,KAAjB,CACNW,YADM,CAEN,QAFM,CAGN,KAHM,CAIN,CAAC,WAAD,CAJM,CAAP,CAKA,CATiB,CASf7C,KAAK,EACPf,OAAO,CAACU,MAAR,CAAeK,KAAf,CAViB,CAAlB,CAYA;AACA;AACAI,eAAe,CAAGA,eAAe,CAACP,IAAhB,CAAqBjG,MAAM,EAC7C,CACC;AACA8I,YAAY,CAAG,8BAAkBjD,KAAK,CAACnI,cAAN,CAAqB6I,KAArB,EAA4BtH,KAA5B,CAAkCmD,sBAAlC,CAAyDpB,WAA3E,CAAf,CACA,GAAI,QAAU8H,CAAAA,YAAX,GAA6B,KAAhC,CACC,MAAOzD,CAAAA,OAAO,CAACU,MAAR,CAAgB,+CAA8CF,KAAK,CAACnI,cAAN,CAAqB6I,KAArB,EAA4BtH,KAA5B,CAAkCmD,sBAAlC,CAAyDpB,WAAY,EAAnI,CAAP,CACD;AAEA;AACA,GAAI8C,CAAAA,iBAAiB,CAAG,OAAxB,CAEA,GAAG,OAASa,CAAAA,YAAZ,CACA,CACC,KAAM5D,CAAAA,SAAS,CAAG,8BAAkB4D,YAAY,CAACG,GAAb,CAAiB9D,WAAnC,CAAlB,CACA,GAAI,QAAUD,CAAAA,SAAX,GAA0B,KAA7B,CACC,MAAOsE,CAAAA,OAAO,CAACU,MAAR,CAAe,uCAAf,CAAP,CAEDjC,iBAAiB,CAAG/C,SAAS,CAAC2D,IAAV,CAAe3F,IAAnC,CACA,CACD;AAEA;AACA,KAAMyF,CAAAA,QAAQ,CAAG,GAAIxB,CAAAA,UAAJ,CAAe2B,YAAY,CAACE,IAAb,CAAkBrF,UAAlB,CAA6B4D,QAA5C,CAAjB,CACA;AAEA;AACA,KAAM8F,CAAAA,UAAU,CAAGvE,YAAY,CAACZ,cAAhC,CACA;AAEA,MAAOiC,CAAAA,MAAM,CAACmD,SAAP,CAAiB,CACvBpK,IAAI,CAAE,QADiB,CAEvB2F,IAAI,CAAE,CACL3F,IAAI,CAAE+E,iBADD,CAFiB,CAKvBe,IAAI,CAAEL,QALiB,CAMvB0E,UANuB,CAAjB,CAQPlJ,MARO,CASP8I,YATO,CAUP,IAVO,CAWP,CAAC,SAAD,CAXO,CAAP,CAWc;AACd,CAzCiB,CAyCf1C,KAAK,EACPf,OAAO,CAACU,MAAR,CAAeK,KAAf,CA1CiB,CAAlB,CA4CA;AACA;AACAI,eAAe,CAAGA,eAAe,CAACP,IAAhB,CAAqBjG,MAAM,EAC5CgG,MAAM,CAACuC,OAAP,CAAe,KAAf,CAAsB7C,UAAtB,CAAkC1F,MAAlC,CAA0C8I,YAA1C,CADiB,CAElB1C,KAAK,EACJf,OAAO,CAACU,MAAR,CAAeK,KAAf,CAHiB,CAAlB,CAKA;AACA;AACAI,eAAe,CAAGA,eAAe,CAACP,IAAhB,CAAqBjG,MAAM,EAC7C,CACC;AACA6F,KAAK,CAACnI,cAAN,CAAqB6I,KAArB,EAA4BtH,KAA5B,CAAkCqD,YAAlC,CAAiD,GAAIzD,CAAAA,MAAM,CAACsE,WAAX,CAAuB,CAAEC,QAAQ,CAAEpD,MAAZ,CAAvB,CAAjD,CACA;AACA,CALiB,CAKfoG,KAAK,EACPf,OAAO,CAACU,MAAR,CAAeK,KAAf,CANiB,CAAlB,CAQA;AAEA,MAAOI,CAAAA,eAAP,CACA,CAED;AAEA;AACApB,QAAQ,CAAGA,QAAQ,CAACa,IAAT,CAAc,IACzB,CACC,IAAI,GAAImD,CAAAA,CAAC,CAAG,CAAZ,CAAeA,CAAC,CAAG,KAAK1L,cAAL,CAAoBa,MAAvC,CAA+C6K,CAAC,EAAhD,CACA,CACC;AACA,GAAI5C,CAAAA,eAAe,CAAGnB,OAAO,CAACC,OAAR,EAAtB,CACA;AAEA,OAAO,KAAK5H,cAAL,CAAoB0L,CAApB,EAAuBxI,OAA9B,EAEC,IAAK,EAAL,CAAQ;AACP4F,eAAe,CAAGoC,wBAAwB,CAACQ,CAAD,CAA1C,CACA,MACD,IAAK,EAAL,CAAQ;AACP5C,eAAe,CAAGF,wBAAwB,CAAC8C,CAAD,CAA1C,CACA,MACD,IAAK,EAAL,CAAQ;AACP5C,eAAe,CAAGqC,mBAAmB,CAACO,CAAD,CAArC,CACA,MACD,IAAK,EAAL,CAAQ;AACP5C,eAAe,CAAGuC,wBAAwB,CAACK,CAAD,CAA1C,CACA,MACD,QACC,MAAO/D,CAAAA,OAAO,CAACU,MAAR,CAAgB,6CAA4CqD,CAAE,EAA9D,CAAP,CAfF,CAkBAxD,kBAAkB,CAACrF,IAAnB,CAAwBiG,eAAxB,EACA,CAED,MAAOnB,CAAAA,OAAO,CAACgE,GAAR,CAAYzD,kBAAZ,CAAP,CACA,CA9BU,CA8BRQ,KAAK,EACPf,OAAO,CAACU,MAAR,CAAeK,KAAf,CA/BU,CAAX,CAiCA;AAEA,MAAOhB,CAAAA,QAAP,CACA,CACD;AACA;;;;;IAMAkE,OAAO,CAACC,cAAD,CAAiBjM,UAAjB,CACP,CACC;AACA,GAAI8H,CAAAA,QAAQ,CAAGC,OAAO,CAACC,OAAR,EAAf,CAEA,KAAMkE,CAAAA,oBAAoB,CAAGlM,UAAU,EAAI,EAA3C,CAEA,KAAMuI,CAAAA,KAAK,CAAG,IAAd,CACA;AAEA;AACA,GAAI0D,cAAc,CAAG,CAAlB,CAAuB,KAAK7L,cAAL,CAAoBa,MAA9C,CACC,MAAO8G,CAAAA,OAAO,CAACU,MAAR,CAAgB,iCAAgC,KAAKrI,cAAL,CAAoBa,MAApB,CAA6B,CAAE,EAA/E,CAAP,CACD;AAEA;AACA,KAAMyH,CAAAA,MAAM,CAAG,uBAAf,CACA,GAAG,MAAOA,CAAAA,MAAP,GAAkB,WAArB,CACC,MAAOX,CAAAA,OAAO,CAACU,MAAR,CAAe,mCAAf,CAAP,CACD;AAEA;AACA,QAASO,CAAAA,wBAAT,CAAkCC,KAAlC,CACA,CACC;AACA,GAAIC,CAAAA,eAAe,CAAGnB,OAAO,CAACC,OAAR,EAAtB,CAEA,GAAIqB,CAAAA,cAAJ,CACA,GAAIC,CAAAA,oBAAJ,CAEA,GAAII,CAAAA,QAAJ,CAEA,GAAIN,CAAAA,cAAJ,CACA;AAEA;AACAF,eAAe,CAAGA,eAAe,CAACP,IAAhB,CAAqB,IACvC,CACC,GAAI,wBAA0BuD,CAAAA,oBAA3B,GAAqD,KAAxD,CACC,MAAOnE,CAAAA,OAAO,CAACU,MAAR,CAAe,+EAAf,CAAP,CAED,GAAI,uBAAyByD,CAAAA,oBAA1B,GAAoD,KAAvD,CACC,MAAOnE,CAAAA,OAAO,CAACU,MAAR,CAAe,8EAAf,CAAP,CAED,KAAMe,CAAAA,WAAW,CAAG0C,oBAAoB,CAACnH,oBAArB,CAA0CvB,oBAA1C,CAA+DC,SAA/D,CAAyEU,eAA7F,CAEA,GAAIqF,WAAW,WAAYjI,CAAAA,MAAM,CAACkI,gBAA/B,GAAqD,KAAxD,CACC,MAAO1B,CAAAA,OAAO,CAACU,MAAR,CAAgB,8CAA6CQ,KAAM,EAAnE,CAAP,CAEDS,QAAQ,CAAGF,WAAW,CAACtH,UAAZ,CAAuByH,QAAvB,EAAX,CAEA,OAAOD,QAAP,EAEC,IAAK,qBAAL,CACCL,cAAc,CAAG,OAAjB,CACAC,oBAAoB,CAAG,GAAvB,CACA,MACD,IAAK,cAAL,CACCD,cAAc,CAAG,OAAjB,CACAC,oBAAoB,CAAG,GAAvB,CACA,MACD,IAAK,cAAL,CACCD,cAAc,CAAG,OAAjB,CACAC,oBAAoB,CAAG,GAAvB,CACA,MACD,QACC,MAAOvB,CAAAA,OAAO,CAACU,MAAR,CAAgB,iCAAgCQ,KAAM,EAAtD,CAAP,CAfF,CAkBA,MAAOP,CAAAA,MAAM,CAACsC,SAAP,CAAiB,OAAjB,CACNkB,oBAAoB,CAACC,mBADf,CAEN,CACC1K,IAAI,CAAE,MADP,CAECmI,UAAU,CAAEP,cAFb,CAFM,CAMN,IANM,CAON,CAAC,YAAD,CAPM,CAAP,CASA,CA1CiB,CA0CfP,KAAK,EACPf,OAAO,CAACU,MAAR,CAAeK,KAAf,CA3CiB,CAAlB,CA6CA;AACA;AACAI,eAAe,CAAGA,eAAe,CAACP,IAAhB,CAAqBjG,MAAM,EAC7C,CACC0G,cAAc,CAAG1G,MAAjB,CAEA;AACA,GAAI,mBAAqB6F,CAAAA,KAAK,CAACnI,cAAN,CAAqB6I,KAArB,EAA4BtH,KAA5B,CAAkCwJ,UAAlC,CAA6CxJ,KAA7C,CAAmD8B,SAAzE,GAAwF,KAA3F,CACC8E,KAAK,CAACnI,cAAN,CAAqB6I,KAArB,EAA4BtH,KAA5B,CAAkCwJ,UAAlC,CAA6CxJ,KAA7C,CAAmD8B,SAAnD,CAA6DU,eAA7D,CAA+E,GAAI5C,CAAAA,MAAM,CAACkI,gBAAX,CAA4B,CAAE9H,KAAK,CAAE+H,QAAT,CAA5B,CAA/E,CACD;AAEA;AACA,KAAM0C,CAAAA,MAAM,CAAG7D,KAAK,CAACnI,cAAN,CAAqB6I,KAArB,EAA4BtH,KAA5B,CAAkCwJ,UAAlC,CAA6CxJ,KAA7C,CAAmDoB,QAAnD,GAA8D+H,KAA9D,CAAoE,KAApE,CAAf,CACA;AAEA,MAAOpC,CAAAA,MAAM,CAACsC,SAAP,CAAiB,MAAjB,CACNoB,MADM,CAEN,CACC3K,IAAI,CAAE,MADP,CAECmI,UAAU,CAAEP,cAFb,CAFM,CAMN,IANM,CAON,EAPM,CAAP,CAQA,CArBiB,CAqBfP,KAAK,EACPf,OAAO,CAACU,MAAR,CAAeK,KAAf,CAtBiB,CAAlB,CAwBA;AACA;AACAI,eAAe,CAAGA,eAAe,CAACP,IAAhB,CAAqBjG,MAAM,EAC5CgG,MAAM,CAACuB,UAAP,CAAkB,CACjBxI,IAAI,CAAE,MADW,CAEjByI,MAAM,CAAExH,MAFS,CAAlB,CAIA0G,cAJA,CAKAE,oBALA,CADiB,CAOlBR,KAAK,EACJf,OAAO,CAACU,MAAR,CAAeK,KAAf,CARiB,CAAlB,CAUA;AACA;AACAI,eAAe,CAAGA,eAAe,CAACP,IAAhB,CACjB;;OAGAjG,MAAM,EACN,CACC;AACA,KAAMyH,CAAAA,cAAc,CAAG,GAAIjG,6BAAJ,CAAwB,CAAE1D,MAAM,CAAE+H,KAAK,CAACnI,cAAN,CAAqB6I,KAArB,EAA4BtH,KAA5B,CAAkCmD,sBAAlC,CAAyDX,eAAnE,CAAxB,CAAvB,CAEA,KAAMiG,CAAAA,WAAW,CAAG,8BAAkBD,cAAc,CAACzG,WAAjC,CAApB,CACA,GAAI,QAAU0G,CAAAA,WAAX,GAA4B,KAA/B,CACC,MAAOrC,CAAAA,OAAO,CAACU,MAAR,CAAgB,+CAA8C0B,cAAc,CAACzG,WAAY,EAAzF,CAAP,CACA;AAEA;AACD,GAAI2G,CAAAA,QAAQ,CAAGD,WAAW,CAACnJ,MAA3B,CAEA,KAAMqJ,CAAAA,cAAc,CAAG,GAAI9E,CAAAA,WAAJ,CAAgB,CAAhB,CAAvB,CACA,KAAM+E,CAAAA,YAAY,CAAG,GAAI7E,CAAAA,UAAJ,CAAe4E,cAAf,CAArB,CAEA,IAAI,GAAIE,CAAAA,CAAC,CAAG,CAAZ,CAAeA,CAAC,EAAI,CAApB,CAAuBA,CAAC,EAAxB,CACA,CACCD,YAAY,CAACC,CAAD,CAAZ,CAAkBH,QAAlB,CACAA,QAAQ,GAAK,CAAb,CACA,CACD;AAEA;AACA,KAAMI,CAAAA,OAAO,CAAG,GAAIC,0BAAJ,CAAqB,CACpClG,OAAO,CAAE,GAAIN,6BAAJ,CAAwB,CAChCR,WAAW,CAAEyG,cAAc,CAACzG,WADI,CAEhC;;;;UAKAS,eAAe,CAAE,GAAI5C,CAAAA,MAAM,CAAC6C,IAAX,EAPe,CAAxB,CAD2B,CAUpCuG,WAAW,CAAEpC,KAAK,CAACnI,cAAN,CAAqB6I,KAArB,EAA4BtH,KAA5B,CAAkCiE,GAVX,CAWpCgF,WAAW,CAAE,GAAIrJ,CAAAA,MAAM,CAACsE,WAAX,CAAuB,CAAEC,QAAQ,CAAEwE,cAAZ,CAAvB,CAXuB,CAArB,CAAhB,CAcA,KAAMO,CAAAA,WAAW,CAAGJ,OAAO,CAAC1H,QAAR,GAAmB+H,KAAnB,CAAyB,KAAzB,CAApB,CACA;AAEA;AACA,KAAMC,CAAAA,aAAa,CAAG,8BAAkBxC,KAAK,CAACnI,cAAN,CAAqB6I,KAArB,EAA4BtH,KAA5B,CAAkCmD,sBAAlC,CAAyDpB,WAA3E,CAAtB,CACA,GAAI,QAAUqH,CAAAA,aAAX,GAA8B,KAAjC,CACC,MAAOhD,CAAAA,OAAO,CAACU,MAAR,CAAgB,+CAA8CF,KAAK,CAACnI,cAAN,CAAqB6I,KAArB,EAA4BtH,KAA5B,CAAkCmD,sBAAlC,CAAyDpB,WAAY,EAAnI,CAAP,CACA;AAED,MAAO,gBAAIqH,aAAa,CAACzF,GAAlB,CAAuB5C,MAAvB,CAA+B0H,WAAW,CAACnJ,MAA3C,CAAmD4J,WAAnD,CAAP,CACA,CApDgB,CAqDjB/B,KAAK,EACJf,OAAO,CAACU,MAAR,CAAeK,KAAf,CAtDgB,CAAlB,CAwDA;AACA;AACAI,eAAe,CAAGA,eAAe,CAACP,IAAhB,CAAqBjG,MAAM,EAC5CgG,MAAM,CAACsC,SAAP,CAAiB,KAAjB,CACCtI,MADD,CAEC,CAAEjB,IAAI,CAAE,QAAR,CAFD,CAGC,IAHD,CAIC,CAAC,WAAD,CAJD,CADiB,CAMlBqH,KAAK,EAAIf,OAAO,CAACU,MAAR,CAAeK,KAAf,CANS,CAAlB,CAQA;AACA;AACAI,eAAe,CAAGA,eAAe,CAACP,IAAhB,CAAqBjG,MAAM,EAC7C,CACC;AACA,KAAMtB,CAAAA,0BAA0B,CAAG,8BAAkBmH,KAAK,CAAClI,oBAAN,CAA2Be,0BAA3B,CAAsDsC,WAAxE,CAAnC,CACA,GAAI,QAAUtC,CAAAA,0BAAX,GAA2C,KAA9C,CACC,MAAO2G,CAAAA,OAAO,CAACU,MAAR,CAAgB,2CAA0CF,KAAK,CAAClI,oBAAN,CAA2Be,0BAA3B,CAAsDsC,WAAY,EAA5H,CAAP,CACA;AAED,MAAOgF,CAAAA,MAAM,CAAC2D,SAAP,CAAiB,KAAjB,CACN9D,KAAK,CAACnI,cAAN,CAAqB6I,KAArB,EAA4BtH,KAA5B,CAAkCoE,sBAAlC,CAAyDE,aAAzD,CAAuE,CAAvE,EAA0EjB,YAA1E,CAAuF9C,UAAvF,CAAkG4D,QAD5F,CAENpD,MAFM,CAGN,CAAEjB,IAAI,CAAE,QAAR,CAHM,CAINL,0BAJM,CAKN,IALM,CAMN,CAAC,SAAD,CANM,CAAP,CAOA,CAfiB,CAef0H,KAAK,EACPf,OAAO,CAACU,MAAR,CAAeK,KAAf,CAhBiB,CAAlB,CAkBA;AAEA,MAAOI,CAAAA,eAAP,CACA,CAED,QAASoC,CAAAA,wBAAT,CAAkCrC,KAAlC,CACA,CACC;AACA,GAAIC,CAAAA,eAAe,CAAGnB,OAAO,CAACC,OAAR,EAAtB,CACA;AAEA;AACAkB,eAAe,CAAGA,eAAe,CAACP,IAAhB,CAAqB,IACvC,CACC,GAAI,uBAAyBuD,CAAAA,oBAA1B,GAAoD,KAAvD,CACC,MAAOnE,CAAAA,OAAO,CAACU,MAAR,CAAe,8EAAf,CAAP,CAED;AACA,KAAMjI,CAAAA,MAAM,CAAG+H,KAAK,CAACnI,cAAN,CAAqB6I,KAArB,EAA4BtH,KAA5B,CAAkCmD,sBAAlC,CAAyDX,eAAxE,CACA,KAAME,CAAAA,aAAa,CAAG,GAAIC,yBAAJ,CAAoB,CAAE9D,MAAF,CAApB,CAAtB,CAEA,KAAMyD,CAAAA,aAAa,CAAG,8BAAkBI,aAAa,CAACJ,aAAd,CAA4BP,WAA9C,CAAtB,CACA,GAAI,QAAUO,CAAAA,aAAX,GAA8B,KAAjC,CACC,MAAO8D,CAAAA,OAAO,CAACU,MAAR,CAAgB,qCAAoCpE,aAAa,CAACJ,aAAd,CAA4BP,WAAY,EAA5F,CAAP,CACD;AAEA,MAAOgF,CAAAA,MAAM,CAACsC,SAAP,CAAiB,OAAjB,CACNkB,oBAAoB,CAACC,mBADf,CAEN,CACC1K,IAAI,CAAE,UADP,CAEC2F,IAAI,CAAE,CACL3F,IAAI,CAAEwC,aAAa,CAACxC,IADf,CAFP,CAFM,CAQN,IARM,CASN,CAAC,SAAD,CATM,CAAP,CAUA,CAxBiB,CAwBfqH,KAAK,EACPf,OAAO,CAACU,MAAR,CAAeK,KAAf,CAzBiB,CAAlB,CA2BA;AACA;AACAI,eAAe,CAAGA,eAAe,CAACP,IAAhB,CAAqBjG,MAAM,EAC5CgG,MAAM,CAACsD,OAAP,CAAetJ,MAAM,CAACe,SAAtB,CACCf,MADD,CAEC6F,KAAK,CAACnI,cAAN,CAAqB6I,KAArB,EAA4BtH,KAA5B,CAAkCqD,YAAlC,CAA+C9C,UAA/C,CAA0D4D,QAF3D,CADiB,CAIdgD,KAAK,EACRf,OAAO,CAACU,MAAR,CAAeK,KAAf,CALiB,CAAlB,CAOA;AACA;AACAI,eAAe,CAAGA,eAAe,CAACP,IAAhB,CAAqBjG,MAAM,EAC7C,CACC;AACA,KAAMtB,CAAAA,0BAA0B,CAAG,8BAAkBmH,KAAK,CAAClI,oBAAN,CAA2Be,0BAA3B,CAAsDsC,WAAxE,CAAnC,CACA,GAAI,QAAUtC,CAAAA,0BAAX,GAA2C,KAA9C,CACC,MAAO2G,CAAAA,OAAO,CAACU,MAAR,CAAgB,2CAA0CF,KAAK,CAAClI,oBAAN,CAA2Be,0BAA3B,CAAsDsC,WAAY,EAA5H,CAAP,CACD;AAEA,MAAOgF,CAAAA,MAAM,CAACsC,SAAP,CAAiB,KAAjB,CACNtI,MADM,CAENtB,0BAFM,CAGN,IAHM,CAIN,CAAC,SAAD,CAJM,CAAP,CAMA,CAdiB,CAcf0H,KAAK,EACPf,OAAO,CAACU,MAAR,CAAeK,KAAf,CAfiB,CAAlB,CAiBA;AAEA,MAAOI,CAAAA,eAAP,CACA,CAED,QAASqC,CAAAA,mBAAT,CAA6BtC,KAA7B,CACA,CACC;AACA,GAAIC,CAAAA,eAAe,CAAGnB,OAAO,CAACC,OAAR,EAAtB,CACA,GAAIwD,CAAAA,YAAJ,CACA;AAEA;AACAtC,eAAe,CAAGA,eAAe,CAACP,IAAhB,CAAqB,IACvC,CACC,GAAI,kBAAoBuD,CAAAA,oBAArB,GAA+C,KAAlD,CACC,MAAOnE,CAAAA,OAAO,CAACU,MAAR,CAAe,oEAAf,CAAP,CAED;AACA+C,YAAY,CAAG,8BAAkBjD,KAAK,CAACnI,cAAN,CAAqB6I,KAArB,EAA4BtH,KAA5B,CAAkCmD,sBAAlC,CAAyDpB,WAA3E,CAAf,CACA,GAAI,QAAU8H,CAAAA,YAAX,GAA6B,KAAhC,CACC,MAAOzD,CAAAA,OAAO,CAACU,MAAR,CAAgB,+CAA8CF,KAAK,CAACnI,cAAN,CAAqB6I,KAArB,EAA4BtH,KAA5B,CAAkCmD,sBAAlC,CAAyDpB,WAAY,EAAnI,CAAP,CACD;AAEA,MAAOgF,CAAAA,MAAM,CAACsC,SAAP,CAAiB,KAAjB,CACNkB,oBAAoB,CAAC/F,cADf,CAENqF,YAFM,CAGN,IAHM,CAIN,CAAC,WAAD,CAJM,CAAP,CAIiB;AACjB,CAhBiB,CAgBf1C,KAAK,EACPf,OAAO,CAACU,MAAR,CAAeK,KAAf,CAjBiB,CAAlB,CAmBA;AACA;AACAI,eAAe,CAAGA,eAAe,CAACP,IAAhB,CAAqBjG,MAAM,EAC7C,CACC;AACA,KAAMtB,CAAAA,0BAA0B,CAAG,8BAAkBmH,KAAK,CAAClI,oBAAN,CAA2Be,0BAA3B,CAAsDsC,WAAxE,CAAnC,CACA,GAAI,QAAUtC,CAAAA,0BAAX,GAA2C,KAA9C,CACC,MAAO2G,CAAAA,OAAO,CAACU,MAAR,CAAgB,2CAA0CF,KAAK,CAAClI,oBAAN,CAA2Be,0BAA3B,CAAsDsC,WAAY,EAA5H,CAAP,CACD;AAEA,MAAOgF,CAAAA,MAAM,CAAC2D,SAAP,CAAiB,KAAjB,CACN9D,KAAK,CAACnI,cAAN,CAAqB6I,KAArB,EAA4BtH,KAA5B,CAAkCqD,YAAlC,CAA+C9C,UAA/C,CAA0D4D,QADpD,CAENpD,MAFM,CAGN8I,YAHM,CAINpK,0BAJM,CAKN,IALM,CAMN,CAAC,SAAD,CANM,CAAP,CAOA,CAfiB,CAef0H,KAAK,EACPf,OAAO,CAACU,MAAR,CAAeK,KAAf,CAhBiB,CAAlB,CAkBA;AAEA,MAAOI,CAAAA,eAAP,CACA,CAED,QAASuC,CAAAA,wBAAT,CAAkCxC,KAAlC,CACA,CACC;AACA,GAAIC,CAAAA,eAAe,CAAGnB,OAAO,CAACC,OAAR,EAAtB,CACA,GAAIX,CAAAA,YAAJ,CACA,GAAImE,CAAAA,YAAJ,CACA;AAEA;AACAtC,eAAe,CAAGA,eAAe,CAACP,IAAhB,CAAqB,IACvC,CACC,GAAI,kBAAoBuD,CAAAA,oBAArB,GAA+C,KAAlD,CACC,MAAOnE,CAAAA,OAAO,CAACU,MAAR,CAAe,oEAAf,CAAP,CAED,GAAI,0BAA4BF,CAAAA,KAAK,CAACnI,cAAN,CAAqB6I,KAArB,EAA4BtH,KAAzD,GAAoE,KAAvE,CACC,MAAOoG,CAAAA,OAAO,CAACU,MAAR,CAAe,kDAAf,CAAP,CAED,GAAI,mBAAqBF,CAAAA,KAAK,CAACnI,cAAN,CAAqB6I,KAArB,EAA4BtH,KAA5B,CAAkC+F,sBAAxD,GAAoF,KAAvF,CACC,MAAOK,CAAAA,OAAO,CAACU,MAAR,CAAe,gDAAf,CAAP,CAED,GACA,CACCpB,YAAY,CAAG,GAAIC,sBAAJ,CAAiB,CAAE9G,MAAM,CAAE+H,KAAK,CAACnI,cAAN,CAAqB6I,KAArB,EAA4BtH,KAA5B,CAAkC+F,sBAAlC,CAAyDvD,eAAnE,CAAjB,CAAf,CACA,CACD,MAAMuH,EAAN,CACA,CACC,MAAO3D,CAAAA,OAAO,CAACU,MAAR,CAAe,gDAAf,CAAP,CACA,CAED,MAAOC,CAAAA,MAAM,CAACsC,SAAP,CAAiB,KAAjB,CACNkB,oBAAoB,CAAC/F,cADf,CAEN,QAFM,CAGN,KAHM,CAIN,CAAC,WAAD,CAJM,CAAP,CAKA,CAzBiB,CAyBf2C,KAAK,EACPf,OAAO,CAACU,MAAR,CAAeK,KAAf,CA1BiB,CAAlB,CA4BA;AACA;AACAI,eAAe,CAAGA,eAAe,CAACP,IAAhB,CAAqBjG,MAAM,EAC7C,CACC;AACA8I,YAAY,CAAG,8BAAkBjD,KAAK,CAACnI,cAAN,CAAqB6I,KAArB,EAA4BtH,KAA5B,CAAkCmD,sBAAlC,CAAyDpB,WAA3E,CAAf,CACA,GAAI,QAAU8H,CAAAA,YAAX,GAA6B,KAAhC,CACC,MAAOzD,CAAAA,OAAO,CAACU,MAAR,CAAgB,+CAA8CF,KAAK,CAACnI,cAAN,CAAqB6I,KAArB,EAA4BtH,KAA5B,CAAkCmD,sBAAlC,CAAyDpB,WAAY,EAAnI,CAAP,CACD;AAEA;AACA,GAAI8C,CAAAA,iBAAiB,CAAG,OAAxB,CAEA,GAAG,OAASa,CAAAA,YAAZ,CACA,CACC,KAAM5D,CAAAA,SAAS,CAAG,8BAAkB4D,YAAY,CAACG,GAAb,CAAiB9D,WAAnC,CAAlB,CACA,GAAI,QAAUD,CAAAA,SAAX,GAA0B,KAA7B,CACC,MAAOsE,CAAAA,OAAO,CAACU,MAAR,CAAe,uCAAf,CAAP,CAEDjC,iBAAiB,CAAG/C,SAAS,CAAC2D,IAAV,CAAe3F,IAAnC,CACA,CACD;AAEA;AACA,KAAMyF,CAAAA,QAAQ,CAAG,GAAIxB,CAAAA,UAAJ,CAAe2B,YAAY,CAACE,IAAb,CAAkBrF,UAAlB,CAA6B4D,QAA5C,CAAjB,CACA;AAEA;AACA,KAAM8F,CAAAA,UAAU,CAAGvE,YAAY,CAACZ,cAAhC,CACA;AAEA,MAAOiC,CAAAA,MAAM,CAACmD,SAAP,CAAiB,CACvBpK,IAAI,CAAE,QADiB,CAEvB2F,IAAI,CAAE,CACL3F,IAAI,CAAE+E,iBADD,CAFiB,CAKvBe,IAAI,CAAEL,QALiB,CAMvB0E,UANuB,CAAjB,CAQPlJ,MARO,CASP8I,YATO,CAUP,IAVO,CAWP,CAAC,WAAD,CAXO,CAAP,CAWgB;AAChB,CAzCiB,CAyCf1C,KAAK,EACPf,OAAO,CAACU,MAAR,CAAeK,KAAf,CA1CiB,CAAlB,CA4CA;AACA;AACAI,eAAe,CAAGA,eAAe,CAACP,IAAhB,CAAqBjG,MAAM,EAC7C,CACC;AACA,KAAMtB,CAAAA,0BAA0B,CAAG,8BAAkBmH,KAAK,CAAClI,oBAAN,CAA2Be,0BAA3B,CAAsDsC,WAAxE,CAAnC,CACA,GAAI,QAAUtC,CAAAA,0BAAX,GAA2C,KAA9C,CACC,MAAO2G,CAAAA,OAAO,CAACU,MAAR,CAAgB,2CAA0CF,KAAK,CAAClI,oBAAN,CAA2Be,0BAA3B,CAAsDsC,WAAY,EAA5H,CAAP,CACA;AAED,MAAOgF,CAAAA,MAAM,CAAC2D,SAAP,CAAiB,KAAjB,CACN9D,KAAK,CAACnI,cAAN,CAAqB6I,KAArB,EAA4BtH,KAA5B,CAAkCqD,YAAlC,CAA+C9C,UAA/C,CAA0D4D,QADpD,CAENpD,MAFM,CAGN8I,YAHM,CAINpK,0BAJM,CAKN,IALM,CAMN,CAAC,SAAD,CANM,CAAP,CAOA,CAfiB,CAef0H,KAAK,EACPf,OAAO,CAACU,MAAR,CAAeK,KAAf,CAhBiB,CAAlB,CAkBA;AAEA,MAAOI,CAAAA,eAAP,CACA,CAED;AAEA;AACApB,QAAQ,CAAGA,QAAQ,CAACa,IAAT,CAAc,IACzB,CACC;AACA,GAAIO,CAAAA,eAAe,CAAGnB,OAAO,CAACC,OAAR,EAAtB,CACA;AAEA,OAAO,KAAK5H,cAAL,CAAoB6L,cAApB,EAAoC3I,OAA3C,EAEC,IAAK,EAAL,CAAQ;AACP4F,eAAe,CAAGoC,wBAAwB,CAACW,cAAD,CAA1C,CACA,MACD,IAAK,EAAL,CAAQ;AACP/C,eAAe,CAAGF,wBAAwB,CAACiD,cAAD,CAA1C,CACA,MACD,IAAK,EAAL,CAAQ;AACP/C,eAAe,CAAGqC,mBAAmB,CAACU,cAAD,CAArC,CACA,MACD,IAAK,EAAL,CAAQ;AACP/C,eAAe,CAAGuC,wBAAwB,CAACQ,cAAD,CAA1C,CACA,MACD,QACC,MAAOlE,CAAAA,OAAO,CAACU,MAAR,CAAgB,6CAA4CwD,cAAe,EAA3E,CAAP,CAfF,CAkBA,MAAO/C,CAAAA,eAAP,CACA,CAzBU,CAyBRJ,KAAK,EACPf,OAAO,CAACU,MAAR,CAAeK,KAAf,CA1BU,CAAX,CA4BA;AAEA;AACAhB,QAAQ,CAAGA,QAAQ,CAACa,IAAT,CAAcjG,MAAM,EAC/B,CACC;AACA,KAAMtB,CAAAA,0BAA0B,CAAG,8BAAkB,KAAKf,oBAAL,CAA0Be,0BAA1B,CAAqDsC,WAAvE,CAAnC,CACA,GAAI,QAAUtC,CAAAA,0BAAX,GAA2C,KAA9C,CACC,MAAO2G,CAAAA,OAAO,CAACU,MAAR,CAAgB,2CAA0C,KAAKpI,oBAAL,CAA0Be,0BAA1B,CAAqDsC,WAAY,EAA3H,CAAP,CACD;AAEA;AACA,KAAMuE,CAAAA,QAAQ,CAAG,KAAK5H,oBAAL,CAA0Be,0BAA1B,CAAqD+C,eAArD,CAAqEjC,UAArE,CAAgF4D,QAAjG,CACA,KAAMoC,CAAAA,MAAM,CAAG,GAAIxC,CAAAA,UAAJ,CAAeuC,QAAf,CAAf,CACA;AAEA;AACA,GAAIqE,CAAAA,UAAU,CAAG,GAAI9G,CAAAA,WAAJ,CAAgB,CAAhB,CAAjB,CAEA,GAAG,KAAKnF,oBAAL,CAA0BgB,gBAA1B,CAA2CU,OAA3C,CAAmDwK,aAAnD,GAAqE,KAAxE,CACCD,UAAU,CAAG,KAAKjM,oBAAL,CAA0BgB,gBAA1B,CAA2Ca,UAA3C,CAAsD4D,QAAnE,CADD,IAGA,iGACC,kBAAqB,KAAKzF,oBAAL,CAA0BgB,gBAA1B,CAA2Ca,UAA3C,CAAsDP,KAA3E,0HAAU6K,CAAAA,OAAV,aACCF,UAAU,CAAG,2BAAcA,UAAd,CAA0BE,OAAO,CAACtK,UAAR,CAAmB4D,QAA7C,CAAb,CADD,CADD,qMAGC,CACD;AAEA,MAAO4C,CAAAA,MAAM,CAACsD,OAAP,CAAe,CACrBvK,IAAI,CAAEL,0BAA0B,CAACK,IADZ,CAErBoH,EAAE,CAAEX,MAFiB,CAAf,CAIPxF,MAJO,CAKP4J,UALO,CAAP,CAMA,CA/BU,CA+BRxD,KAAK,EACPf,OAAO,CAACU,MAAR,CAAeK,KAAf,CAhCU,CAAX,CAkCA;AAEA,MAAOhB,CAAAA,QAAP,CACA,CACD;AAtpDD,CAwpDA","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, utilConcatBuf, clearProps } from \"pvutils\";\r\nimport { getOIDByAlgorithm, getRandomValues, getCrypto, getAlgorithmByOID, kdf } from \"./common.js\";\r\nimport OriginatorInfo from \"./OriginatorInfo.js\";\r\nimport RecipientInfo from \"./RecipientInfo.js\";\r\nimport EncryptedContentInfo from \"./EncryptedContentInfo.js\";\r\nimport Attribute from \"./Attribute.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport RSAESOAEPParams from \"./RSAESOAEPParams.js\";\r\nimport KeyTransRecipientInfo from \"./KeyTransRecipientInfo.js\";\r\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\";\r\nimport RecipientEncryptedKey from \"./RecipientEncryptedKey.js\";\r\nimport KeyAgreeRecipientIdentifier from \"./KeyAgreeRecipientIdentifier.js\";\r\nimport KeyAgreeRecipientInfo from \"./KeyAgreeRecipientInfo.js\";\r\nimport RecipientEncryptedKeys from \"./RecipientEncryptedKeys.js\";\r\nimport KEKRecipientInfo from \"./KEKRecipientInfo.js\";\r\nimport KEKIdentifier from \"./KEKIdentifier.js\";\r\nimport PBKDF2Params from \"./PBKDF2Params.js\";\r\nimport PasswordRecipientinfo from \"./PasswordRecipientinfo.js\";\r\nimport ECCCMSSharedInfo from \"./ECCCMSSharedInfo.js\";\r\nimport OriginatorIdentifierOrKey from \"./OriginatorIdentifierOrKey.js\";\r\nimport OriginatorPublicKey from \"./OriginatorPublicKey.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class EnvelopedData \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for EnvelopedData class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", EnvelopedData.defaultValues(\"version\"));\r\n\t\t\r\n\t\tif(\"originatorInfo\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {OriginatorInfo}\r\n\t\t\t * @desc originatorInfo\r\n\t\t\t */\r\n\t\t\tthis.originatorInfo = getParametersValue(parameters, \"originatorInfo\", EnvelopedData.defaultValues(\"originatorInfo\"));\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Array.<RecipientInfo>}\r\n\t\t * @desc recipientInfos\r\n\t\t */\r\n\t\tthis.recipientInfos = getParametersValue(parameters, \"recipientInfos\", EnvelopedData.defaultValues(\"recipientInfos\"));\r\n\t\t/**\r\n\t\t * @type {EncryptedContentInfo}\r\n\t\t * @desc encryptedContentInfo\r\n\t\t */\r\n\t\tthis.encryptedContentInfo = getParametersValue(parameters, \"encryptedContentInfo\", EnvelopedData.defaultValues(\"encryptedContentInfo\"));\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Attribute>}\r\n\t\t\t * @desc unprotectedAttrs\r\n\t\t\t */\r\n\t\t\tthis.unprotectedAttrs = getParametersValue(parameters, \"unprotectedAttrs\", EnvelopedData.defaultValues(\"unprotectedAttrs\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"originatorInfo\":\r\n\t\t\t\treturn new OriginatorInfo();\r\n\t\t\tcase \"recipientInfos\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"encryptedContentInfo\":\r\n\t\t\t\treturn new EncryptedContentInfo();\r\n\t\t\tcase \"unprotectedAttrs\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EnvelopedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === EnvelopedData.defaultValues(memberName));\r\n\t\t\tcase \"originatorInfo\":\r\n\t\t\t\treturn ((memberValue.certs.certificates.length === 0) && (memberValue.crls.crls.length === 0));\r\n\t\t\tcase \"recipientInfos\":\r\n\t\t\tcase \"unprotectedAttrs\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tcase \"encryptedContentInfo\":\r\n\t\t\t\treturn ((EncryptedContentInfo.compareWithDefault(\"contentType\", memberValue.contentType)) &&\r\n\t\t\t\t(EncryptedContentInfo.compareWithDefault(\"contentEncryptionAlgorithm\", memberValue.contentEncryptionAlgorithm) &&\r\n\t\t\t\t(EncryptedContentInfo.compareWithDefault(\"encryptedContent\", memberValue.encryptedContent))));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EnvelopedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * EnvelopedData ::= SEQUENCE {\r\n\t *    version CMSVersion,\r\n\t *    originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,\r\n\t *    recipientInfos RecipientInfos,\r\n\t *    encryptedContentInfo EncryptedContentInfo,\r\n\t *    unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [originatorInfo]\r\n\t\t * @property {string} [recipientInfos]\r\n\t\t * @property {string} [encryptedContentInfo]\r\n\t\t * @property {string} [unprotectedAttrs]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tname: (names.originatorInfo || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: OriginatorInfo.schema().valueBlock.value\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Set({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.recipientInfos || \"\"),\r\n\t\t\t\t\t\t\tvalue: RecipientInfo.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tEncryptedContentInfo.schema(names.encryptedContentInfo || {}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.unprotectedAttrs || \"\"),\r\n\t\t\t\t\t\t\tvalue: Attribute.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"originatorInfo\",\r\n\t\t\t\"recipientInfos\",\r\n\t\t\t\"encryptedContentInfo\",\r\n\t\t\t\"unprotectedAttrs\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tEnvelopedData.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\toriginatorInfo: \"originatorInfo\",\r\n\t\t\t\t\trecipientInfos: \"recipientInfos\",\r\n\t\t\t\t\tencryptedContentInfo: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"encryptedContentInfo\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tunprotectedAttrs: \"unprotectedAttrs\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for EnvelopedData\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\t\r\n\t\tif(\"originatorInfo\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.originatorInfo = new OriginatorInfo({\r\n\t\t\t\tschema: new asn1js.Sequence({\r\n\t\t\t\t\tvalue: asn1.result.originatorInfo.valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tthis.recipientInfos = Array.from(asn1.result.recipientInfos, element => new RecipientInfo({ schema: element }));\r\n\t\tthis.encryptedContentInfo = new EncryptedContentInfo({ schema: asn1.result.encryptedContentInfo });\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in asn1.result)\r\n\t\t\tthis.unprotectedAttrs = Array.from(asn1.result.unprotectedAttrs, element => new Attribute({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\t\r\n\t\tif(\"originatorInfo\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.originatorInfo.toSchema().valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\toutputArray.push(new asn1js.Set({\r\n\t\t\tvalue: Array.from(this.recipientInfos, element => element.toSchema())\r\n\t\t}));\r\n\t\t\r\n\t\toutputArray.push(this.encryptedContentInfo.toSchema());\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.unprotectedAttrs, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version\r\n\t\t};\r\n\t\t\r\n\t\tif(\"originatorInfo\" in this)\r\n\t\t\t_object.originatorInfo = this.originatorInfo.toJSON();\r\n\t\t\r\n\t\t_object.recipientInfos = Array.from(this.recipientInfos, element => element.toJSON());\r\n\t\t_object.encryptedContentInfo = this.encryptedContentInfo.toJSON();\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in this)\r\n\t\t\t_object.unprotectedAttrs = Array.from(this.unprotectedAttrs, element => element.toJSON());\r\n\t\t\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Helpers function for filling \"RecipientInfo\" based on recipient's certificate.\r\n\t * Problem with WebCrypto is that for RSA certificates we have only one option - \"key transport\" and\r\n\t * for ECC certificates we also have one option - \"key agreement\". As soon as Google will implement\r\n\t * DH algorithm it would be possible to use \"key agreement\" also for RSA certificates.\r\n\t * @param {Certificate} [certificate] Recipient's certificate\r\n\t * @param {Object} [parameters] Additional parameters neccessary for \"fine tunning\" of encryption process\r\n\t * @param {number} [variant] Variant = 1 is for \"key transport\", variant = 2 is for \"key agreement\". In fact the \"variant\" is unneccessary now because Google has no DH algorithm implementation. Thus key encryption scheme would be choosen by certificate type only: \"key transport\" for RSA and \"key agreement\" for ECC certificates.\r\n\t */\r\n\taddRecipientByCertificate(certificate, parameters, variant)\r\n\t{\r\n\t\t//region Initial variables \r\n\t\tconst encryptionParameters = parameters || {};\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Check type of certificate\r\n\t\tif(certificate.subjectPublicKeyInfo.algorithm.algorithmId.indexOf(\"1.2.840.113549\") !== (-1))\r\n\t\t\tvariant = 1; // For the moment it is the only variant for RSA-based certificates\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(certificate.subjectPublicKeyInfo.algorithm.algorithmId.indexOf(\"1.2.840.10045\") !== (-1))\r\n\t\t\t\tvariant = 2; // For the moment it is the only variant for ECC-based certificates\r\n\t\t\telse\r\n\t\t\t\tthrow new Error(`Unknown type of certificate's public key: ${certificate.subjectPublicKeyInfo.algorithm.algorithmId}`);\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initialize encryption parameters \r\n\t\tif((\"oaepHashAlgorithm\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.oaepHashAlgorithm = \"SHA-512\";\r\n\t\t\r\n\t\tif((\"kdfAlgorithm\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.kdfAlgorithm = \"SHA-512\";\r\n\t\t\r\n\t\tif((\"kekEncryptionLength\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.kekEncryptionLength = 256;\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Add new \"recipient\" depends on \"variant\" and certificate type \r\n\t\tswitch(variant)\r\n\t\t{\r\n\t\t\tcase 1: // Key transport scheme\r\n\t\t\t\t{\r\n\t\t\t\t\t//region keyEncryptionAlgorithm\r\n\t\t\t\t\tconst oaepOID = getOIDByAlgorithm({\r\n\t\t\t\t\t\tname: \"RSA-OAEP\"\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(oaepOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(\"Can not find OID for OAEP\");\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region RSAES-OAEP-params\r\n\t\t\t\t\tconst hashOID = getOIDByAlgorithm({\r\n\t\t\t\t\t\tname: encryptionParameters.oaepHashAlgorithm\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(hashOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(`Unknown OAEP hash algorithm: ${encryptionParameters.oaepHashAlgorithm}`);\r\n\t\t\t\t\r\n\t\t\t\t\tconst hashAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: hashOID,\r\n\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\t\tconst rsaOAEPParams = new RSAESOAEPParams({\r\n\t\t\t\t\t\thashAlgorithm,\r\n\t\t\t\t\t\tmaskGenAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.8\", // id-mgf1\r\n\t\t\t\t\t\t\talgorithmParams: hashAlgorithm.toSchema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region KeyTransRecipientInfo\r\n\t\t\t\t\tconst keyInfo = new KeyTransRecipientInfo({\r\n\t\t\t\t\t\tversion: 0,\r\n\t\t\t\t\t\trid: new IssuerAndSerialNumber({\r\n\t\t\t\t\t\t\tissuer: certificate.issuer,\r\n\t\t\t\t\t\t\tserialNumber: certificate.serialNumber\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tkeyEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: oaepOID,\r\n\t\t\t\t\t\t\talgorithmParams: rsaOAEPParams.toSchema()\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\trecipientCertificate: certificate\r\n\t\t\t\t\t\t// \"encryptedKey\" will be calculated in \"encrypt\" function\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Final values for \"CMS_ENVELOPED_DATA\"\r\n\t\t\t\t\tthis.recipientInfos.push(new RecipientInfo({\r\n\t\t\t\t\t\tvariant: 1,\r\n\t\t\t\t\t\tvalue: keyInfo\r\n\t\t\t\t\t}));\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2: // Key agreement scheme\r\n\t\t\t\t{\r\n\t\t\t\t\t//region RecipientEncryptedKey\r\n\t\t\t\t\tconst encryptedKey = new RecipientEncryptedKey({\r\n\t\t\t\t\t\trid: new KeyAgreeRecipientIdentifier({\r\n\t\t\t\t\t\t\tvariant: 1,\r\n\t\t\t\t\t\t\tvalue: new IssuerAndSerialNumber({\r\n\t\t\t\t\t\t\t\tissuer: certificate.issuer,\r\n\t\t\t\t\t\t\t\tserialNumber: certificate.serialNumber\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t// \"encryptedKey\" will be calculated in \"encrypt\" function\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region keyEncryptionAlgorithm\r\n\t\t\t\t\tconst aesKWoid = getOIDByAlgorithm({\r\n\t\t\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\t\t\tlength: encryptionParameters.kekEncryptionLength\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(aesKWoid === \"\")\r\n\t\t\t\t\t\tthrow new Error(`Unknown length for key encryption algorithm: ${encryptionParameters.kekEncryptionLength}`);\r\n\t\t\t\t\r\n\t\t\t\t\tconst aesKW = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: aesKWoid,\r\n\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region KeyAgreeRecipientInfo\r\n\t\t\t\t\tconst ecdhOID = getOIDByAlgorithm({\r\n\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\tkdf: encryptionParameters.kdfAlgorithm\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(ecdhOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(`Unknown KDF algorithm: ${encryptionParameters.kdfAlgorithm}`);\r\n\t\t\t\t\r\n\t\t\t\t\t// In fact there is no need in so long UKM, but RFC2631\r\n\t\t\t\t\t// has requirement that \"UserKeyMaterial\" must be 512 bits long\r\n\t\t\t\t\tconst ukmBuffer = new ArrayBuffer(64);\r\n\t\t\t\t\tconst ukmView = new Uint8Array(ukmBuffer);\r\n\t\t\t\t\tgetRandomValues(ukmView); // Generate random values in 64 bytes long buffer\r\n\t\t\t\t\r\n\t\t\t\t\tconst keyInfo = new KeyAgreeRecipientInfo({\r\n\t\t\t\t\t\tversion: 3,\r\n\t\t\t\t\t\t// \"originator\" will be calculated in \"encrypt\" function because ephemeral key would be generated there\r\n\t\t\t\t\t\tukm: new asn1js.OctetString({ valueHex: ukmBuffer }),\r\n\t\t\t\t\t\tkeyEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: ecdhOID,\r\n\t\t\t\t\t\t\talgorithmParams: aesKW.toSchema()\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\trecipientEncryptedKeys: new RecipientEncryptedKeys({\r\n\t\t\t\t\t\t\tencryptedKeys: [encryptedKey]\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\trecipientCertificate: certificate\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Final values for \"CMS_ENVELOPED_DATA\"\r\n\t\t\t\t\tthis.recipientInfos.push(new RecipientInfo({\r\n\t\t\t\t\t\tvariant: 2,\r\n\t\t\t\t\t\tvalue: keyInfo\r\n\t\t\t\t\t}));\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Unknown \"variant\" value: ${variant}`);\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Add recipient based on pre-defined data like password or KEK\r\n\t * @param {ArrayBuffer} preDefinedData ArrayBuffer with pre-defined data\r\n\t * @param {Object} parameters Additional parameters neccessary for \"fine tunning\" of encryption process\r\n\t * @param {number} variant Variant = 1 for pre-defined \"key encryption key\" (KEK). Variant = 2 for password-based encryption.\r\n\t */\r\n\taddRecipientByPreDefinedData(preDefinedData, parameters, variant)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tconst encryptionParameters = parameters || {};\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check initial parameters\r\n\t\tif((preDefinedData instanceof ArrayBuffer) === false)\r\n\t\t\tthrow new Error(\"Please pass \\\"preDefinedData\\\" in ArrayBuffer type\");\r\n\t\t\r\n\t\tif(preDefinedData.byteLength === 0)\r\n\t\t\tthrow new Error(\"Pre-defined data could have zero length\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initialize encryption parameters\r\n\t\tif((\"keyIdentifier\" in encryptionParameters) === false)\r\n\t\t{\r\n\t\t\tconst keyIdentifierBuffer = new ArrayBuffer(16);\r\n\t\t\tconst keyIdentifierView = new Uint8Array(keyIdentifierBuffer);\r\n\t\t\tgetRandomValues(keyIdentifierView);\r\n\t\t\t\r\n\t\t\tencryptionParameters.keyIdentifier = keyIdentifierBuffer;\r\n\t\t}\r\n\t\t\r\n\t\tif((\"hmacHashAlgorithm\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.hmacHashAlgorithm = \"SHA-512\";\r\n\t\t\r\n\t\tif((\"iterationCount\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.iterationCount = 2048;\r\n\t\t\r\n\t\tif((\"keyEncryptionAlgorithm\" in encryptionParameters) === false)\r\n\t\t{\r\n\t\t\tencryptionParameters.keyEncryptionAlgorithm = {\r\n\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\tlength: 256\r\n\t\t\t};\r\n\t\t}\r\n\t\t\r\n\t\tif((\"keyEncryptionAlgorithmParams\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.keyEncryptionAlgorithmParams = new asn1js.Null();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Add new recipient based on passed variant\r\n\t\tswitch(variant)\r\n\t\t{\r\n\t\t\tcase 1: // KEKRecipientInfo\r\n\t\t\t\t{\r\n\t\t\t\t\t//region keyEncryptionAlgorithm\r\n\t\t\t\t\tconst kekOID = getOIDByAlgorithm(encryptionParameters.keyEncryptionAlgorithm);\r\n\t\t\t\t\tif(kekOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(\"Incorrect value for \\\"keyEncryptionAlgorithm\\\"\");\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region KEKRecipientInfo\r\n\t\t\t\t\tconst keyInfo = new KEKRecipientInfo({\r\n\t\t\t\t\t\tversion: 4,\r\n\t\t\t\t\t\tkekid: new KEKIdentifier({\r\n\t\t\t\t\t\t\tkeyIdentifier: new asn1js.OctetString({ valueHex: encryptionParameters.keyIdentifier })\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tkeyEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: kekOID,\r\n\t\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t\t For AES-KW params are NULL, but for other algorithm could another situation.\r\n\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\talgorithmParams: encryptionParameters.keyEncryptionAlgorithmParams\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tpreDefinedKEK: preDefinedData\r\n\t\t\t\t\t// \"encryptedKey\" would be set in \"ecrypt\" function\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Final values for \"CMS_ENVELOPED_DATA\"\r\n\t\t\t\t\tthis.recipientInfos.push(new RecipientInfo({\r\n\t\t\t\t\t\tvariant: 3,\r\n\t\t\t\t\t\tvalue: keyInfo\r\n\t\t\t\t\t}));\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2: // PasswordRecipientinfo\r\n\t\t\t\t{\r\n\t\t\t\t\t//region keyDerivationAlgorithm\r\n\t\t\t\t\tconst pbkdf2OID = getOIDByAlgorithm({\r\n\t\t\t\t\t\tname: \"PBKDF2\"\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(pbkdf2OID === \"\")\r\n\t\t\t\t\t\tthrow new Error(\"Can not find OID for PBKDF2\");\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Salt\r\n\t\t\t\t\tconst saltBuffer = new ArrayBuffer(64);\r\n\t\t\t\t\tconst saltView = new Uint8Array(saltBuffer);\r\n\t\t\t\t\tgetRandomValues(saltView);\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region HMAC-based algorithm\r\n\t\t\t\t\tconst hmacOID = getOIDByAlgorithm({\r\n\t\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\tname: encryptionParameters.hmacHashAlgorithm\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(hmacOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(`Incorrect value for \"hmacHashAlgorithm\": ${encryptionParameters.hmacHashAlgorithm}`);\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region PBKDF2-params\r\n\t\t\t\t\tconst pbkdf2Params = new PBKDF2Params({\r\n\t\t\t\t\t\tsalt: new asn1js.OctetString({ valueHex: saltBuffer }),\r\n\t\t\t\t\t\titerationCount: encryptionParameters.iterationCount,\r\n\t\t\t\t\t\tprf: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: hmacOID,\r\n\t\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region keyEncryptionAlgorithm\r\n\t\t\t\t\tconst kekOID = getOIDByAlgorithm(encryptionParameters.keyEncryptionAlgorithm);\r\n\t\t\t\t\tif(kekOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(\"Incorrect value for \\\"keyEncryptionAlgorithm\\\"\");\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region PasswordRecipientinfo\r\n\t\t\t\t\tconst keyInfo = new PasswordRecipientinfo({\r\n\t\t\t\t\t\tversion: 0,\r\n\t\t\t\t\t\tkeyDerivationAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: pbkdf2OID,\r\n\t\t\t\t\t\t\talgorithmParams: pbkdf2Params.toSchema()\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tkeyEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: kekOID,\r\n\t\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t\t For AES-KW params are NULL, but for other algorithm could be another situation.\r\n\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\talgorithmParams: encryptionParameters.keyEncryptionAlgorithmParams\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tpassword: preDefinedData\r\n\t\t\t\t\t// \"encryptedKey\" would be set in \"ecrypt\" function\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Final values for \"CMS_ENVELOPED_DATA\"\r\n\t\t\t\t\tthis.recipientInfos.push(new RecipientInfo({\r\n\t\t\t\t\t\tvariant: 4,\r\n\t\t\t\t\t\tvalue: keyInfo\r\n\t\t\t\t\t}));\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Unknown value for \"variant\": ${variant}`);\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Create a new CMS Enveloped Data content with encrypted data\r\n\t * @param {Object} contentEncryptionAlgorithm WebCrypto algorithm. For the moment here could be only \"AES-CBC\" or \"AES-GCM\" algorithms.\r\n\t * @param {ArrayBuffer} contentToEncrypt Content to encrypt\r\n\t * @returns {Promise}\r\n\t */\r\n\tencrypt(contentEncryptionAlgorithm, contentToEncrypt)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst ivBuffer = new ArrayBuffer(16); // For AES we need IV 16 bytes long\r\n\t\tconst ivView = new Uint8Array(ivBuffer);\r\n\t\tgetRandomValues(ivView);\r\n\t\t\r\n\t\tconst contentView = new Uint8Array(contentToEncrypt);\r\n\t\t\r\n\t\tlet sessionKey;\r\n\t\tlet encryptedContent;\r\n\t\tlet exportedSessionKey;\r\n\t\t\r\n\t\tconst recipientsPromises = [];\r\n\t\t\r\n\t\tconst _this = this;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check for input parameters\r\n\t\tconst contentEncryptionOID = getOIDByAlgorithm(contentEncryptionAlgorithm);\r\n\t\tif(contentEncryptionOID === \"\")\r\n\t\t\treturn Promise.reject(\"Wrong \\\"contentEncryptionAlgorithm\\\" value\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Generate new content encryption key\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tcrypto.generateKey(contentEncryptionAlgorithm, true, [\"encrypt\"]));\r\n\t\t//endregion\r\n\t\t//region Encrypt content\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tsessionKey = result;\r\n\t\t\t\r\n\t\t\treturn crypto.encrypt({\r\n\t\t\t\tname: contentEncryptionAlgorithm.name,\r\n\t\t\t\tiv: ivView\r\n\t\t\t},\r\n\t\t\tsessionKey,\r\n\t\t\tcontentView);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error));\r\n\t\t//endregion\r\n\t\t//region Export raw content of content encryption key\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Create output OCTETSTRING with encrypted content\r\n\t\t\tencryptedContent = result;\r\n\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\treturn crypto.exportKey(\"raw\", sessionKey);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t).then(result =>\r\n\t\t{\r\n\t\t\texportedSessionKey = result;\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error));\r\n\t\t//endregion\r\n\t\t//region Append common information to CMS_ENVELOPED_DATA\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tthis.version = 2;\r\n\t\t\tthis.encryptedContentInfo = new EncryptedContentInfo({\r\n\t\t\t\tcontentType: \"1.2.840.113549.1.7.1\", // \"data\"\r\n\t\t\t\tcontentEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: contentEncryptionOID,\r\n\t\t\t\t\talgorithmParams: new asn1js.OctetString({ valueHex: ivBuffer })\r\n\t\t\t\t}),\r\n\t\t\t\tencryptedContent: new asn1js.OctetString({ valueHex: encryptedContent })\r\n\t\t\t});\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Special sub-functions to work with each recipient's type\r\n\t\tfunction SubKeyAgreeRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\t\r\n\t\t\tlet ecdhPublicKey;\r\n\t\t\tlet ecdhPrivateKey;\r\n\t\t\t\r\n\t\t\tlet recipientCurve;\r\n\t\t\tlet recipientCurveLength;\r\n\t\t\t\r\n\t\t\tlet exportedECDHPublicKey;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Get \"namedCurve\" parameter from recipient's certificate\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tconst curveObject = _this.recipientInfos[index].value.recipientCertificate.subjectPublicKeyInfo.algorithm.algorithmParams;\r\n\t\t\t\t\r\n\t\t\t\tif((curveObject instanceof asn1js.ObjectIdentifier) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \"recipientCertificate\" for index ${index}`);\r\n\t\t\t\t\r\n\t\t\t\tconst curveOID = curveObject.valueBlock.toString();\r\n\t\t\t\t\r\n\t\t\t\tswitch(curveOID)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"1.2.840.10045.3.1.7\":\r\n\t\t\t\t\t\trecipientCurve = \"P-256\";\r\n\t\t\t\t\t\trecipientCurveLength = 256;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"1.3.132.0.34\":\r\n\t\t\t\t\t\trecipientCurve = \"P-384\";\r\n\t\t\t\t\t\trecipientCurveLength = 384;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"1.3.132.0.35\":\r\n\t\t\t\t\t\trecipientCurve = \"P-521\";\r\n\t\t\t\t\t\trecipientCurveLength = 528;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect curve OID for index ${index}`);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn recipientCurve;\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Generate ephemeral ECDH key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.generateKey({\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tnamedCurve: result\r\n\t\t\t\t},\r\n\t\t\t\ttrue,\r\n\t\t\t\t[\"deriveBits\"]),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Export public key of ephemeral ECDH key pair\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\tecdhPublicKey = result.publicKey;\r\n\t\t\t\tecdhPrivateKey = result.privateKey;\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.exportKey(\"spki\", ecdhPublicKey);\r\n\t\t\t},\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Import recipient's public key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\texportedECDHPublicKey = result;\r\n\t\t\t\t\r\n\t\t\t\treturn _this.recipientInfos[index].value.recipientCertificate.getPublicKey({\r\n\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\t\tnamedCurve: recipientCurve\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t//region Create shared secret\r\n\t\t\tcurrentSequence = currentSequence.then(result => crypto.deriveBits({\r\n\t\t\t\tname: \"ECDH\",\r\n\t\t\t\tpublic: result\r\n\t\t\t},\r\n\t\t\tecdhPrivateKey,\r\n\t\t\trecipientCurveLength),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Apply KDF function to shared secret\r\n\t\t\tcurrentSequence = currentSequence.then(\r\n\t\t\t\t/**\r\n\t\t\t\t * @param {ArrayBuffer} result\r\n\t\t\t\t */\r\n\t\t\t\tresult =>\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Get length of used AES-KW algorithm\r\n\t\t\t\t\tconst aesKWAlgorithm = new AlgorithmIdentifier({ schema: _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmParams });\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst KWalgorithm = getAlgorithmByOID(aesKWAlgorithm.algorithmId);\r\n\t\t\t\t\tif((\"name\" in KWalgorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect OID for key encryption algorithm: ${aesKWAlgorithm.algorithmId}`);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Translate AES-KW length to ArrayBuffer\r\n\t\t\t\t\tlet kwLength = KWalgorithm.length;\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst kwLengthBuffer = new ArrayBuffer(4);\r\n\t\t\t\t\tconst kwLengthView = new Uint8Array(kwLengthBuffer);\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor(let j = 3; j >= 0; j--)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tkwLengthView[j] = kwLength;\r\n\t\t\t\t\t\tkwLength >>= 8;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Create and encode \"ECC-CMS-SharedInfo\" structure\r\n\t\t\t\t\tconst eccInfo = new ECCCMSSharedInfo({\r\n\t\t\t\t\t\tkeyInfo: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: aesKWAlgorithm.algorithmId,\r\n\t\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t\t Initially RFC5753 says that AES algorithms have absent parameters.\r\n\t\t\t\t\t\t\t But since early implementations all put NULL here. Thus, in order to be\r\n\t\t\t\t\t\t\t \"backward compatible\", index also put NULL here.\r\n\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tentityUInfo: _this.recipientInfos[index].value.ukm,\r\n\t\t\t\t\t\tsuppPubInfo: new asn1js.OctetString({ valueHex: kwLengthBuffer })\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst encodedInfo = eccInfo.toSchema().toBER(false);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Get SHA algorithm used together with ECDH\r\n\t\t\t\t\tconst ecdhAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\t\tif((\"name\" in ecdhAlgorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect OID for key encryption algorithm: ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn kdf(ecdhAlgorithm.kdf, result, KWalgorithm.length, encodedInfo);\r\n\t\t\t\t},\r\n\t\t\t\terror =>\r\n\t\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t//region Import AES-KW key from result of KDF function\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.importKey(\"raw\", result, { name: \"AES-KW\" }, true, [\"wrapKey\"]),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Finally wrap session key by using AES-KW algorithm\r\n\t\t\tcurrentSequence = currentSequence.then(result => crypto.wrapKey(\"raw\", sessionKey, result, { name: \"AES-KW\" }),\r\n\t\t\t\terror =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Append all neccessary data to current CMS_RECIPIENT_INFO object\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region OriginatorIdentifierOrKey\r\n\t\t\t\tconst asn1 = asn1js.fromBER(exportedECDHPublicKey);\r\n\t\t\t\t\t\r\n\t\t\t\tconst originator = new OriginatorIdentifierOrKey();\r\n\t\t\t\toriginator.variant = 3;\r\n\t\t\t\toriginator.value = new OriginatorPublicKey({ schema: asn1.result });\r\n\t\t\t\t// There is option when we can stay with ECParameters, but here index prefer to avoid the params\r\n\t\t\t\tif(\"algorithmParams\" in originator.value.algorithm)\r\n\t\t\t\t\tdelete originator.value.algorithm.algorithmParams;\r\n\t\t\t\t\t\r\n\t\t\t\t_this.recipientInfos[index].value.originator = originator;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t//region RecipientEncryptedKey\r\n\t\t\t\t/*\r\n\t\t\t\t We will not support using of same ephemeral key for many recipients\r\n\t\t\t\t */\r\n\t\t\t\t_this.recipientInfos[index].value.recipientEncryptedKeys.encryptedKeys[0].encryptedKey = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\t//endregion\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\tfunction SubKeyTransRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Get recipient's public key\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\t//region Get current used SHA algorithm\r\n\t\t\t\tconst schema = _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmParams;\r\n\t\t\t\tconst rsaOAEPParams = new RSAESOAEPParams({ schema });\r\n\t\t\t\t\r\n\t\t\t\tconst hashAlgorithm = getAlgorithmByOID(rsaOAEPParams.hashAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for hash algorithm: ${rsaOAEPParams.hashAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\treturn _this.recipientInfos[index].value.recipientCertificate.getPublicKey({\r\n\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"RSA-OAEP\",\r\n\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\tname: hashAlgorithm.name\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: [\"encrypt\", \"wrapKey\"]\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t//region Encrypt early exported session key on recipient's public key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.encrypt(result.algorithm, result, exportedSessionKey),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Append all neccessary data to current CMS_RECIPIENT_INFO object\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region RecipientEncryptedKey\r\n\t\t\t\t_this.recipientInfos[index].value.encryptedKey = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\t//endregion\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\tfunction SubKEKRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\tlet kekAlgorithm;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Import KEK from pre-defined data\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\t//region Get WebCrypto form of \"keyEncryptionAlgorithm\"\r\n\t\t\t\tkekAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in kekAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for \"keyEncryptionAlgorithm\": ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\t\tnew Uint8Array(_this.recipientInfos[index].value.preDefinedKEK),\r\n\t\t\t\t\tkekAlgorithm,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"wrapKey\"]); // Too specific for AES-KW\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Wrap previously exported session key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.wrapKey(\"raw\", sessionKey, result, kekAlgorithm),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Append all neccessary data to current CMS_RECIPIENT_INFO object\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region RecipientEncryptedKey\r\n\t\t\t\t_this.recipientInfos[index].value.encryptedKey = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\t//endregion\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\tfunction SubPasswordRecipientinfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\tlet pbkdf2Params;\r\n\t\t\tlet kekAlgorithm;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check that we have encoded \"keyDerivationAlgorithm\" plus \"PBKDF2_params\" in there\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tif((\"keyDerivationAlgorithm\" in _this.recipientInfos[index].value) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Please append encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\tif((\"algorithmParams\" in _this.recipientInfos[index].value.keyDerivationAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tpbkdf2Params = new PBKDF2Params({ schema: _this.recipientInfos[index].value.keyDerivationAlgorithm.algorithmParams });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\treturn Promise.resolve();\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Derive PBKDF2 key from \"password\" buffer\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tconst passwordView = new Uint8Array(_this.recipientInfos[index].value.password);\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\t\tpasswordView,\r\n\t\t\t\t\t\"PBKDF2\",\r\n\t\t\t\t\tfalse,\r\n\t\t\t\t\t[\"deriveKey\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Derive key for \"keyEncryptionAlgorithm\"\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Get WebCrypto form of \"keyEncryptionAlgorithm\"\r\n\t\t\t\tkekAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in kekAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for \"keyEncryptionAlgorithm\": ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Get HMAC hash algorithm\r\n\t\t\t\tlet hmacHashAlgorithm = \"SHA-1\";\r\n\t\t\t\t\t\r\n\t\t\t\tif(\"prf\" in pbkdf2Params)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst algorithm = getAlgorithmByOID(pbkdf2Params.prf.algorithmId);\r\n\t\t\t\t\tif((\"name\" in algorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect OID for HMAC hash algorithm\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\thmacHashAlgorithm = algorithm.hash.name;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Get PBKDF2 \"salt\" value\r\n\t\t\t\tconst saltView = new Uint8Array(pbkdf2Params.salt.valueBlock.valueHex);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t//region Get PBKDF2 iterations count\r\n\t\t\t\tconst iterations = pbkdf2Params.iterationCount;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.deriveKey({\r\n\t\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: hmacHashAlgorithm\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsalt: saltView,\r\n\t\t\t\t\titerations\r\n\t\t\t\t},\r\n\t\t\t\tresult,\r\n\t\t\t\tkekAlgorithm,\r\n\t\t\t\ttrue,\r\n\t\t\t\t[\"wrapKey\"]); // Usages are too specific for KEK algorithm\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Wrap previously exported session key (Also too specific for KEK algorithm)\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.wrapKey(\"raw\", sessionKey, result, kekAlgorithm),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Append all neccessary data to current CMS_RECIPIENT_INFO object\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region RecipientEncryptedKey\r\n\t\t\t\t_this.recipientInfos[index].value.encryptedKey = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\t//endregion\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create special routines for each \"recipient\"\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tfor(let i = 0; i < this.recipientInfos.length; i++)\r\n\t\t\t{\r\n\t\t\t\t//region Initial variables\r\n\t\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\tswitch(this.recipientInfos[i].variant)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 1: // KeyTransRecipientInfo\r\n\t\t\t\t\t\tcurrentSequence = SubKeyTransRecipientInfo(i);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2: // KeyAgreeRecipientInfo\r\n\t\t\t\t\t\tcurrentSequence = SubKeyAgreeRecipientInfo(i);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3: // KEKRecipientInfo\r\n\t\t\t\t\t\tcurrentSequence = SubKEKRecipientInfo(i);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 4: // PasswordRecipientinfo\r\n\t\t\t\t\t\tcurrentSequence = SubPasswordRecipientinfo(i);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Uknown recipient type in array with index ${i}`);\r\n\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\trecipientsPromises.push(currentSequence);\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t\treturn Promise.all(recipientsPromises);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Decrypt existing CMS Enveloped Data content\r\n\t * @param {number} recipientIndex Index of recipient\r\n\t * @param {Object} parameters Additional parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tdecrypt(recipientIndex, parameters)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst decryptionParameters = parameters || {};\r\n\t\t\r\n\t\tconst _this = this;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check for input parameters\r\n\t\tif((recipientIndex + 1) > this.recipientInfos.length)\r\n\t\t\treturn Promise.reject(`Maximum value for \"index\" is: ${this.recipientInfos.length - 1}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Special sub-functions to work with each recipient's type\r\n\t\tfunction SubKeyAgreeRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\t\r\n\t\t\tlet recipientCurve;\r\n\t\t\tlet recipientCurveLength;\r\n\t\t\t\r\n\t\t\tlet curveOID;\r\n\t\t\t\r\n\t\t\tlet ecdhPrivateKey;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Get \"namedCurve\" parameter from recipient's certificate\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tif((\"recipientCertificate\" in decryptionParameters) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Parameter \\\"recipientCertificate\\\" is mandatory for \\\"KeyAgreeRecipientInfo\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\tif((\"recipientPrivateKey\" in decryptionParameters) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Parameter \\\"recipientPrivateKey\\\" is mandatory for \\\"KeyAgreeRecipientInfo\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\tconst curveObject = decryptionParameters.recipientCertificate.subjectPublicKeyInfo.algorithm.algorithmParams;\r\n\t\t\t\t\t\r\n\t\t\t\tif((curveObject instanceof asn1js.ObjectIdentifier) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \"recipientCertificate\" for index ${index}`);\r\n\t\t\t\t\t\r\n\t\t\t\tcurveOID = curveObject.valueBlock.toString();\r\n\t\t\t\t\t\r\n\t\t\t\tswitch(curveOID)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"1.2.840.10045.3.1.7\":\r\n\t\t\t\t\t\trecipientCurve = \"P-256\";\r\n\t\t\t\t\t\trecipientCurveLength = 256;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"1.3.132.0.34\":\r\n\t\t\t\t\t\trecipientCurve = \"P-384\";\r\n\t\t\t\t\t\trecipientCurveLength = 384;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"1.3.132.0.35\":\r\n\t\t\t\t\t\trecipientCurve = \"P-521\";\r\n\t\t\t\t\t\trecipientCurveLength = 528;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect curve OID for index ${index}`);\r\n\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"pkcs8\",\r\n\t\t\t\t\tdecryptionParameters.recipientPrivateKey,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\tnamedCurve: recipientCurve\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"deriveBits\"]\r\n\t\t\t\t);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Import sender's ephemeral public key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\tecdhPrivateKey = result;\r\n\t\t\t\t\t\r\n\t\t\t\t//region Change \"OriginatorPublicKey\" if \"curve\" parameter absent\r\n\t\t\t\tif((\"algorithmParams\" in _this.recipientInfos[index].value.originator.value.algorithm) === false)\r\n\t\t\t\t\t_this.recipientInfos[index].value.originator.value.algorithm.algorithmParams = new asn1js.ObjectIdentifier({ value: curveOID });\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Create ArrayBuffer with sender's public key\r\n\t\t\t\tconst buffer = _this.recipientInfos[index].value.originator.value.toSchema().toBER(false);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"spki\",\r\n\t\t\t\t\tbuffer,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\tnamedCurve: recipientCurve\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Create shared secret\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.deriveBits({\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tpublic: result\r\n\t\t\t\t},\r\n\t\t\t\tecdhPrivateKey,\r\n\t\t\t\trecipientCurveLength),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Apply KDF function to shared secret\r\n\t\t\tcurrentSequence = currentSequence.then(\r\n\t\t\t\t/**\r\n\t\t\t\t * @param {ArrayBuffer} result\r\n\t\t\t\t */\r\n\t\t\t\tresult =>\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Get length of used AES-KW algorithm\r\n\t\t\t\t\tconst aesKWAlgorithm = new AlgorithmIdentifier({ schema: _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmParams });\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst KWalgorithm = getAlgorithmByOID(aesKWAlgorithm.algorithmId);\r\n\t\t\t\t\tif((\"name\" in KWalgorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect OID for key encryption algorithm: ${aesKWAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Translate AES-KW length to ArrayBuffer\r\n\t\t\t\t\tlet kwLength = KWalgorithm.length;\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst kwLengthBuffer = new ArrayBuffer(4);\r\n\t\t\t\t\tconst kwLengthView = new Uint8Array(kwLengthBuffer);\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor(let j = 3; j >= 0; j--)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tkwLengthView[j] = kwLength;\r\n\t\t\t\t\t\tkwLength >>= 8;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Create and encode \"ECC-CMS-SharedInfo\" structure\r\n\t\t\t\t\tconst eccInfo = new ECCCMSSharedInfo({\r\n\t\t\t\t\t\tkeyInfo: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: aesKWAlgorithm.algorithmId,\r\n\t\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t\t Initially RFC5753 says that AES algorithms have absent parameters.\r\n\t\t\t\t\t\t\t But since early implementations all put NULL here. Thus, in order to be\r\n\t\t\t\t\t\t\t \"backward compatible\", index also put NULL here.\r\n\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tentityUInfo: _this.recipientInfos[index].value.ukm,\r\n\t\t\t\t\t\tsuppPubInfo: new asn1js.OctetString({ valueHex: kwLengthBuffer })\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst encodedInfo = eccInfo.toSchema().toBER(false);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Get SHA algorithm used together with ECDH\r\n\t\t\t\t\tconst ecdhAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\t\tif((\"name\" in ecdhAlgorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect OID for key encryption algorithm: ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\treturn kdf(ecdhAlgorithm.kdf, result, KWalgorithm.length, encodedInfo);\r\n\t\t\t\t},\r\n\t\t\t\terror =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Import AES-KW key from result of KDF function\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.importKey(\"raw\",\r\n\t\t\t\t\tresult,\r\n\t\t\t\t\t{ name: \"AES-KW\" },\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"unwrapKey\"]),\r\n\t\t\terror => Promise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Finally unwrap session key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Get WebCrypto form of content encryption algorithm\r\n\t\t\t\tconst contentEncryptionAlgorithm = getAlgorithmByOID(_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \"contentEncryptionAlgorithm\": ${_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.unwrapKey(\"raw\",\r\n\t\t\t\t\t_this.recipientInfos[index].value.recipientEncryptedKeys.encryptedKeys[0].encryptedKey.valueBlock.valueHex,\r\n\t\t\t\t\tresult,\r\n\t\t\t\t\t{ name: \"AES-KW\" },\r\n\t\t\t\t\tcontentEncryptionAlgorithm,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"decrypt\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\tfunction SubKeyTransRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Import recipient's private key\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tif((\"recipientPrivateKey\" in decryptionParameters) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Parameter \\\"recipientPrivateKey\\\" is mandatory for \\\"KeyTransRecipientInfo\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\t//region Get current used SHA algorithm\r\n\t\t\t\tconst schema = _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmParams;\r\n\t\t\t\tconst rsaOAEPParams = new RSAESOAEPParams({ schema });\r\n\t\t\t\t\t\r\n\t\t\t\tconst hashAlgorithm = getAlgorithmByOID(rsaOAEPParams.hashAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for hash algorithm: ${rsaOAEPParams.hashAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"pkcs8\",\r\n\t\t\t\t\tdecryptionParameters.recipientPrivateKey,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: \"RSA-OAEP\",\r\n\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\tname: hashAlgorithm.name\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"decrypt\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Decrypt encrypted session key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.decrypt(result.algorithm,\r\n\t\t\t\t\tresult,\r\n\t\t\t\t\t_this.recipientInfos[index].value.encryptedKey.valueBlock.valueHex\r\n\t\t\t\t), error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Import decrypted session key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Get WebCrypto form of content encryption algorithm\r\n\t\t\t\tconst contentEncryptionAlgorithm = getAlgorithmByOID(_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \"contentEncryptionAlgorithm\": ${_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\t\tresult,\r\n\t\t\t\t\tcontentEncryptionAlgorithm,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"decrypt\"]\r\n\t\t\t\t);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\tfunction SubKEKRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\tlet kekAlgorithm;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Import KEK from pre-defined data\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tif((\"preDefinedData\" in decryptionParameters) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Parameter \\\"preDefinedData\\\" is mandatory for \\\"KEKRecipientInfo\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\t//region Get WebCrypto form of \"keyEncryptionAlgorithm\"\r\n\t\t\t\tkekAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in kekAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for \"keyEncryptionAlgorithm\": ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\t\tdecryptionParameters.preDefinedData,\r\n\t\t\t\t\tkekAlgorithm,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"unwrapKey\"]); // Too specific for AES-KW\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Unwrap previously exported session key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Get WebCrypto form of content encryption algorithm\r\n\t\t\t\tconst contentEncryptionAlgorithm = getAlgorithmByOID(_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \"contentEncryptionAlgorithm\": ${_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.unwrapKey(\"raw\",\r\n\t\t\t\t\t_this.recipientInfos[index].value.encryptedKey.valueBlock.valueHex,\r\n\t\t\t\t\tresult,\r\n\t\t\t\t\tkekAlgorithm,\r\n\t\t\t\t\tcontentEncryptionAlgorithm,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"decrypt\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\tfunction SubPasswordRecipientinfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\tlet pbkdf2Params;\r\n\t\t\tlet kekAlgorithm;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Derive PBKDF2 key from \"password\" buffer\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tif((\"preDefinedData\" in decryptionParameters) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Parameter \\\"preDefinedData\\\" is mandatory for \\\"KEKRecipientInfo\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\tif((\"keyDerivationAlgorithm\" in _this.recipientInfos[index].value) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Please append encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\tif((\"algorithmParams\" in _this.recipientInfos[index].value.keyDerivationAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tpbkdf2Params = new PBKDF2Params({ schema: _this.recipientInfos[index].value.keyDerivationAlgorithm.algorithmParams });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\t\tdecryptionParameters.preDefinedData,\r\n\t\t\t\t\t\"PBKDF2\",\r\n\t\t\t\t\tfalse,\r\n\t\t\t\t\t[\"deriveKey\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Derive key for \"keyEncryptionAlgorithm\"\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Get WebCrypto form of \"keyEncryptionAlgorithm\"\r\n\t\t\t\tkekAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in kekAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for \"keyEncryptionAlgorithm\": ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Get HMAC hash algorithm\r\n\t\t\t\tlet hmacHashAlgorithm = \"SHA-1\";\r\n\t\t\t\t\t\r\n\t\t\t\tif(\"prf\" in pbkdf2Params)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst algorithm = getAlgorithmByOID(pbkdf2Params.prf.algorithmId);\r\n\t\t\t\t\tif((\"name\" in algorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect OID for HMAC hash algorithm\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\thmacHashAlgorithm = algorithm.hash.name;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Get PBKDF2 \"salt\" value\r\n\t\t\t\tconst saltView = new Uint8Array(pbkdf2Params.salt.valueBlock.valueHex);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t//region Get PBKDF2 iterations count\r\n\t\t\t\tconst iterations = pbkdf2Params.iterationCount;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.deriveKey({\r\n\t\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: hmacHashAlgorithm\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsalt: saltView,\r\n\t\t\t\t\titerations\r\n\t\t\t\t},\r\n\t\t\t\tresult,\r\n\t\t\t\tkekAlgorithm,\r\n\t\t\t\ttrue,\r\n\t\t\t\t[\"unwrapKey\"]); // Usages are too specific for KEK algorithm\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Unwrap previously exported session key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Get WebCrypto form of content encryption algorithm\r\n\t\t\t\tconst contentEncryptionAlgorithm = getAlgorithmByOID(_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \"contentEncryptionAlgorithm\": ${_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.unwrapKey(\"raw\",\r\n\t\t\t\t\t_this.recipientInfos[index].value.encryptedKey.valueBlock.valueHex,\r\n\t\t\t\t\tresult,\r\n\t\t\t\t\tkekAlgorithm,\r\n\t\t\t\t\tcontentEncryptionAlgorithm,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"decrypt\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Perform steps, specific to each type of session key encryption\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\tswitch(this.recipientInfos[recipientIndex].variant)\r\n\t\t\t{\r\n\t\t\t\tcase 1: // KeyTransRecipientInfo\r\n\t\t\t\t\tcurrentSequence = SubKeyTransRecipientInfo(recipientIndex);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2: // KeyAgreeRecipientInfo\r\n\t\t\t\t\tcurrentSequence = SubKeyAgreeRecipientInfo(recipientIndex);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3: // KEKRecipientInfo\r\n\t\t\t\t\tcurrentSequence = SubKEKRecipientInfo(recipientIndex);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4: // PasswordRecipientinfo\r\n\t\t\t\t\tcurrentSequence = SubPasswordRecipientinfo(recipientIndex);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn Promise.reject(`Uknown recipient type in array with index ${recipientIndex}`);\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Finally decrypt data by session key\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Get WebCrypto form of content encryption algorithm\r\n\t\t\tconst contentEncryptionAlgorithm = getAlgorithmByOID(this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\r\n\t\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\t\treturn Promise.reject(`Incorrect \"contentEncryptionAlgorithm\": ${this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Get \"intialization vector\" for content encryption algorithm\r\n\t\t\tconst ivBuffer = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmParams.valueBlock.valueHex;\r\n\t\t\tconst ivView = new Uint8Array(ivBuffer);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Create correct data block for decryption\r\n\t\t\tlet dataBuffer = new ArrayBuffer(0);\r\n\t\t\t\t\r\n\t\t\tif(this.encryptedContentInfo.encryptedContent.idBlock.isConstructed === false)\r\n\t\t\t\tdataBuffer = this.encryptedContentInfo.encryptedContent.valueBlock.valueHex;\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tfor(const content of this.encryptedContentInfo.encryptedContent.valueBlock.value)\r\n\t\t\t\t\tdataBuffer = utilConcatBuf(dataBuffer, content.valueBlock.valueHex);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\treturn crypto.decrypt({\r\n\t\t\t\tname: contentEncryptionAlgorithm.name,\r\n\t\t\t\tiv: ivView\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tdataBuffer);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"EnvelopedData.js"}