{"version":3,"sources":["../src/Certificate.js"],"names":["tbsCertificate","parameters","names","asn1js","Sequence","name","blockName","value","Constructed","optional","idBlock","tagClass","tagNumber","Integer","tbsCertificateVersion","tbsCertificateSerialNumber","AlgorithmIdentifier","schema","signature","RelativeDistinguishedNames","issuer","tbsCertificateValidity","Time","notBefore","utcTimeName","generalTimeName","notAfter","subject","PublicKeyInfo","subjectPublicKeyInfo","Primitive","tbsCertificateIssuerUniqueID","tbsCertificateSubjectUniqueID","Extensions","extensions","Certificate","constructor","tbs","defaultValues","version","serialNumber","issuerUniqueID","subjectUniqueID","signatureAlgorithm","signatureValue","fromSchema","memberName","ArrayBuffer","BitString","Error","asn1","compareSchema","verified","result","valueBeforeDecode","valueBlock","valueDec","valueHex","Array","from","element","Extension","encodeTBS","outputArray","push","toSchema","encodeFlag","tbsSchema","length","fromBER","toJSON","object","byteLength","getPublicKey","subtle","getKeyHash","hashAlgorithm","crypto","Promise","reject","digest","Uint8Array","subjectPublicKey","sign","privateKey","sequence","resolve","engine","then","getSignatureParameters","toBER","signWithPrivateKey","verify","issuerCertificate","isEqual","verifyWithPublicKey"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, bufferToHexCodes, clearProps } from \"pvutils\";\r\nimport { getCrypto, getEngine } from \"./common.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\";\r\nimport Time from \"./Time.js\";\r\nimport PublicKeyInfo from \"./PublicKeyInfo.js\";\r\nimport Extension from \"./Extension.js\";\r\nimport Extensions from \"./Extensions.js\";\r\n//**************************************************************************************\r\nfunction tbsCertificate(parameters = {})\r\n{\r\n\t//TBSCertificate  ::=  SEQUENCE  {\r\n\t//    version         [0]  EXPLICIT Version DEFAULT v1,\r\n\t//    serialNumber         CertificateSerialNumber,\r\n\t//    signature            AlgorithmIdentifier,\r\n\t//    issuer               Name,\r\n\t//    validity             Validity,\r\n\t//    subject              Name,\r\n\t//    subjectPublicKeyInfo SubjectPublicKeyInfo,\r\n\t//    issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,\r\n\t//                         -- If present, version MUST be v2 or v3\r\n\t//    subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,\r\n\t//                         -- If present, version MUST be v2 or v3\r\n\t//    extensions      [3]  EXPLICIT Extensions OPTIONAL\r\n\t//    -- If present, version MUST be v3\r\n\t//}\r\n\t\r\n\t/**\r\n\t * @type {Object}\r\n\t * @property {string} [blockName]\r\n\t * @property {string} [tbsCertificateVersion]\r\n\t * @property {string} [tbsCertificateSerialNumber]\r\n\t * @property {string} [signature]\r\n\t * @property {string} [issuer]\r\n\t * @property {string} [tbsCertificateValidity]\r\n\t * @property {string} [notBefore]\r\n\t * @property {string} [notAfter]\r\n\t * @property {string} [subject]\r\n\t * @property {string} [subjectPublicKeyInfo]\r\n\t * @property {string} [tbsCertificateIssuerUniqueID]\r\n\t * @property {string} [tbsCertificateSubjectUniqueID]\r\n\t * @property {string} [extensions]\r\n\t */\r\n\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\r\n\treturn (new asn1js.Sequence({\r\n\t\tname: (names.blockName || \"tbsCertificate\"),\r\n\t\tvalue: [\r\n\t\t\tnew asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Integer({ name: (names.tbsCertificateVersion || \"tbsCertificate.version\") }) // EXPLICIT integer value\r\n\t\t\t\t]\r\n\t\t\t}),\r\n\t\t\tnew asn1js.Integer({ name: (names.tbsCertificateSerialNumber || \"tbsCertificate.serialNumber\") }),\r\n\t\t\tAlgorithmIdentifier.schema(names.signature || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"tbsCertificate.signature\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tRelativeDistinguishedNames.schema(names.issuer || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"tbsCertificate.issuer\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tnew asn1js.Sequence({\r\n\t\t\t\tname: (names.tbsCertificateValidity || \"tbsCertificate.validity\"),\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tTime.schema(names.notBefore || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tutcTimeName: \"tbsCertificate.notBefore\",\r\n\t\t\t\t\t\t\tgeneralTimeName: \"tbsCertificate.notBefore\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tTime.schema(names.notAfter || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tutcTimeName: \"tbsCertificate.notAfter\",\r\n\t\t\t\t\t\t\tgeneralTimeName: \"tbsCertificate.notAfter\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t}),\r\n\t\t\tRelativeDistinguishedNames.schema(names.subject || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"tbsCertificate.subject\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tPublicKeyInfo.schema(names.subjectPublicKeyInfo || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"tbsCertificate.subjectPublicKeyInfo\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tnew asn1js.Primitive({\r\n\t\t\t\tname: (names.tbsCertificateIssuerUniqueID || \"tbsCertificate.issuerUniqueID\"),\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t}\r\n\t\t\t}), // IMPLICIT bistring value\r\n\t\t\tnew asn1js.Primitive({\r\n\t\t\t\tname: (names.tbsCertificateSubjectUniqueID || \"tbsCertificate.subjectUniqueID\"),\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t}\r\n\t\t\t}), // IMPLICIT bistring value\r\n\t\t\tnew asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 3 // [3]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [Extensions.schema(names.extensions || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"tbsCertificate.extensions\"\r\n\t\t\t\t\t}\r\n\t\t\t\t})]\r\n\t\t\t}) // EXPLICIT SEQUENCE value\r\n\t\t]\r\n\t}));\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class Certificate\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Certificate class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc ToBeSigned (TBS) part of the certificate\r\n\t\t */\r\n\t\tthis.tbs = getParametersValue(parameters, \"tbs\", Certificate.defaultValues(\"tbs\"));\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc Version number\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", Certificate.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc Serial number of the certificate\r\n\t\t */\r\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", Certificate.defaultValues(\"serialNumber\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc This field contains the algorithm identifier for the algorithm used by the CA to sign the certificate\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", Certificate.defaultValues(\"signature\"));\r\n\t\t/**\r\n\t\t * @type {RelativeDistinguishedNames}\r\n\t\t * @desc The issuer field identifies the entity that has signed and issued the certificate\r\n\t\t */\r\n\t\tthis.issuer = getParametersValue(parameters, \"issuer\", Certificate.defaultValues(\"issuer\"));\r\n\t\t/**\r\n\t\t * @type {Time}\r\n\t\t * @desc The date on which the certificate validity period begins\r\n\t\t */\r\n\t\tthis.notBefore = getParametersValue(parameters, \"notBefore\", Certificate.defaultValues(\"notBefore\"));\r\n\t\t/**\r\n\t\t * @type {Time}\r\n\t\t * @desc The date on which the certificate validity period ends\r\n\t\t */\r\n\t\tthis.notAfter = getParametersValue(parameters, \"notAfter\", Certificate.defaultValues(\"notAfter\"));\r\n\t\t/**\r\n\t\t * @type {RelativeDistinguishedNames}\r\n\t\t * @desc The subject field identifies the entity associated with the public key stored in the subject public key field\r\n\t\t */\r\n\t\tthis.subject = getParametersValue(parameters, \"subject\", Certificate.defaultValues(\"subject\"));\r\n\t\t/**\r\n\t\t * @type {PublicKeyInfo}\r\n\t\t * @desc This field is used to carry the public key and identify the algorithm with which the key is used\r\n\t\t */\r\n\t\tthis.subjectPublicKeyInfo = getParametersValue(parameters, \"subjectPublicKeyInfo\", Certificate.defaultValues(\"subjectPublicKeyInfo\"));\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ArrayBuffer}\r\n\t\t\t * @desc The subject and issuer unique identifiers are present in the certificate to handle the possibility of reuse of subject and/or issuer names over time\r\n\t\t\t */\r\n\t\t\tthis.issuerUniqueID = getParametersValue(parameters, \"issuerUniqueID\", Certificate.defaultValues(\"issuerUniqueID\"));\r\n\t\t\r\n\t\tif(\"subjectUniqueID\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ArrayBuffer}\r\n\t\t\t * @desc The subject and issuer unique identifiers are present in the certificate to handle the possibility of reuse of subject and/or issuer names over time\r\n\t\t\t */\r\n\t\t\tthis.subjectUniqueID = getParametersValue(parameters, \"subjectUniqueID\", Certificate.defaultValues(\"subjectUniqueID\"));\r\n\t\t\r\n\t\tif(\"extensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array}\r\n\t\t\t * @desc If present, this field is a SEQUENCE of one or more certificate extensions\r\n\t\t\t */\r\n\t\t\tthis.extensions = getParametersValue(parameters, \"extensions\", Certificate.defaultValues(\"extensions\"));\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc The signatureAlgorithm field contains the identifier for the cryptographic algorithm used by the CA to sign this certificate\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", Certificate.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @desc The signatureValue field contains a digital signature computed upon the ASN.1 DER encoded tbsCertificate\r\n\t\t */\r\n\t\tthis.signatureValue = getParametersValue(parameters, \"signatureValue\", Certificate.defaultValues(\"signatureValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbs\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"issuer\":\r\n\t\t\t\treturn new RelativeDistinguishedNames();\r\n\t\t\tcase \"notBefore\":\r\n\t\t\t\treturn new Time();\r\n\t\t\tcase \"notAfter\":\r\n\t\t\t\treturn new Time();\r\n\t\t\tcase \"subject\":\r\n\t\t\t\treturn new RelativeDistinguishedNames();\r\n\t\t\tcase \"subjectPublicKeyInfo\":\r\n\t\t\t\treturn new PublicKeyInfo();\r\n\t\t\tcase \"issuerUniqueID\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"subjectUniqueID\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"extensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signatureValue\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Certificate class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * Certificate  ::=  SEQUENCE  {\r\n\t *    tbsCertificate       TBSCertificate,\r\n\t *    signatureAlgorithm   AlgorithmIdentifier,\r\n\t *    signatureValue       BIT STRING  }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [tbsCertificate]\r\n\t\t * @property {string} [signatureAlgorithm]\r\n\t\t * @property {string} [signatureValue]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\ttbsCertificate(names.tbsCertificate),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"signatureAlgorithm\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.signatureValue || \"signatureValue\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"tbsCertificate\",\r\n\t\t\t\"tbsCertificate.extensions\",\r\n\t\t\t\"tbsCertificate.version\",\r\n\t\t\t\"tbsCertificate.serialNumber\",\r\n\t\t\t\"tbsCertificate.signature\",\r\n\t\t\t\"tbsCertificate.issuer\",\r\n\t\t\t\"tbsCertificate.notBefore\",\r\n\t\t\t\"tbsCertificate.notAfter\",\r\n\t\t\t\"tbsCertificate.subject\",\r\n\t\t\t\"tbsCertificate.subjectPublicKeyInfo\",\r\n\t\t\t\"tbsCertificate.issuerUniqueID\",\r\n\t\t\t\"tbsCertificate.subjectUniqueID\",\r\n\t\t\t\"signatureAlgorithm\",\r\n\t\t\t\"signatureValue\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertificate.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\ttbsCertificate: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\textensions: {\r\n\t\t\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\t\t\textensions: \"tbsCertificate.extensions\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for Certificate\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.tbs = asn1.result.tbsCertificate.valueBeforeDecode;\r\n\t\t\r\n\t\tif(\"tbsCertificate.version\" in asn1.result)\r\n\t\t\tthis.version = asn1.result[\"tbsCertificate.version\"].valueBlock.valueDec;\r\n\t\tthis.serialNumber = asn1.result[\"tbsCertificate.serialNumber\"];\r\n\t\tthis.signature = new AlgorithmIdentifier({ schema: asn1.result[\"tbsCertificate.signature\"] });\r\n\t\tthis.issuer = new RelativeDistinguishedNames({ schema: asn1.result[\"tbsCertificate.issuer\"] });\r\n\t\tthis.notBefore = new Time({ schema: asn1.result[\"tbsCertificate.notBefore\"] });\r\n\t\tthis.notAfter = new Time({ schema: asn1.result[\"tbsCertificate.notAfter\"] });\r\n\t\tthis.subject = new RelativeDistinguishedNames({ schema: asn1.result[\"tbsCertificate.subject\"] });\r\n\t\tthis.subjectPublicKeyInfo = new PublicKeyInfo({ schema: asn1.result[\"tbsCertificate.subjectPublicKeyInfo\"] });\r\n\t\tif(\"tbsCertificate.issuerUniqueID\" in asn1.result)\r\n\t\t\tthis.issuerUniqueID = asn1.result[\"tbsCertificate.issuerUniqueID\"].valueBlock.valueHex;\r\n\t\tif(\"tbsCertificate.subjectUniqueID\" in asn1.result)\r\n\t\t\tthis.subjectUniqueID = asn1.result[\"tbsCertificate.subjectUniqueID\"].valueBlock.valueHex;\r\n\t\tif(\"tbsCertificate.extensions\" in asn1.result)\r\n\t\t\tthis.extensions = Array.from(asn1.result[\"tbsCertificate.extensions\"], element => new Extension({ schema: element }));\r\n\t\t\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\r\n\t\tthis.signatureValue = asn1.result.signatureValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Create ASN.1 schema for existing values of TBS part for the certificate\r\n\t */\r\n\tencodeTBS()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif((\"version\" in this) && (this.version !== Certificate.defaultValues(\"version\")))\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Integer({ value: this.version }) // EXPLICIT integer value\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\toutputArray.push(this.serialNumber);\r\n\t\toutputArray.push(this.signature.toSchema());\r\n\t\toutputArray.push(this.issuer.toSchema());\r\n\t\t\r\n\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.notBefore.toSchema(),\r\n\t\t\t\tthis.notAfter.toSchema()\r\n\t\t\t]\r\n\t\t}));\r\n\t\t\r\n\t\toutputArray.push(this.subject.toSchema());\r\n\t\toutputArray.push(this.subjectPublicKeyInfo.toSchema());\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Primitive({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalueHex: this.issuerUniqueID\r\n\t\t\t}));\r\n\t\t}\r\n\t\tif(\"subjectUniqueID\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Primitive({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t},\r\n\t\t\t\tvalueHex: this.subjectUniqueID\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"extensions\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 3 // [3]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [new asn1js.Sequence({\r\n\t\t\t\t\tvalue: Array.from(this.extensions, element => element.toSchema())\r\n\t\t\t\t})]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create and return output sequence\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\tlet tbsSchema = {};\r\n\t\t\r\n\t\t//region Decode stored TBS value\r\n\t\tif(encodeFlag === false)\r\n\t\t{\r\n\t\t\tif(this.tbs.length === 0) // No stored certificate TBS part\r\n\t\t\t\treturn Certificate.schema().value[0];\r\n\t\t\t\r\n\t\t\ttbsSchema = asn1js.fromBER(this.tbs).result;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Create TBS schema via assembling from TBS parts\r\n\t\telse\r\n\t\t\ttbsSchema = this.encodeTBS();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\ttbsSchema,\r\n\t\t\t\tthis.signatureAlgorithm.toSchema(),\r\n\t\t\t\tthis.signatureValue\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\ttbs: bufferToHexCodes(this.tbs, 0, this.tbs.byteLength),\r\n\t\t\tserialNumber: this.serialNumber.toJSON(),\r\n\t\t\tsignature: this.signature.toJSON(),\r\n\t\t\tissuer: this.issuer.toJSON(),\r\n\t\t\tnotBefore: this.notBefore.toJSON(),\r\n\t\t\tnotAfter: this.notAfter.toJSON(),\r\n\t\t\tsubject: this.subject.toJSON(),\r\n\t\t\tsubjectPublicKeyInfo: this.subjectPublicKeyInfo.toJSON(),\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n\t\t\tsignatureValue: this.signatureValue.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif((\"version\" in this) && (this.version !== Certificate.defaultValues(\"version\")))\r\n\t\t\tobject.version = this.version;\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in this)\r\n\t\t\tobject.issuerUniqueID = bufferToHexCodes(this.issuerUniqueID, 0, this.issuerUniqueID.byteLength);\r\n\t\t\r\n\t\tif(\"subjectUniqueID\" in this)\r\n\t\t\tobject.subjectUniqueID = bufferToHexCodes(this.subjectUniqueID, 0, this.subjectUniqueID.byteLength);\r\n\t\t\r\n\t\tif(\"extensions\" in this)\r\n\t\t\tobject.extensions = Array.from(this.extensions, element => element.toJSON());\r\n\t\t\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Importing public key for current certificate\r\n\t */\r\n\tgetPublicKey(parameters = null)\r\n\t{\r\n\t\treturn getEngine().subtle.getPublicKey(this.subjectPublicKeyInfo, this.signatureAlgorithm, parameters);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get hash value for subject public key (default SHA-1)\r\n\t * @param {String} [hashAlgorithm=SHA-1] Hashing algorithm name\r\n\t */\r\n\tgetKeyHash(hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn crypto.digest({ name: hashAlgorithm }, new Uint8Array(this.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Make a signature for current value from TBS section\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm=\"SHA-1\"] Hashing algorithm\r\n\t */\r\n\tsign(privateKey, hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Initial checking\r\n\t\t//region Check private key\r\n\t\tif(typeof privateKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide a private key for signing\");\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tlet parameters;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"default parameters\" for current algorithm and set correct signature algorithm\r\n\t\tsequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tparameters = result.parameters;\r\n\t\t\tthis.signature = result.signatureAlgorithm;\r\n\t\t\tthis.signatureAlgorithm = result.signatureAlgorithm;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create TBS data for signing\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tthis.tbs = this.encodeTBS().toBER(false);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Signing TBS data on provided private key\r\n\t\tsequence = sequence.then(() => engine.subtle.signWithPrivateKey(this.tbs, privateKey, parameters));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.signatureValue = new asn1js.BitString({ valueHex: result });\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\tverify(issuerCertificate = null)\r\n\t{\r\n\t\t//region Global variables\r\n\t\tlet subjectPublicKeyInfo = {};\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Set correct \"subjectPublicKeyInfo\" value\r\n\t\tif(issuerCertificate !== null)\r\n\t\t\tsubjectPublicKeyInfo = issuerCertificate.subjectPublicKeyInfo;\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(this.issuer.isEqual(this.subject)) // Self-signed certificate\r\n\t\t\t\tsubjectPublicKeyInfo = this.subjectPublicKeyInfo;\r\n\t\t}\r\n\t\t\r\n\t\tif((subjectPublicKeyInfo instanceof PublicKeyInfo) === false)\r\n\t\t\treturn Promise.reject(\"Please provide issuer certificate as a parameter\");\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn getEngine().subtle.verifyWithPublicKey(this.tbs, this.signatureValue, subjectPublicKeyInfo, this.signatureAlgorithm);\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"Certificate.js"}