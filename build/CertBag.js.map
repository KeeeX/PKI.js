{"version":3,"sources":["../src/CertBag.js"],"names":["CertBag","constructor","parameters","certId","defaultValues","certValue","parsedValue","fromSchema","schema","memberName","asn1js","Any","Error","compareWithDefault","memberValue","Object","keys","length","names","Sequence","name","blockName","value","ObjectIdentifier","id","Constructed","idBlock","tagClass","tagNumber","asn1","compareSchema","verified","result","valueBlock","toString","asn1Inner","fromBER","valueHex","Certificate","ex","AttributeCertificateV2","toSchema","OctetString","toBER","toJSON"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport Certificate from \"./Certificate.js\";\r\nimport AttributeCertificateV2 from \"./AttributeCertificateV2.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC7292\r\n */\r\nexport default class CertBag\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CertBag class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc certId\r\n\t\t */\r\n\t\tthis.certId = getParametersValue(parameters, \"certId\", CertBag.defaultValues(\"certId\"));\r\n\t\t/**\r\n\t\t * @type {*}\r\n\t\t * @desc certValue\r\n\t\t */\r\n\t\tthis.certValue = getParametersValue(parameters, \"certValue\", CertBag.defaultValues(\"certValue\"));\r\n\t\t\r\n\t\tif(\"parsedValue\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {*}\r\n\t\t\t * @desc parsedValue\r\n\t\t\t */\r\n\t\t\tthis.parsedValue = getParametersValue(parameters, \"parsedValue\", CertBag.defaultValues(\"parsedValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certId\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"certValue\":\r\n\t\t\t\treturn (new asn1js.Any());\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certId\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"certValue\":\r\n\t\t\t\treturn (memberValue instanceof asn1js.Any);\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * CertBag ::= SEQUENCE {\r\n\t *    certId    BAG-TYPE.&id   ({CertTypes}),\r\n\t *    certValue [0] EXPLICIT BAG-TYPE.&Type ({CertTypes}{@certId})\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [id]\r\n\t\t * @property {string} [value]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.id || \"id\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Any({ name: (names.value || \"value\") })] // EXPLICIT ANY value\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"certId\",\r\n\t\t\t\"certValue\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertBag.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tid: \"certId\",\r\n\t\t\t\t\tvalue: \"certValue\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CertBag\");\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Get internal properties from parsed schema \r\n\t\tthis.certId = asn1.result.certId.valueBlock.toString();\r\n\t\tthis.certValue = asn1.result.certValue;\r\n\t\t\r\n\t\tswitch(this.certId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.113549.1.9.22.1\": // x509Certificate\r\n\t\t\t\t{\r\n\t\t\t\t\tconst asn1Inner = asn1js.fromBER(this.certValue.valueBlock.valueHex);\r\n\t\t\t\t\t\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.parsedValue = new Certificate({ schema: asn1Inner.result });\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex) // In some realizations the same OID used for attribute certificates\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.parsedValue = new AttributeCertificateV2({ schema: asn1Inner.result });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.9.22.3\": // attributeCertificate - (!!!) THIS OID IS SUBJECT FOR CHANGE IN FUTURE (!!!)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst asn1Inner = asn1js.fromBER(this.certValue.valueBlock.valueHex);\r\n\t\t\t\t\tthis.parsedValue = new AttributeCertificateV2({ schema: asn1Inner.result });\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.9.22.2\": // sdsiCertificate\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Incorrect \"certId\" value in CertBag: ${this.certId}`);\r\n\t\t}\r\n\t\t//endregion \r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\tif(\"parsedValue\" in this)\r\n\t\t{\r\n\t\t\tif(\"acinfo\" in this.parsedValue) // attributeCertificate\r\n\t\t\t\tthis.certId = \"1.2.840.113549.1.9.22.3\";\r\n\t\t\telse // x509Certificate\r\n\t\t\t\tthis.certId = \"1.2.840.113549.1.9.22.1\";\r\n\r\n\t\t\tthis.certValue = new asn1js.OctetString({ valueHex: this.parsedValue.toSchema().toBER(false) });\r\n\t\t}\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.certId }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [((\"toSchema\" in this.certValue) ? this.certValue.toSchema() : this.certValue)]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tcertId: this.certId,\r\n\t\t\tcertValue: this.certValue.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"CertBag.js"}