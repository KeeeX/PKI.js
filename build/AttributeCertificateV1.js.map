{"version":3,"sources":["../src/AttributeCertificateV1.js"],"names":["AttCertValidityPeriod","constructor","parameters","notBeforeTime","defaultValues","notAfterTime","fromSchema","schema","memberName","Date","Error","names","asn1js","Sequence","name","blockName","value","GeneralizedTime","asn1","compareSchema","verified","result","toDate","toSchema","valueDate","toJSON","IssuerSerial","issuer","serialNumber","issuerUID","GeneralNames","Integer","BitString","optional","valueBlock","push","AttributeCertificateInfoV1","version","baseCertificateID","subjectName","signature","attrCertValidityPeriod","attributes","issuerUniqueID","extensions","AlgorithmIdentifier","Extensions","Choice","Constructed","idBlock","tagClass","tagNumber","Repeated","Attribute","valueDec","Array","from","element","AttributeCertificateV1","acinfo","signatureAlgorithm","signatureValue"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport GeneralNames from \"./GeneralNames.js\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\nimport Attribute from \"./Attribute.js\";\nimport Extensions from \"./Extensions.js\";\n//**************************************************************************************\n/**\n * Class from RFC5755\n */\nexport class AttCertValidityPeriod\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for AttCertValidityPeriod class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {GeneralizedTime}\n\t\t * @desc notBeforeTime\n\t\t */\n\t\tthis.notBeforeTime = getParametersValue(parameters, \"notBeforeTime\", AttCertValidityPeriod.defaultValues(\"notBeforeTime\"));\n\t\t/**\n\t\t * @type {GeneralizedTime}\n\t\t * @desc notAfterTime\n\t\t */\n\t\tthis.notAfterTime = getParametersValue(parameters, \"notAfterTime\", AttCertValidityPeriod.defaultValues(\"notAfterTime\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"notBeforeTime\":\n\t\t\tcase \"notAfterTime\":\n\t\t\t\treturn new Date(0, 0, 0);\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for AttCertValidityPeriod class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * AttCertValidityPeriod  ::= SEQUENCE {\n\t *   notBeforeTime  GeneralizedTime,\n\t *   notAfterTime   GeneralizedTime\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [notBeforeTime]\n\t\t * @property {string} [notAfterTime]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.GeneralizedTime({ name: (names.notBeforeTime || \"\") }),\n\t\t\t\tnew asn1js.GeneralizedTime({ name: (names.notAfterTime || \"\") })\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"notBeforeTime\",\n\t\t\t\"notAfterTime\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tAttCertValidityPeriod.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tnotBeforeTime: \"notBeforeTime\",\n\t\t\t\t\tnotAfterTime: \"notAfterTime\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttCertValidityPeriod\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tthis.notBeforeTime = asn1.result.notBeforeTime.toDate();\n\t\tthis.notAfterTime = asn1.result.notAfterTime.toDate();\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn (new asn1js.Sequence({\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.GeneralizedTime({ valueDate: this.notBeforeTime }),\n\t\t\t\tnew asn1js.GeneralizedTime({ valueDate: this.notAfterTime }),\n\t\t\t]\n\t\t}));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\treturn {\n\t\t\tnotBeforeTime: this.notBeforeTime,\n\t\t\tnotAfterTime: this.notAfterTime\n\t\t};\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Class from RFC5755\n */\nexport class IssuerSerial\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for IssuerSerial class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {RelativeDistinguishedNames}\n\t\t * @desc issuer\n\t\t */\n\t\tthis.issuer = getParametersValue(parameters, \"issuer\", IssuerSerial.defaultValues(\"issuer\"));\n\t\t/**\n\t\t * @type {Integer}\n\t\t * @desc serialNumber\n\t\t */\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", IssuerSerial.defaultValues(\"serialNumber\"));\n\t\t\n\t\tif(\"issuerUID\" in parameters)\n\t\t\t/**\n\t\t\t * @type {BitString}\n\t\t\t * @desc issuerUID\n\t\t\t */\n\t\t\tthis.issuerUID = getParametersValue(parameters, \"issuerUID\", IssuerSerial.defaultValues(\"issuerUID\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"issuer\":\n\t\t\t\treturn new GeneralNames();\n\t\t\tcase \"serialNumber\":\n\t\t\t\treturn new asn1js.Integer();\n\t\t\tcase \"issuerUID\":\n\t\t\t\treturn new asn1js.BitString();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for IssuerSerial class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * IssuerSerial  ::=  SEQUENCE {\n\t *   \tissuer         GeneralNames,\n\t * \t\tserial         CertificateSerialNumber,\n\t * \t\tissuerUID      UniqueIdentifier OPTIONAL\n\t * }\n\t *\n\t * CertificateSerialNumber ::= INTEGER\n\t * UniqueIdentifier  ::=  BIT STRING\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [issuer]\n\t\t * @property {string} [serialNumber]\n\t\t * @property {string} [issuerUID]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tGeneralNames.schema(names.issuer || {}),\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"\") }),\n\t\t\t\tnew asn1js.BitString({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.issuerUID || \"\")\n\t\t\t\t})\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"issuer\",\n\t\t\t\"serialNumber\",\n\t\t\t\"issuerUID\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tIssuerSerial.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tissuer: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"issuer\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tserialNumber: \"serialNumber\",\n\t\t\t\t\tissuerUID: \"issuerUID\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for IssuerSerial\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tthis.issuer = new GeneralNames({ schema: asn1.result.issuer });\n\t\tthis.serialNumber = asn1.result.serialNumber;\n\t\t\n\t\tif(\"issuerUID\" in asn1.result)\n\t\t\tthis.issuerUID = asn1.result.issuerUID;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\tconst result = new asn1js.Sequence({\n\t\t\tvalue: [\n\t\t\t\tthis.issuer.toSchema(),\n\t\t\t\tthis.serialNumber\n\t\t\t]\n\t\t});\n\t\t\n\t\tif(\"issuerUID\" in this)\n\t\t\tresult.valueBlock.value.push(this.issuerUID);\n\t\t\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn result;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst result = {\n\t\t\tissuer: this.issuer.toJSON(),\n\t\t\tserialNumber: this.serialNumber.toJSON()\n\t\t};\n\t\t\n\t\tif(\"issuerUID\" in this)\n\t\t\tresult.issuerUID = this.issuerUID.toJSON();\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Class from RFC5755\n */\nexport class AttributeCertificateInfoV1\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for AttributeCertificateInfoV1 class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {Number}\n\t\t * @desc version\n\t\t */\n\t\tthis.version = getParametersValue(parameters, \"version\", AttributeCertificateInfoV1.defaultValues(\"version\"));\n\t\t\n\t\tif(\"baseCertificateID\" in parameters)\n\t\t\t/**\n\t\t\t * @type {IssuerSerial}\n\t\t\t * @desc baseCertificateID\n\t\t\t */\n\t\t\tthis.baseCertificateID = getParametersValue(parameters, \"baseCertificateID\", AttributeCertificateInfoV1.defaultValues(\"baseCertificateID\"));\n\t\t\n\t\tif(\"subjectName\" in parameters)\n\t\t\t/**\n\t\t\t * @type {GeneralNames}\n\t\t\t * @desc subjectName\n\t\t\t */\n\t\t\tthis.subjectName = getParametersValue(parameters, \"subjectName\", AttributeCertificateInfoV1.defaultValues(\"subjectName\"));\n\n\t\t/**\n\t\t * @type {GeneralNames}\n\t\t * @desc issuer\n\t\t */\n\t\tthis.issuer = getParametersValue(parameters, \"issuer\", AttributeCertificateInfoV1.defaultValues(\"issuer\"));\n\t\t/**\n\t\t * @type {AlgorithmIdentifier}\n\t\t * @desc signature\n\t\t */\n\t\tthis.signature = getParametersValue(parameters, \"signature\", AttributeCertificateInfoV1.defaultValues(\"signature\"));\n\t\t/**\n\t\t * @type {Integer}\n\t\t * @desc serialNumber\n\t\t */\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", AttributeCertificateInfoV1.defaultValues(\"serialNumber\"));\n\t\t/**\n\t\t * @type {AttCertValidityPeriod}\n\t\t * @desc attrCertValidityPeriod\n\t\t */\n\t\tthis.attrCertValidityPeriod = getParametersValue(parameters, \"attrCertValidityPeriod\", AttributeCertificateInfoV1.defaultValues(\"attrCertValidityPeriod\"));\n\t\t/**\n\t\t * @type {Array.<Attribute>}\n\t\t * @desc attributes\n\t\t */\n\t\tthis.attributes = getParametersValue(parameters, \"attributes\", AttributeCertificateInfoV1.defaultValues(\"attributes\"));\n\t\t\n\t\tif(\"issuerUniqueID\" in parameters)\n\t\t\t/**\n\t\t\t * @type {BitString}\n\t\t\t * @desc issuerUniqueID\n\t\t\t */\n\t\t\tthis.issuerUniqueID = getParametersValue(parameters, \"issuerUniqueID\", AttributeCertificateInfoV1.defaultValues(\"issuerUniqueID\"));\n\t\t\t\n\t\tif(\"extensions\" in parameters)\n\t\t\t/**\n\t\t\t * @type {Extensions}\n\t\t\t * @desc extensions\n\t\t\t */\n\t\t\tthis.extensions = getParametersValue(parameters, \"extensions\", AttributeCertificateInfoV1.defaultValues(\"extensions\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"version\":\n\t\t\t\treturn 0;\n\t\t\tcase \"baseCertificateID\":\n\t\t\t\treturn new IssuerSerial();\n\t\t\tcase \"subjectName\":\n\t\t\t\treturn new GeneralNames();\n\t\t\tcase \"issuer\":\n\t\t\t\treturn {};\n\t\t\tcase \"signature\":\n\t\t\t\treturn new AlgorithmIdentifier();\n\t\t\tcase \"serialNumber\":\n\t\t\t\treturn new asn1js.Integer();\n\t\t\tcase \"attrCertValidityPeriod\":\n\t\t\t\treturn new AttCertValidityPeriod();\n\t\t\tcase \"attributes\":\n\t\t\t\treturn [];\n\t\t\tcase \"issuerUniqueID\":\n\t\t\t\treturn new asn1js.BitString();\n\t\t\tcase \"extensions\":\n\t\t\t\treturn new Extensions();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for AttributeCertificateInfoV1 class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * AttributeCertificateInfo ::= SEQUENCE {\n\t * \tversion Version DEFAULT v1,\n\t * \tsubject CHOICE {\n\t * \t\tbaseCertificateID [0] IssuerSerial, -- associated with a Public Key Certificate\n\t * \t\tsubjectName [1] GeneralNames }, -- associated with a name\n\t * \tissuer GeneralNames, -- CA issuing the attribute certificate\n\t * \tsignature AlgorithmIdentifier,\n\t * \tserialNumber CertificateSerialNumber,\n\t * \tattrCertValidityPeriod AttCertValidityPeriod,\n\t * \tattributes SEQUENCE OF Attribute,\n\t * \tissuerUniqueID UniqueIdentifier OPTIONAL,\n\t * \textensions Extensions OPTIONAL\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [issuer]\n\t\t * @property {string} [serialNumber]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\n\t\t\t\tnew asn1js.Choice({\n\t\t\t\t\tvalue: [\n\t\t\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\t\t\tname: (names.baseCertificateID || \"\"),\n\t\t\t\t\t\t\tidBlock: {\n\t\t\t\t\t\t\t\ttagClass: 3,\n\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tvalue: IssuerSerial.schema().valueBlock.value\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\t\t\tname: (names.subjectName || \"\"),\n\t\t\t\t\t\t\tidBlock: {\n\t\t\t\t\t\t\t\ttagClass: 3,\n\t\t\t\t\t\t\t\ttagNumber: 1 // [2]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tvalue: GeneralNames.schema().valueBlock.value\n\t\t\t\t\t\t}),\n\t\t\t\t\t]\n\t\t\t\t}),\n\t\t\t\tGeneralNames.schema({\n\t\t\t\t\tnames: {\n\t\t\t\t\t\tblockName: (names.issuer || \"\")\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tAlgorithmIdentifier.schema(names.signature || {}),\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"\") }),\n\t\t\t\tAttCertValidityPeriod.schema(names.attrCertValidityPeriod || {}),\n\t\t\t\tnew asn1js.Sequence({\n\t\t\t\t\tname: (names.attributes || \"\"),\n\t\t\t\t\tvalue: [\n\t\t\t\t\t\tnew asn1js.Repeated({\n\t\t\t\t\t\t\tvalue: Attribute.schema()\n\t\t\t\t\t\t})\n\t\t\t\t\t]\n\t\t\t\t}),\n\t\t\t\tnew asn1js.BitString({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.issuerUniqueID || \"\")\n\t\t\t\t}),\n\t\t\t\tExtensions.schema(names.extensions || {}, true)\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"version\",\n\t\t\t\"baseCertificateID\",\n\t\t\t\"subjectName\",\n\t\t\t\"issuer\",\n\t\t\t\"signature\",\n\t\t\t\"serialNumber\",\n\t\t\t\"attrCertValidityPeriod\",\n\t\t\t\"attributes\",\n\t\t\t\"issuerUniqueID\",\n\t\t\t\"extensions\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tAttributeCertificateInfoV1.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tversion: \"version\",\n\t\t\t\t\tbaseCertificateID: \"baseCertificateID\",\n\t\t\t\t\tsubjectName: \"subjectName\",\n\t\t\t\t\tissuer: \"issuer\",\n\t\t\t\t\tsignature: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"signature\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tserialNumber: \"serialNumber\",\n\t\t\t\t\tattrCertValidityPeriod: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"attrCertValidityPeriod\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tattributes: \"attributes\",\n\t\t\t\t\tissuerUniqueID: \"issuerUniqueID\",\n\t\t\t\t\textensions: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"extensions\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttributeCertificateInfoV1\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\n\t\t\n\t\tif(\"baseCertificateID\" in asn1.result)\n\t\t{\n\t\t\tthis.baseCertificateID = new IssuerSerial({\n\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\tvalue: asn1.result.baseCertificateID.valueBlock.value\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t\t\n\t\tif(\"subjectName\" in asn1.result)\n\t\t{\n\t\t\tthis.subjectName = new GeneralNames({\n\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\tvalue: asn1.result.subjectName.valueBlock.value\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t\t\n\t\tthis.issuer = asn1.result.issuer;\n\t\tthis.signature = new AlgorithmIdentifier({ schema: asn1.result.signature });\n\t\tthis.serialNumber = asn1.result.serialNumber;\n\t\tthis.attrCertValidityPeriod = new AttCertValidityPeriod({ schema: asn1.result.attrCertValidityPeriod });\n\t\tthis.attributes = Array.from(asn1.result.attributes.valueBlock.value, element => new Attribute({ schema: element }));\n\t\t\n\t\tif(\"issuerUniqueID\" in asn1.result)\n\t\t\tthis.issuerUniqueID = asn1.result.issuerUniqueID;\n\t\t\n\t\tif(\"extensions\" in asn1.result)\n\t\t\tthis.extensions = new Extensions({ schema: asn1.result.extensions });\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\tconst result = new asn1js.Sequence({\n\t\t\tvalue: [new asn1js.Integer({ value: this.version })]\n\t\t});\n\t\t\n\t\tif(\"baseCertificateID\" in this)\n\t\t{\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3,\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tvalue: this.baseCertificateID.toSchema().valueBlock.value\n\t\t\t}));\n\t\t}\n\t\t\n\t\tif(\"subjectName\" in this)\n\t\t{\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3,\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t},\n\t\t\t\tvalue: this.subjectName.toSchema().valueBlock.value\n\t\t\t}));\n\t\t}\n\t\t\n\t\tresult.valueBlock.value.push(this.issuer.toSchema());\n\t\tresult.valueBlock.value.push(this.signature.toSchema());\n\t\tresult.valueBlock.value.push(this.serialNumber);\n\t\tresult.valueBlock.value.push(this.attrCertValidityPeriod.toSchema());\n\t\tresult.valueBlock.value.push(new asn1js.Sequence({\n\t\t\tvalue: Array.from(this.attributes, element => element.toSchema())\n\t\t}));\n\t\t\n\t\tif(\"issuerUniqueID\" in this)\n\t\t\tresult.valueBlock.value.push(this.issuerUniqueID);\n\t\t\n\t\tif(\"extensions\" in this)\n\t\t\tresult.valueBlock.value.push(this.extensions.toSchema());\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst result = {\n\t\t\tversion: this.version\n\t\t};\n\t\t\n\t\tif(\"baseCertificateID\" in this)\n\t\t\tresult.baseCertificateID = this.baseCertificateID.toJSON();\n\t\t\n\t\tif(\"subjectName\" in this)\n\t\t\tresult.subjectName = this.subjectName.toJSON();\n\n\t\tresult.issuer = this.issuer.toJSON();\n\t\tresult.signature = this.signature.toJSON();\n\t\tresult.serialNumber = this.serialNumber.toJSON();\n\t\tresult.attrCertValidityPeriod = this.attrCertValidityPeriod.toJSON();\n\t\tresult.attributes = Array.from(this.attributes, element => element.toJSON());\n\t\t\n\t\tif(\"issuerUniqueID\" in this)\n\t\t\tresult.issuerUniqueID = this.issuerUniqueID.toJSON();\n\t\t\n\t\tif(\"extensions\" in this)\n\t\t\tresult.extensions = this.extensions.toJSON();\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Class from X.509:1997\n */\nexport default class AttributeCertificateV1\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for AttributeCertificateV1 class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {AttributeCertificateInfoV1}\n\t\t * @desc acinfo\n\t\t */\n\t\tthis.acinfo = getParametersValue(parameters, \"acinfo\", AttributeCertificateV1.defaultValues(\"acinfo\"));\n\t\t/**\n\t\t * @type {AlgorithmIdentifier}\n\t\t * @desc signatureAlgorithm\n\t\t */\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", AttributeCertificateV1.defaultValues(\"signatureAlgorithm\"));\n\t\t/**\n\t\t * @type {BitString}\n\t\t * @desc signatureValue\n\t\t */\n\t\tthis.signatureValue = getParametersValue(parameters, \"signatureValue\", AttributeCertificateV1.defaultValues(\"signatureValue\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"acinfo\":\n\t\t\t\treturn new AttributeCertificateInfoV1();\n\t\t\tcase \"signatureAlgorithm\":\n\t\t\t\treturn new AlgorithmIdentifier();\n\t\t\tcase \"signatureValue\":\n\t\t\t\treturn new asn1js.BitString();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for AttributeCertificateV1 class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * AttributeCertificate ::= SEQUENCE {\n\t *   acinfo               AttributeCertificateInfoV1,\n\t *   signatureAlgorithm   AlgorithmIdentifier,\n\t *   signatureValue       BIT STRING\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {Object} [acinfo]\n\t\t * @property {Object} [signatureAlgorithm]\n\t\t * @property {string} [signatureValue]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tAttributeCertificateInfoV1.schema(names.acinfo || {}),\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {}),\n\t\t\t\tnew asn1js.BitString({ name: (names.signatureValue || \"\") })\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"acinfo\",\n\t\t\t\"signatureValue\",\n\t\t\t\"signatureAlgorithm\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tAttributeCertificateV1.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tacinfo: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"acinfo\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tsignatureAlgorithm: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"signatureAlgorithm\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tsignatureValue: \"signatureValue\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttributeCertificateV1\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tthis.acinfo = new AttributeCertificateInfoV1({ schema: asn1.result.acinfo });\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\n\t\tthis.signatureValue = asn1.result.signatureValue;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\treturn (new asn1js.Sequence({\n\t\t\tvalue: [\n\t\t\t\tthis.acinfo.toSchema(),\n\t\t\t\tthis.signatureAlgorithm.toSchema(),\n\t\t\t\tthis.signatureValue\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\treturn {\n\t\t\tacinfo: this.acinfo.toJSON(),\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\n\t\t\tsignatureValue: this.signatureValue.toJSON()\n\t\t};\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n"],"file":"AttributeCertificateV1.js"}