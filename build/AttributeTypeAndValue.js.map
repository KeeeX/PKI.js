{"version":3,"sources":["../src/AttributeTypeAndValue.js"],"names":["AttributeTypeAndValue","constructor","parameters","type","defaultValues","value","fromSchema","schema","memberName","Error","names","asn1js","Sequence","name","blockName","ObjectIdentifier","Any","asn1","compareSchema","verified","result","valueBlock","toString","typeValue","toSchema","toJSON","_object","Object","keys","length","isEqual","compareTo","Utf8String","BmpString","UniversalString","NumericString","PrintableString","TeletexString","VideotexString","IA5String","GraphicString","VisibleString","GeneralString","CharacterString","value1","value2","localeCompare","valueBeforeDecode","ArrayBuffer"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, isEqualBuffer, clearProps } from \"pvutils\";\r\nimport { stringPrep } from \"./common.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class AttributeTypeAndValue\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AttributeTypeAndValue class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc type\r\n\t\t */\r\n\t\tthis.type = getParametersValue(parameters, \"type\", AttributeTypeAndValue.defaultValues(\"type\"));\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @desc Value of the AttributeTypeAndValue class\r\n\t\t */\r\n\t\tthis.value = getParametersValue(parameters, \"value\", AttributeTypeAndValue.defaultValues(\"value\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"type\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"value\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AttributeTypeAndValue class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * AttributeTypeAndValue ::= Sequence {\r\n\t *    type     AttributeType,\r\n\t *    value    AttributeValue }\r\n\t *\r\n\t * AttributeType ::= OBJECT IDENTIFIER\r\n\t *\r\n\t * AttributeValue ::= ANY -- DEFINED BY AttributeType\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName] Name for entire block\r\n\t\t * @property {string} [type] Name for \"type\" element\r\n\t\t * @property {string} [value] Name for \"value\" element\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.type || \"\") }),\r\n\t\t\t\tnew asn1js.Any({ name: (names.value || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"type\",\r\n\t\t\t\"typeValue\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAttributeTypeAndValue.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\ttype: \"type\",\r\n\t\t\t\t\tvalue: \"typeValue\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttributeTypeAndValue\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.type = asn1.result.type.valueBlock.toString();\r\n\t\t// noinspection JSUnresolvedVariable\r\n\t\tthis.value = asn1.result.typeValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.type }),\r\n\t\t\t\tthis.value\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\ttype: this.type\r\n\t\t};\r\n\r\n\t\tif(Object.keys(this.value).length !== 0)\r\n\t\t\t_object.value = this.value.toJSON();\r\n\t\telse\r\n\t\t\t_object.value = this.value;\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare two AttributeTypeAndValue values, or AttributeTypeAndValue with ArrayBuffer value\r\n\t * @param {(AttributeTypeAndValue|ArrayBuffer)} compareTo The value compare to current\r\n\t * @returns {boolean}\r\n\t */\r\n\tisEqual(compareTo)\r\n\t{\r\n\t\tif(compareTo instanceof AttributeTypeAndValue)\r\n\t\t{\r\n\t\t\tif(this.type !== compareTo.type)\r\n\t\t\t\treturn false;\r\n\t\t\t\r\n\t\t\t// noinspection OverlyComplexBooleanExpressionJS\r\n\t\t\tif(((this.value instanceof asn1js.Utf8String) && (compareTo.value instanceof asn1js.Utf8String)) ||\r\n\t\t\t\t((this.value instanceof asn1js.BmpString) && (compareTo.value instanceof asn1js.BmpString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.UniversalString) && (compareTo.value instanceof asn1js.UniversalString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.NumericString) && (compareTo.value instanceof asn1js.NumericString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.PrintableString) && (compareTo.value instanceof asn1js.PrintableString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.TeletexString) && (compareTo.value instanceof asn1js.TeletexString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.VideotexString) && (compareTo.value instanceof asn1js.VideotexString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.IA5String) && (compareTo.value instanceof asn1js.IA5String)) ||\r\n\t\t\t\t((this.value instanceof asn1js.GraphicString) && (compareTo.value instanceof asn1js.GraphicString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.VisibleString) && (compareTo.value instanceof asn1js.VisibleString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.GeneralString) && (compareTo.value instanceof asn1js.GeneralString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.CharacterString) && (compareTo.value instanceof asn1js.CharacterString)))\r\n\t\t\t{\r\n\t\t\t\tconst value1 = stringPrep(this.value.valueBlock.value);\r\n\t\t\t\tconst value2 = stringPrep(compareTo.value.valueBlock.value);\r\n\t\t\t\t\r\n\t\t\t\tif(value1.localeCompare(value2) !== 0)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse // Comparing as two ArrayBuffers\r\n\t\t\t{\r\n\t\t\t\tif(isEqualBuffer(this.value.valueBeforeDecode, compareTo.value.valueBeforeDecode) === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\tif(compareTo instanceof ArrayBuffer)\r\n\t\t\treturn isEqualBuffer(this.value.valueBeforeDecode, compareTo);\r\n\r\n\t\treturn false;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"AttributeTypeAndValue.js"}