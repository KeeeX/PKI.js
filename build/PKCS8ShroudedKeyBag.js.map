{"version":3,"sources":["../src/PKCS8ShroudedKeyBag.js"],"names":["PKCS8ShroudedKeyBag","constructor","parameters","encryptionAlgorithm","defaultValues","encryptedData","parsedValue","fromSchema","schema","memberName","AlgorithmIdentifier","asn1js","OctetString","Error","compareWithDefault","memberValue","algorithmId","isEqual","Object","keys","length","names","Sequence","name","blockName","value","Choice","idBlock","isConstructed","asn1","compareSchema","verified","result","toSchema","toJSON","parseInternalValues","sequence","Promise","resolve","cmsEncrypted","EncryptedData","encryptedContentInfo","EncryptedContentInfo","contentEncryptionAlgorithm","encryptedContent","then","decrypt","error","reject","fromBER","offset","PrivateKeyInfo","makeInternalValues","contentToEncrypt","toBER","encrypt"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport EncryptedData from \"./EncryptedData.js\";\r\nimport EncryptedContentInfo from \"./EncryptedContentInfo.js\";\r\nimport PrivateKeyInfo from \"./PrivateKeyInfo.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC7292\r\n */\r\nexport default class PKCS8ShroudedKeyBag \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PKCS8ShroudedKeyBag class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc encryptionAlgorithm\r\n\t\t */\r\n\t\tthis.encryptionAlgorithm = getParametersValue(parameters, \"encryptionAlgorithm\", PKCS8ShroudedKeyBag.defaultValues(\"encryptionAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc encryptedData\r\n\t\t */\r\n\t\tthis.encryptedData = getParametersValue(parameters, \"encryptedData\", PKCS8ShroudedKeyBag.defaultValues(\"encryptedData\"));\r\n\t\t\r\n\t\tif(\"parsedValue\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {*}\r\n\t\t\t * @desc parsedValue\r\n\t\t\t */\r\n\t\t\tthis.parsedValue = getParametersValue(parameters, \"parsedValue\", PKCS8ShroudedKeyBag.defaultValues(\"parsedValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"encryptionAlgorithm\":\r\n\t\t\t\treturn (new AlgorithmIdentifier());\r\n\t\t\tcase \"encryptedData\":\r\n\t\t\t\treturn (new asn1js.OctetString());\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PKCS8ShroudedKeyBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"encryptionAlgorithm\":\r\n\t\t\t\treturn ((AlgorithmIdentifier.compareWithDefault(\"algorithmId\", memberValue.algorithmId)) &&\r\n\t\t\t\t((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"encryptedData\":\r\n\t\t\t\treturn (memberValue.isEqual(PKCS8ShroudedKeyBag.defaultValues(memberName)));\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PKCS8ShroudedKeyBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PKCS8ShroudedKeyBag ::= EncryptedPrivateKeyInfo\r\n\t *\r\n\t * EncryptedPrivateKeyInfo ::= SEQUENCE {\r\n\t *    encryptionAlgorithm AlgorithmIdentifier {{KeyEncryptionAlgorithms}},\r\n\t *    encryptedData EncryptedData\r\n\t * }\r\n\t *\r\n\t * EncryptedData ::= OCTET STRING\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [encryptionAlgorithm]\r\n\t\t * @property {string} [encryptedData]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.encryptionAlgorithm || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"encryptionAlgorithm\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.OctetString({ name: (names.encryptedData || \"encryptedData\") }),\r\n\t\t\t\t\t\tnew asn1js.OctetString({\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\tisConstructed: true\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tname: (names.encryptedData || \"encryptedData\")\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"encryptionAlgorithm\",\r\n\t\t\t\"encryptedData\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPKCS8ShroudedKeyBag.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tencryptionAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"encryptionAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tencryptedData: \"encryptedData\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PKCS8ShroudedKeyBag\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.encryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.encryptionAlgorithm });\r\n\t\tthis.encryptedData = asn1.result.encryptedData;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.encryptionAlgorithm.toSchema(),\r\n\t\t\t\tthis.encryptedData\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tencryptionAlgorithm: this.encryptionAlgorithm.toJSON(),\r\n\t\t\tencryptedData: this.encryptedData.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\tparseInternalValues(parameters)\r\n\t{\r\n\t\t//region Initial variables \r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst cmsEncrypted = new EncryptedData({\r\n\t\t\tencryptedContentInfo: new EncryptedContentInfo({\r\n\t\t\t\tcontentEncryptionAlgorithm: this.encryptionAlgorithm,\r\n\t\t\t\tencryptedContent: this.encryptedData\r\n\t\t\t})\r\n\t\t});\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Decrypt internal data \r\n\t\tsequence = sequence.then(\r\n\t\t\t() => cmsEncrypted.decrypt(parameters),\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initialize \"parsedValue\" with decrypted PKCS#8 private key \r\n\t\tsequence = sequence.then(\r\n\t\t\t/**\r\n\t\t\t * @param {ArrayBuffer} result\r\n\t\t\t */\r\n\t\t\tresult =>\r\n\t\t\t{\r\n\t\t\t\tconst asn1 = asn1js.fromBER(result);\r\n\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\treturn Promise.reject(\"Error during parsing ASN.1 data\");\r\n\t\t\t\t\r\n\t\t\t\tthis.parsedValue = new PrivateKeyInfo({ schema: asn1.result });\r\n\t\t\t\t\r\n\t\t\t\treturn Promise.resolve();\r\n\t\t\t},\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion \r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\tmakeInternalValues(parameters)\r\n\t{\r\n\t\t//region Check that we do have \"parsedValue\" \r\n\t\tif((\"parsedValue\" in this) === false)\r\n\t\t\treturn Promise.reject(\"Please initialize \\\"parsedValue\\\" first\");\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initial variables \r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst cmsEncrypted = new EncryptedData();\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Encrypt internal data \r\n\t\tsequence = sequence.then(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tparameters.contentToEncrypt = this.parsedValue.toSchema().toBER(false);\r\n\t\t\t\t\r\n\t\t\t\treturn cmsEncrypted.encrypt(parameters);\r\n\t\t\t},\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initialize internal values \r\n\t\tsequence = sequence.then(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tthis.encryptionAlgorithm = cmsEncrypted.encryptedContentInfo.contentEncryptionAlgorithm;\r\n\t\t\t\tthis.encryptedData = cmsEncrypted.encryptedContentInfo.encryptedContent;\r\n\t\t\t}\r\n\t\t);\r\n\t\t//endregion \r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"PKCS8ShroudedKeyBag.js"}