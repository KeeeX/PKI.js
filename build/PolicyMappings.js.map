{"version":3,"sources":["../src/PolicyMappings.js"],"names":["PolicyMappings","constructor","parameters","mappings","defaultValues","fromSchema","schema","memberName","Error","names","asn1js","Sequence","name","blockName","value","Repeated","PolicyMapping","asn1","compareSchema","verified","Array","from","result","element","toSchema","toJSON"],"mappings":"6FAAA,sDACA,gCACA,yE,gfACA;AACA;;GAGe,KAAMA,CAAAA,cACrB,CACC;AACA;;;;IAKAC,WAAW,CAACC,UAAU,CAAG,EAAd,CACX,CACC;AACA;;;KAIA,KAAKC,QAAL,CAAgB,gCAAmBD,UAAnB,CAA+B,UAA/B,CAA2CF,cAAc,CAACI,aAAf,CAA6B,UAA7B,CAA3C,CAAhB,CACA;AAEA;AACA,GAAG,UAAYF,CAAAA,UAAf,CACC,KAAKG,UAAL,CAAgBH,UAAU,CAACI,MAA3B,EACD;AACA,CACD;AACA;;;IAIA,MAAOF,CAAAA,aAAP,CAAqBG,UAArB,CACA,CACC,OAAOA,UAAP,EAEC,IAAK,UAAL,CACC,MAAO,EAAP,CACD,QACC,KAAM,IAAIC,CAAAA,KAAJ,CAAW,iDAAgDD,UAAW,EAAtE,CAAN,CALF,CAOA,CACD;AACA;;;;;;;;;;IAWA,MAAOD,CAAAA,MAAP,CAAcJ,UAAU,CAAG,EAA3B,CACA,CACC;;;;;KAMA,KAAMO,CAAAA,KAAK,CAAG,gCAAmBP,UAAnB,CAA+B,OAA/B,CAAwC,EAAxC,CAAd,CAEA,MAAQ,IAAIQ,CAAAA,MAAM,CAACC,QAAX,CAAoB,CAC3BC,IAAI,CAAGH,KAAK,CAACI,SAAN,EAAmB,EADC,CAE3BC,KAAK,CAAE,CACN,GAAIJ,CAAAA,MAAM,CAACK,QAAX,CAAoB,CACnBH,IAAI,CAAGH,KAAK,CAACN,QAAN,EAAkB,EADN,CAEnBW,KAAK,CAAEE,uBAAcV,MAAd,EAFY,CAApB,CADM,CAFoB,CAApB,CAAR,CASA,CACD;AACA;;;IAIAD,UAAU,CAACC,MAAD,CACV,CACC;AACA,wBAAWA,MAAX,CAAmB,CAClB,UADkB,CAAnB,EAGA;AAEA;AACA,KAAMW,CAAAA,IAAI,CAAGP,MAAM,CAACQ,aAAP,CAAqBZ,MAArB,CACZA,MADY,CAEZN,cAAc,CAACM,MAAf,CAAsB,CACrBG,KAAK,CAAE,CACNN,QAAQ,CAAE,UADJ,CADc,CAAtB,CAFY,CAAb,CASA,GAAGc,IAAI,CAACE,QAAL,GAAkB,KAArB,CACC,KAAM,IAAIX,CAAAA,KAAJ,CAAU,wEAAV,CAAN,CACD;AAEA;AACA,KAAKL,QAAL,CAAgBiB,KAAK,CAACC,IAAN,CAAWJ,IAAI,CAACK,MAAL,CAAYnB,QAAvB,CAAiCoB,OAAO,EAAI,GAAIP,uBAAJ,CAAkB,CAAEV,MAAM,CAAEiB,OAAV,CAAlB,CAA5C,CAAhB,CACA;AACA,CACD;AACA;;;IAIAC,QAAQ,EACR,CACC;AACA,MAAQ,IAAId,CAAAA,MAAM,CAACC,QAAX,CAAoB,CAC3BG,KAAK,CAAEM,KAAK,CAACC,IAAN,CAAW,KAAKlB,QAAhB,CAA0BoB,OAAO,EAAIA,OAAO,CAACC,QAAR,EAArC,CADoB,CAApB,CAAR,CAGA;AACA,CACD;AACA;;;IAIAC,MAAM,EACN,CACC,MAAO,CACNtB,QAAQ,CAAEiB,KAAK,CAACC,IAAN,CAAW,KAAKlB,QAAhB,CAA0BoB,OAAO,EAAIA,OAAO,CAACE,MAAR,EAArC,CADJ,CAAP,CAGA,CACD;AA5HD,CA8HA","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport PolicyMapping from \"./PolicyMapping.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class PolicyMappings\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PolicyMappings class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<PolicyMapping>}\r\n\t\t * @desc mappings\r\n\t\t */\r\n\t\tthis.mappings = getParametersValue(parameters, \"mappings\", PolicyMappings.defaultValues(\"mappings\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"mappings\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PolicyMappings class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PolicyMappings ::= SEQUENCE SIZE (1..MAX) OF PolicyMapping\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [utcTimeName] Name for \"utcTimeName\" choice\r\n\t\t * @property {string} [generalTimeName] Name for \"generalTimeName\" choice\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.mappings || \"\"),\r\n\t\t\t\t\tvalue: PolicyMapping.schema()\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"mappings\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPolicyMappings.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tmappings: \"mappings\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PolicyMappings\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.mappings = Array.from(asn1.result.mappings, element => new PolicyMapping({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.mappings, element => element.toSchema())\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tmappings: Array.from(this.mappings, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"PolicyMappings.js"}