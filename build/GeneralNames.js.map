{"version":3,"sources":["../src/GeneralNames.js"],"names":["GeneralNames","constructor","parameters","names","defaultValues","fromSchema","schema","memberName","Error","optional","asn1js","Sequence","name","blockName","value","Repeated","generalNames","GeneralName","asn1","compareSchema","verified","Array","from","result","element","toSchema","toJSON"],"mappings":"6FAAA,sDACA,gCACA,qE,gfACA;AACA;;GAGe,KAAMA,CAAAA,YACrB,CACC;AACA;;;;IAKAC,WAAW,CAACC,UAAU,CAAG,EAAd,CACX,CACC;AACA;;;KAIA,KAAKC,KAAL,CAAa,gCAAmBD,UAAnB,CAA+B,OAA/B,CAAwCF,YAAY,CAACI,aAAb,CAA2B,OAA3B,CAAxC,CAAb,CACA;AAEA;AACA,GAAG,UAAYF,CAAAA,UAAf,CACC,KAAKG,UAAL,CAAgBH,UAAU,CAACI,MAA3B,EACD;AACA,CACD;AACA;;;IAIA,MAAOF,CAAAA,aAAP,CAAqBG,UAArB,CACA,CACC,OAAOA,UAAP,EAEC,IAAK,OAAL,CACC,MAAO,EAAP,CACD,QACC,KAAM,IAAIC,CAAAA,KAAJ,CAAW,+CAA8CD,UAAW,EAApE,CAAN,CALF,CAOA,CACD;AACA;;;;;;;;;;;IAYA,MAAOD,CAAAA,MAAP,CAAcJ,UAAU,CAAG,EAA3B,CAA+BO,QAAQ,CAAG,KAA1C,CACA,CACC;;;;KAKA,KAAMN,CAAAA,KAAK,CAAG,gCAAmBD,UAAnB,CAA+B,OAA/B,CAAwC,EAAxC,CAAd,CAEA,MAAQ,IAAIQ,CAAAA,MAAM,CAACC,QAAX,CAAoB,CAC3BF,QAD2B,CAE3BG,IAAI,CAAGT,KAAK,CAACU,SAAN,EAAmB,EAFC,CAG3BC,KAAK,CAAE,CACN,GAAIJ,CAAAA,MAAM,CAACK,QAAX,CAAoB,CACnBH,IAAI,CAAGT,KAAK,CAACa,YAAN,EAAsB,EADV,CAEnBF,KAAK,CAAEG,qBAAYX,MAAZ,EAFY,CAApB,CADM,CAHoB,CAApB,CAAR,CAUA,CACD;AACA;;;IAIAD,UAAU,CAACC,MAAD,CACV,CACC;AACA,wBAAWA,MAAX,CAAmB,CAClB,OADkB,CAElB,cAFkB,CAAnB,EAIA;AAEA;AACA,KAAMY,CAAAA,IAAI,CAAGR,MAAM,CAACS,aAAP,CAAqBb,MAArB,CACZA,MADY,CAEZN,YAAY,CAACM,MAAb,CAAoB,CACnBH,KAAK,CAAE,CACNU,SAAS,CAAE,OADL,CAENG,YAAY,CAAE,cAFR,CADY,CAApB,CAFY,CAAb,CAUA,GAAGE,IAAI,CAACE,QAAL,GAAkB,KAArB,CACC,KAAM,IAAIZ,CAAAA,KAAJ,CAAU,sEAAV,CAAN,CACD;AAEA;AACA,KAAKL,KAAL,CAAakB,KAAK,CAACC,IAAN,CAAWJ,IAAI,CAACK,MAAL,CAAYP,YAAvB,CAAqCQ,OAAO,EAAI,GAAIP,qBAAJ,CAAgB,CAAEX,MAAM,CAAEkB,OAAV,CAAhB,CAAhD,CAAb,CACA;AACA,CACD;AACA;;;IAIAC,QAAQ,EACR,CACC;AACA,MAAQ,IAAIf,CAAAA,MAAM,CAACC,QAAX,CAAoB,CAC3BG,KAAK,CAAEO,KAAK,CAACC,IAAN,CAAW,KAAKnB,KAAhB,CAAuBqB,OAAO,EAAIA,OAAO,CAACC,QAAR,EAAlC,CADoB,CAApB,CAAR,CAGA;AACA,CACD;AACA;;;IAIAC,MAAM,EACN,CACC,MAAO,CACNvB,KAAK,CAAEkB,KAAK,CAACC,IAAN,CAAW,KAAKnB,KAAhB,CAAuBqB,OAAO,EAAIA,OAAO,CAACE,MAAR,EAAlC,CADD,CAAP,CAGA,CACD;AA/HD,CAiIA","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport GeneralName from \"./GeneralName.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class GeneralNames\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for GeneralNames class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<GeneralName>}\r\n\t\t * @desc Array of \"general names\"\r\n\t\t */\r\n\t\tthis.names = getParametersValue(parameters, \"names\", GeneralNames.defaultValues(\"names\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"names\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for GeneralNames class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * GeneralNames ::= SEQUENCE SIZE (1..MAX) OF GeneralName\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @param {boolean} [optional=false] Flag would be element optional or not\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {}, optional = false)\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} utcTimeName Name for \"utcTimeName\" choice\r\n\t\t * @property {string} generalTimeName Name for \"generalTimeName\" choice\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\toptional,\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.generalNames || \"\"),\r\n\t\t\t\t\tvalue: GeneralName.schema()\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"names\",\r\n\t\t\t\"generalNames\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tGeneralNames.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"names\",\r\n\t\t\t\t\tgeneralNames: \"generalNames\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for GeneralNames\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.names = Array.from(asn1.result.generalNames, element => new GeneralName({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.names, element => element.toSchema())\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tnames: Array.from(this.names, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"GeneralNames.js"}