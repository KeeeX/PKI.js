{"version":3,"sources":["../src/SignedCertificateTimestampList.js"],"names":["SignedCertificateTimestamp","constructor","parameters","version","defaultValues","logID","timestamp","extensions","hashAlgorithm","signatureAlgorithm","signature","fromSchema","schema","fromStream","stream","memberName","ArrayBuffer","Date","asn1js","Any","Error","RawData","seqStream","SeqStream","ByteStream","buffer","data","blockLength","getUint16","getBlock","Uint8Array","slice","extensionsLength","signatureLength","signatureData","asn1","fromBER","offset","result","toSchema","toStream","appendUint16","byteLength","valueBeforeDecode","appendChar","appendView","timeBuffer","timeView","baseArray","valueOf","set","_hashAlgorithm","toLowerCase","_signatureAlgorithm","_signature","toBER","toJSON","verify","logs","dataType","logId","publicKeyBase64","publicKeyInfo","log","log_id","key","PublicKeyInfo","appendUint24","subtle","verifyWithPublicKey","_stream","_buffer","_length","valueBlock","valueHex","algorithmId","SignedCertificateTimestampList","timestamps","compareWithDefault","memberValue","length","names","optional","OctetString","name","blockName","dataLength","push","overallLength","timestampsData","timestampStream","view","Array","from","element","verifySCTsForCertificate","certificate","issuerCertificate","index","parsedValue","tbs","issuerId","preCert","crypto","Promise","reject","i","extnID","splice","encodeTBS","digest","subjectPublicKeyInfo","verifyArray","verifyResult"],"mappings":"0LAAA,sDACA,gCACA,0CACA,mCACA,yE,mjCACA;AACO,KAAMA,CAAAA,0BACb,CACC;AACA;;;;IAKAC,WAAW,CAACC,UAAU,CAAG,EAAd,CACX,CACC;AACA;;;KAIA,KAAKC,OAAL,CAAe,gCAAmBD,UAAnB,CAA+B,SAA/B,CAA0CF,0BAA0B,CAACI,aAA3B,CAAyC,SAAzC,CAA1C,CAAf,CACA;;;KAIA,KAAKC,KAAL,CAAa,gCAAmBH,UAAnB,CAA+B,OAA/B,CAAwCF,0BAA0B,CAACI,aAA3B,CAAyC,OAAzC,CAAxC,CAAb,CACA;;;KAIA,KAAKE,SAAL,CAAiB,gCAAmBJ,UAAnB,CAA+B,WAA/B,CAA4CF,0BAA0B,CAACI,aAA3B,CAAyC,WAAzC,CAA5C,CAAjB,CACA;;;KAIA,KAAKG,UAAL,CAAkB,gCAAmBL,UAAnB,CAA+B,YAA/B,CAA6CF,0BAA0B,CAACI,aAA3B,CAAyC,YAAzC,CAA7C,CAAlB,CACA;;;KAIA,KAAKI,aAAL,CAAqB,gCAAmBN,UAAnB,CAA+B,eAA/B,CAAgDF,0BAA0B,CAACI,aAA3B,CAAyC,eAAzC,CAAhD,CAArB,CACA;;;KAIA,KAAKK,kBAAL,CAA0B,gCAAmBP,UAAnB,CAA+B,oBAA/B,CAAqDF,0BAA0B,CAACI,aAA3B,CAAyC,oBAAzC,CAArD,CAA1B,CACA;;;KAIA,KAAKM,SAAL,CAAiB,gCAAmBR,UAAnB,CAA+B,WAA/B,CAA4CF,0BAA0B,CAACI,aAA3B,CAAyC,WAAzC,CAA5C,CAAjB,CACA;AAEA;AACA,GAAG,UAAYF,CAAAA,UAAf,CACC,KAAKS,UAAL,CAAgBT,UAAU,CAACU,MAA3B,EACD;AAEA;AACA,GAAG,UAAYV,CAAAA,UAAf,CACC,KAAKW,UAAL,CAAgBX,UAAU,CAACY,MAA3B,EACD;AACA,CACD;AACA;;;IAIA,MAAOV,CAAAA,aAAP,CAAqBW,UAArB,CACA,CACC,OAAOA,UAAP,EAEC,IAAK,SAAL,CACC,MAAO,EAAP,CACD,IAAK,OAAL,CACA,IAAK,YAAL,CACC,MAAO,IAAIC,CAAAA,WAAJ,CAAgB,CAAhB,CAAP,CACD,IAAK,WAAL,CACC,MAAO,IAAIC,CAAAA,IAAJ,CAAS,CAAT,CAAP,CACD,IAAK,eAAL,CACA,IAAK,oBAAL,CACC,MAAO,EAAP,CACD,IAAK,WAAL,CACC,MAAO,IAAIC,CAAAA,MAAM,CAACC,GAAX,EAAP,CACD,QACC,KAAM,IAAIC,CAAAA,KAAJ,CAAW,6DAA4DL,UAAW,EAAlF,CAAN,CAfF,CAiBA,CACD;AACA;;;IAIAJ,UAAU,CAACC,MAAD,CACV,CACC,GAAIA,MAAM,WAAYM,CAAAA,MAAM,CAACG,OAA1B,GAAuC,KAA1C,CACC,KAAM,IAAID,CAAAA,KAAJ,CAAU,oFAAV,CAAN,CAED,KAAME,CAAAA,SAAS,CAAG,GAAIC,wBAAJ,CAAc,CAC/BT,MAAM,CAAE,GAAIU,yBAAJ,CAAe,CACtBC,MAAM,CAAEb,MAAM,CAACc,IADO,CAAf,CADuB,CAAd,CAAlB,CAMA,KAAKb,UAAL,CAAgBS,SAAhB,EACA,CACD;AACA;;;IAIAT,UAAU,CAACC,MAAD,CACV,CACC,KAAMa,CAAAA,WAAW,CAAGb,MAAM,CAACc,SAAP,EAApB,CAEA,KAAKzB,OAAL,CAAgBW,MAAM,CAACe,QAAP,CAAgB,CAAhB,CAAD,CAAqB,CAArB,CAAf,CAEA,GAAG,KAAK1B,OAAL,GAAiB,CAApB,CACA,CACC,KAAKE,KAAL,CAAc,GAAIyB,CAAAA,UAAJ,CAAehB,MAAM,CAACe,QAAP,CAAgB,EAAhB,CAAf,CAAD,CAAsCJ,MAAtC,CAA6CM,KAA7C,CAAmD,CAAnD,CAAb,CACA,KAAKzB,SAAL,CAAiB,GAAIW,CAAAA,IAAJ,CAAS,0BAAa,GAAIa,CAAAA,UAAJ,CAAehB,MAAM,CAACe,QAAP,CAAgB,CAAhB,CAAf,CAAb,CAAiD,CAAjD,CAAT,CAAjB,CAEA;AACA,KAAMG,CAAAA,gBAAgB,CAAGlB,MAAM,CAACc,SAAP,EAAzB,CACA,KAAKrB,UAAL,CAAmB,GAAIuB,CAAAA,UAAJ,CAAehB,MAAM,CAACe,QAAP,CAAgBG,gBAAhB,CAAf,CAAD,CAAoDP,MAApD,CAA2DM,KAA3D,CAAiE,CAAjE,CAAlB,CACA;AAEA;AACA,OAAQjB,MAAM,CAACe,QAAP,CAAgB,CAAhB,CAAD,CAAqB,CAArB,CAAP,EAEC,IAAK,EAAL,CACC,KAAKrB,aAAL,CAAqB,MAArB,CACA,MACD,IAAK,EAAL,CACC,KAAKA,aAAL,CAAqB,KAArB,CACA,MACD,IAAK,EAAL,CACC,KAAKA,aAAL,CAAqB,MAArB,CACA,MACD,IAAK,EAAL,CACC,KAAKA,aAAL,CAAqB,QAArB,CACA,MACD,IAAK,EAAL,CACC,KAAKA,aAAL,CAAqB,QAArB,CACA,MACD,IAAK,EAAL,CACC,KAAKA,aAAL,CAAqB,QAArB,CACA,MACD,IAAK,EAAL,CACC,KAAKA,aAAL,CAAqB,QAArB,CACA,MACD,QACC,KAAM,IAAIY,CAAAA,KAAJ,CAAU,gEAAV,CAAN,CAxBF,CA0BA;AAEA;AACA,OAAQN,MAAM,CAACe,QAAP,CAAgB,CAAhB,CAAD,CAAqB,CAArB,CAAP,EAEC,IAAK,EAAL,CACC,KAAKpB,kBAAL,CAA0B,WAA1B,CACA,MACD,IAAK,EAAL,CACC,KAAKA,kBAAL,CAA0B,KAA1B,CACA,MACD,IAAK,EAAL,CACC,KAAKA,kBAAL,CAA0B,KAA1B,CACA,MACD,IAAK,EAAL,CACC,KAAKA,kBAAL,CAA0B,OAA1B,CACA,MACD,QACC,KAAM,IAAIW,CAAAA,KAAJ,CAAU,gEAAV,CAAN,CAfF,CAiBA;AAEA;AACA,KAAMa,CAAAA,eAAe,CAAGnB,MAAM,CAACc,SAAP,EAAxB,CACA,KAAMM,CAAAA,aAAa,CAAI,GAAIJ,CAAAA,UAAJ,CAAehB,MAAM,CAACe,QAAP,CAAgBI,eAAhB,CAAf,CAAD,CAAmDR,MAAnD,CAA0DM,KAA1D,CAAgE,CAAhE,CAAtB,CAEA,KAAMI,CAAAA,IAAI,CAAGjB,MAAM,CAACkB,OAAP,CAAeF,aAAf,CAAb,CACA,GAAGC,IAAI,CAACE,MAAL,GAAiB,CAAC,CAArB,CACC,KAAM,IAAIjB,CAAAA,KAAJ,CAAU,gEAAV,CAAN,CAED,KAAKV,SAAL,CAAiByB,IAAI,CAACG,MAAtB,CACA;AAEA,GAAGX,WAAW,GAAM,GAAKK,gBAAL,CAAwBC,eAA5C,CACC,KAAM,IAAIb,CAAAA,KAAJ,CAAU,gEAAV,CAAN,CACD,CACD,CACD;AACA;;;IAIAmB,QAAQ,EACR,CACC,KAAMzB,CAAAA,MAAM,CAAG,KAAK0B,QAAL,EAAf,CAEA,MAAO,IAAItB,CAAAA,MAAM,CAACG,OAAX,CAAmB,CAAEK,IAAI,CAAEZ,MAAM,CAACA,MAAP,CAAcW,MAAtB,CAAnB,CAAP,CACA,CACD;AACA;;;IAIAe,QAAQ,EACR,CACC,KAAM1B,CAAAA,MAAM,CAAG,GAAIS,wBAAJ,EAAf,CAEAT,MAAM,CAAC2B,YAAP,CAAoB,GAAK,KAAKlC,UAAL,CAAgBmC,UAArB,CAAkC,KAAKhC,SAAL,CAAeiC,iBAAf,CAAiCD,UAAvF,EACA5B,MAAM,CAAC8B,UAAP,CAAkB,KAAKzC,OAAvB,EACAW,MAAM,CAAC+B,UAAP,CAAkB,GAAIf,CAAAA,UAAJ,CAAe,KAAKzB,KAApB,CAAlB,EAEA,KAAMyC,CAAAA,UAAU,CAAG,GAAI9B,CAAAA,WAAJ,CAAgB,CAAhB,CAAnB,CACA,KAAM+B,CAAAA,QAAQ,CAAG,GAAIjB,CAAAA,UAAJ,CAAegB,UAAf,CAAjB,CAEA,KAAME,CAAAA,SAAS,CAAG,wBAAW,KAAK1C,SAAL,CAAe2C,OAAf,EAAX,CAAqC,CAArC,CAAlB,CACAF,QAAQ,CAACG,GAAT,CAAa,GAAIpB,CAAAA,UAAJ,CAAekB,SAAf,CAAb,CAAwC,EAAIA,SAAS,CAACN,UAAtD,EAEA5B,MAAM,CAAC+B,UAAP,CAAkBE,QAAlB,EACAjC,MAAM,CAAC2B,YAAP,CAAoB,KAAKlC,UAAL,CAAgBmC,UAApC,EAEA,GAAG,KAAKnC,UAAL,CAAgBmC,UAAnB,CACC5B,MAAM,CAAC+B,UAAP,CAAkB,GAAIf,CAAAA,UAAJ,CAAe,KAAKvB,UAApB,CAAlB,EAED,GAAI4C,CAAAA,cAAJ,CAEA,OAAO,KAAK3C,aAAL,CAAmB4C,WAAnB,EAAP,EAEC,IAAK,MAAL,CACCD,cAAc,CAAG,CAAjB,CACA,MACD,IAAK,KAAL,CACCA,cAAc,CAAG,CAAjB,CACA,MACD,IAAK,MAAL,CACCA,cAAc,CAAG,CAAjB,CACA,MACD,IAAK,QAAL,CACCA,cAAc,CAAG,CAAjB,CACA,MACD,IAAK,QAAL,CACCA,cAAc,CAAG,CAAjB,CACA,MACD,IAAK,QAAL,CACCA,cAAc,CAAG,CAAjB,CACA,MACD,IAAK,QAAL,CACCA,cAAc,CAAG,CAAjB,CACA,MACD,QACC,KAAM,IAAI/B,CAAAA,KAAJ,CAAW,qCAAoC,KAAKZ,aAAc,EAAlE,CAAN,CAxBF,CA2BAM,MAAM,CAAC8B,UAAP,CAAkBO,cAAlB,EAEA,GAAIE,CAAAA,mBAAJ,CAEA,OAAO,KAAK5C,kBAAL,CAAwB2C,WAAxB,EAAP,EAEC,IAAK,WAAL,CACCC,mBAAmB,CAAG,CAAtB,CACA,MACD,IAAK,KAAL,CACCA,mBAAmB,CAAG,CAAtB,CACA,MACD,IAAK,KAAL,CACCA,mBAAmB,CAAG,CAAtB,CACA,MACD,IAAK,OAAL,CACCA,mBAAmB,CAAG,CAAtB,CACA,MACD,QACC,KAAM,IAAIjC,CAAAA,KAAJ,CAAW,0CAAyC,KAAKX,kBAAmB,EAA5E,CAAN,CAfF,CAkBAK,MAAM,CAAC8B,UAAP,CAAkBS,mBAAlB,EAEA,KAAMC,CAAAA,UAAU,CAAG,KAAK5C,SAAL,CAAe6C,KAAf,CAAqB,KAArB,CAAnB,CAEAzC,MAAM,CAAC2B,YAAP,CAAoBa,UAAU,CAACZ,UAA/B,EACA5B,MAAM,CAAC+B,UAAP,CAAkB,GAAIf,CAAAA,UAAJ,CAAewB,UAAf,CAAlB,EAEA,MAAOxC,CAAAA,MAAP,CACA,CACD;AACA;;;IAIA0C,MAAM,EACN,CACC,MAAO,CACNrD,OAAO,CAAE,KAAKA,OADR,CAENE,KAAK,CAAE,8BAAiB,KAAKA,KAAtB,CAFD,CAGNC,SAAS,CAAE,KAAKA,SAHV,CAINC,UAAU,CAAE,8BAAiB,KAAKA,UAAtB,CAJN,CAKNC,aAAa,CAAE,KAAKA,aALd,CAMNC,kBAAkB,CAAE,KAAKA,kBANnB,CAONC,SAAS,CAAE,KAAKA,SAAL,CAAe8C,MAAf,EAPL,CAAP,CASA,CACD;AACA;;;;;;;;IASMC,MAAN,CAAaC,IAAb,CAAmBhC,IAAnB,CAAyBiC,QAAQ,CAAG,CAApC,CACA,qDACC;AACA,GAAIC,CAAAA,KAAK,CAAG,sBAAS,iCAAoB,KAAI,CAACvD,KAAzB,CAAT,CAAZ,CAEA,GAAIwD,CAAAA,eAAe,CAAG,IAAtB,CACA,GAAIC,CAAAA,aAAJ,CAEA,GAAIhD,CAAAA,MAAM,CAAG,GAAIS,wBAAJ,EAAb,CACA;AAEA;AAVD,gGAWC,kBAAiBmC,IAAjB,oHACA,MADUK,CAAAA,GACV,aACC,GAAGA,GAAG,CAACC,MAAJ,GAAeJ,KAAlB,CACA,CACCC,eAAe,CAAGE,GAAG,CAACE,GAAtB,CACA,MACA,CACD,CAlBF,qMAoBC,GAAGJ,eAAe,GAAK,IAAvB,CACC,KAAM,IAAIzC,CAAAA,KAAJ,CAAW,2CAA0CwC,KAAM,EAA3D,CAAN,CAED,KAAMzB,CAAAA,IAAI,CAAGjB,MAAM,CAACkB,OAAP,CAAe,iCAAoB,wBAAWyB,eAAX,CAApB,CAAf,CAAb,CACA,GAAG1B,IAAI,CAACE,MAAL,GAAiB,CAAC,CAArB,CACC,KAAM,IAAIjB,CAAAA,KAAJ,CAAW,8CAA6CwC,KAAM,EAA9D,CAAN,CAEDE,aAAa,CAAG,GAAII,uBAAJ,CAAkB,CAAEtD,MAAM,CAAEuB,IAAI,CAACG,MAAf,CAAlB,CAAhB,CACA;AAEA;AACAxB,MAAM,CAAC8B,UAAP,CAAkB,IAAlB,EAAyB;AACzB9B,MAAM,CAAC8B,UAAP,CAAkB,IAAlB,EAAyB;AAEzB,KAAME,CAAAA,UAAU,CAAG,GAAI9B,CAAAA,WAAJ,CAAgB,CAAhB,CAAnB,CACA,KAAM+B,CAAAA,QAAQ,CAAG,GAAIjB,CAAAA,UAAJ,CAAegB,UAAf,CAAjB,CAEA,KAAME,CAAAA,SAAS,CAAG,wBAAW,KAAI,CAAC1C,SAAL,CAAe2C,OAAf,EAAX,CAAqC,CAArC,CAAlB,CACAF,QAAQ,CAACG,GAAT,CAAa,GAAIpB,CAAAA,UAAJ,CAAekB,SAAf,CAAb,CAAwC,EAAIA,SAAS,CAACN,UAAtD,EAEA5B,MAAM,CAAC+B,UAAP,CAAkBE,QAAlB,EAEAjC,MAAM,CAAC2B,YAAP,CAAoBkB,QAApB,EAEA,GAAGA,QAAQ,GAAK,CAAhB,CACC7C,MAAM,CAACqD,YAAP,CAAoBzC,IAAI,CAACgB,UAAzB,EAED5B,MAAM,CAAC+B,UAAP,CAAkB,GAAIf,CAAAA,UAAJ,CAAeJ,IAAf,CAAlB,EAEAZ,MAAM,CAAC2B,YAAP,CAAoB,KAAI,CAAClC,UAAL,CAAgBmC,UAApC,EAEA,GAAG,KAAI,CAACnC,UAAL,CAAgBmC,UAAhB,GAA+B,CAAlC,CACC5B,MAAM,CAAC+B,UAAP,CAAkB,GAAIf,CAAAA,UAAJ,CAAe,KAAI,CAACvB,UAApB,CAAlB,EACD;AAEA;AACA,MAAO,wBAAY6D,MAAZ,CAAmBC,mBAAnB,CACNvD,MAAM,CAACwD,OAAP,CAAeC,OAAf,CAAuBxC,KAAvB,CAA6B,CAA7B,CAAgCjB,MAAM,CAAC0D,OAAvC,CADM,CAEN,CAAEC,UAAU,CAAE,CAAEC,QAAQ,CAAE,KAAI,CAAChE,SAAL,CAAe6C,KAAf,CAAqB,KAArB,CAAZ,CAAd,CAFM,CAGNO,aAHM,CAIN,CAAEa,WAAW,CAAE,EAAf,CAJM,CAKN,SALM,CAAP,CAOA;AA/DD,KAgEC,CACD;AAtXD,CAwXA;AACA;;iEAGe,KAAMC,CAAAA,8BACrB,CACC;AACA;;;;IAKA3E,WAAW,CAACC,UAAU,CAAG,EAAd,CACX,CACC;AACA;;;KAIA,KAAK2E,UAAL,CAAkB,gCAAmB3E,UAAnB,CAA+B,YAA/B,CAA6C0E,8BAA8B,CAACxE,aAA/B,CAA6C,YAA7C,CAA7C,CAAlB,CACA;AAEA;AACA,GAAG,UAAYF,CAAAA,UAAf,CACC,KAAKS,UAAL,CAAgBT,UAAU,CAACU,MAA3B,EACD;AACA,CACD;AACA;;;IAIA,MAAOR,CAAAA,aAAP,CAAqBW,UAArB,CACA,CACC,OAAOA,UAAP,EAEC,IAAK,YAAL,CACC,MAAO,EAAP,CACD,QACC,KAAM,IAAIK,CAAAA,KAAJ,CAAW,iEAAgEL,UAAW,EAAtF,CAAN,CALF,CAOA,CACD;AACA;;;;IAKA,MAAO+D,CAAAA,kBAAP,CAA0B/D,UAA1B,CAAsCgE,WAAtC,CACA,CACC,OAAOhE,UAAP,EAEC,IAAK,YAAL,CACC,MAAQgE,CAAAA,WAAW,CAACC,MAAZ,GAAuB,CAA/B,CACD,QACC,KAAM,IAAI5D,CAAAA,KAAJ,CAAW,iEAAgEL,UAAW,EAAtF,CAAN,CALF,CAOA,CACD;AACA;;;;;;;;;;IAWA,MAAOH,CAAAA,MAAP,CAAcV,UAAU,CAAG,EAA3B,CACA,CACC;;;;KAKA,KAAM+E,CAAAA,KAAK,CAAG,gCAAmB/E,UAAnB,CAA+B,OAA/B,CAAwC,EAAxC,CAAd,CAEA,GAAI,YAAc+E,CAAAA,KAAf,GAA0B,KAA7B,CACCA,KAAK,CAACC,QAAN,CAAiB,KAAjB,CAED,MAAQ,IAAIhE,CAAAA,MAAM,CAACiE,WAAX,CAAuB,CAC9BC,IAAI,CAAGH,KAAK,CAACI,SAAN,EAAmB,gCADI,CAE9BH,QAAQ,CAAED,KAAK,CAACC,QAFc,CAAvB,CAAR,CAIA,CACD;AACA;;;IAIAvE,UAAU,CAACC,MAAD,CACV,CACC;AACA,GAAIA,MAAM,WAAYM,CAAAA,MAAM,CAACiE,WAA1B,GAA2C,KAA9C,CACC,KAAM,IAAI/D,CAAAA,KAAJ,CAAU,wFAAV,CAAN,CACD;AAEA;AACA,KAAME,CAAAA,SAAS,CAAG,GAAIC,wBAAJ,CAAc,CAC/BT,MAAM,CAAE,GAAIU,yBAAJ,CAAe,CACtBC,MAAM,CAAEb,MAAM,CAAC6D,UAAP,CAAkBC,QADJ,CAAf,CADuB,CAAd,CAAlB,CAMA,GAAIY,CAAAA,UAAU,CAAGhE,SAAS,CAACM,SAAV,EAAjB,CACA,GAAG0D,UAAU,GAAKhE,SAAS,CAAC0D,MAA5B,CACC,KAAM,IAAI5D,CAAAA,KAAJ,CAAU,wFAAV,CAAN,CAED,MAAME,SAAS,CAAC0D,MAAhB,CACC,KAAKH,UAAL,CAAgBU,IAAhB,CAAqB,GAAIvF,CAAAA,0BAAJ,CAA+B,CAAEc,MAAM,CAAEQ,SAAV,CAA/B,CAArB,EACD;AACA,CACD;AACA;;;IAIAiB,QAAQ,EACR,CACC;AACA,KAAMzB,CAAAA,MAAM,CAAG,GAAIS,wBAAJ,EAAf,CAEA,GAAIiE,CAAAA,aAAa,CAAG,CAApB,CAEA,KAAMC,CAAAA,cAAc,CAAG,EAAvB,CACA;AAEA;AATD,mGAUC,mBAAuB,KAAKZ,UAA5B,yHACA,MADUvE,CAAAA,SACV,cACC,KAAMoF,CAAAA,eAAe,CAAGpF,SAAS,CAACkC,QAAV,EAAxB,CACAiD,cAAc,CAACF,IAAf,CAAoBG,eAApB,EACAF,aAAa,EAAIE,eAAe,CAAC5E,MAAhB,CAAuBW,MAAvB,CAA8BiB,UAA/C,CACA,CACD;AAhBD,4MAkBC5B,MAAM,CAAC2B,YAAP,CAAoB+C,aAApB,EAEA;AACA,gBAAuBC,cAAvB,cAAI,KAAMnF,CAAAA,SAAS,CAAImF,cAAJ,IAAf,CACH3E,MAAM,CAAC+B,UAAP,CAAkBvC,SAAS,CAACQ,MAAV,CAAiB6E,IAAnC,EADD,CAEA;AAEA,MAAO,IAAIzE,CAAAA,MAAM,CAACiE,WAAX,CAAuB,CAAET,QAAQ,CAAE5D,MAAM,CAACA,MAAP,CAAcW,MAAd,CAAqBM,KAArB,CAA2B,CAA3B,CAAZ,CAAvB,CAAP,CACA,CACD;AACA;;;IAIAyB,MAAM,EACN,CACC,MAAO,CACNqB,UAAU,CAAEe,KAAK,CAACC,IAAN,CAAW,KAAKhB,UAAhB,CAA4BiB,OAAO,EAAIA,OAAO,CAACtC,MAAR,EAAvC,CADN,CAAP,CAGA,CACD;AAzJD,CA2JA;AACA;;;;;;;;;0DAUsBuC,CAAAA,wB,qEA+EtB;iFA/EO,UAAwCC,WAAxC,CAAqDC,iBAArD,CAAwEvC,IAAxE,CAA8EwC,KAAK,CAAI,CAAC,CAAxF,CACP,CACC;AACA,GAAIC,CAAAA,WAAW,CAAG,IAAlB,CACA,GAAIC,CAAAA,GAAJ,CACA,GAAIC,CAAAA,QAAJ,CAEA,KAAMvF,CAAAA,MAAM,CAAG,GAAIS,wBAAJ,EAAf,CAEA,GAAI+E,CAAAA,OAAJ,CACA;AAEA;AACA,KAAMC,CAAAA,MAAM,CAAG,uBAAf,CACA,GAAG,MAAOA,CAAAA,MAAP,GAAkB,WAArB,CACC,MAAOC,CAAAA,OAAO,CAACC,MAAR,CAAe,mCAAf,CAAP,CACD;AAEA;AACA,IAAI,GAAIC,CAAAA,CAAC,CAAG,CAAZ,CAAeA,CAAC,CAAGV,WAAW,CAACzF,UAAZ,CAAuByE,MAA1C,CAAkD0B,CAAC,EAAnD,CACA,CACC,OAAOV,WAAW,CAACzF,UAAZ,CAAuBmG,CAAvB,EAA0BC,MAAjC,EAEC,IAAK,yBAAL,CACC,CACCR,WAAW,CAAGH,WAAW,CAACzF,UAAZ,CAAuBmG,CAAvB,EAA0BP,WAAxC,CAEA,GAAGA,WAAW,CAACtB,UAAZ,CAAuBG,MAAvB,GAAkC,CAArC,CACC,KAAM,IAAI5D,CAAAA,KAAJ,CAAU,sCAAV,CAAN,CAED4E,WAAW,CAACzF,UAAZ,CAAuBqG,MAAvB,CAA8BF,CAA9B,CAAiC,CAAjC,EACA,CACD,MACD,QAZD,CAcA,CACD;AAEA;AACA,GAAGP,WAAW,GAAK,IAAnB,CACC,KAAM,IAAI/E,CAAAA,KAAJ,CAAU,0EAAV,CAAN,CACD;AAEA;AACAgF,GAAG,CAAGJ,WAAW,CAACa,SAAZ,GAAwBtD,KAAxB,CAA8B,KAA9B,CAAN,CACA;AAEA;AACA8C,QAAQ,MAASE,CAAAA,MAAM,CAACO,MAAP,CAAc,CAAE1B,IAAI,CAAE,SAAR,CAAd,CAAmC,GAAItD,CAAAA,UAAJ,CAAemE,iBAAiB,CAACc,oBAAlB,CAAuCxE,QAAvC,GAAkDgB,KAAlD,CAAwD,KAAxD,CAAf,CAAnC,CAAjB,CACA;AAEA;AACAzC,MAAM,CAAC+B,UAAP,CAAkB,GAAIf,CAAAA,UAAJ,CAAeuE,QAAf,CAAlB,EACAvF,MAAM,CAACqD,YAAP,CAAoBiC,GAAG,CAAC1D,UAAxB,EACA5B,MAAM,CAAC+B,UAAP,CAAkB,GAAIf,CAAAA,UAAJ,CAAesE,GAAf,CAAlB,EAEAE,OAAO,CAAGxF,MAAM,CAACwD,OAAP,CAAeC,OAAf,CAAuBxC,KAAvB,CAA6B,CAA7B,CAAgCjB,MAAM,CAAC0D,OAAvC,CAAV,CACA;AAEA;AACA,GAAG0B,KAAK,GAAM,CAAC,CAAf,CACA,CACC,KAAMc,CAAAA,WAAW,CAAG,EAApB,CADD,mGAGC,mBAAuBb,WAAW,CAACtB,UAAnC,yHACA,MADUvE,CAAAA,SACV,cACC,KAAM2G,CAAAA,YAAY,MAAS3G,CAAAA,SAAS,CAACmD,MAAV,CAAiBC,IAAjB,CAAuB4C,OAAvB,CAAgC,CAAhC,CAA3B,CACAU,WAAW,CAACzB,IAAZ,CAAiB0B,YAAjB,EACA,CAPF,4MASC,MAAOD,CAAAA,WAAP,CACA,CAED,GAAGd,KAAK,EAAIC,WAAW,CAACtB,UAAZ,CAAuBG,MAAnC,CACCkB,KAAK,CAAIC,WAAW,CAACtB,UAAZ,CAAuBG,MAAvB,CAAgC,CAAzC,CAED,MAAO,MAAOmB,CAAAA,WAAW,CAACtB,UAAZ,CAAuBqB,KAAvB,EAA8BzC,MAA9B,CAAqCC,IAArC,CAA2C4C,OAA3C,CAAoD,CAApD,CAAP,CAAP,CACA;AACA,C","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue, utilFromBase, utilToBase, bufferToHexCodes, toBase64, fromBase64, arrayBufferToString, stringToArrayBuffer } from \"pvutils\";\nimport { ByteStream, SeqStream } from \"bytestreamjs\";\nimport { getCrypto, getEngine } from \"./common.js\";\nimport PublicKeyInfo from \"./PublicKeyInfo.js\";\n//**************************************************************************************\nexport class SignedCertificateTimestamp\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for SignedCertificateTimestamp class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {number}\n\t\t * @desc version\n\t\t */\n\t\tthis.version = getParametersValue(parameters, \"version\", SignedCertificateTimestamp.defaultValues(\"version\"));\n\t\t/**\n\t\t * @type {ArrayBuffer}\n\t\t * @desc logID\n\t\t */\n\t\tthis.logID = getParametersValue(parameters, \"logID\", SignedCertificateTimestamp.defaultValues(\"logID\"));\n\t\t/**\n\t\t * @type {Date}\n\t\t * @desc timestamp\n\t\t */\n\t\tthis.timestamp = getParametersValue(parameters, \"timestamp\", SignedCertificateTimestamp.defaultValues(\"timestamp\"));\n\t\t/**\n\t\t * @type {ArrayBuffer}\n\t\t * @desc extensions\n\t\t */\n\t\tthis.extensions = getParametersValue(parameters, \"extensions\", SignedCertificateTimestamp.defaultValues(\"extensions\"));\n\t\t/**\n\t\t * @type {string}\n\t\t * @desc hashAlgorithm\n\t\t */\n\t\tthis.hashAlgorithm = getParametersValue(parameters, \"hashAlgorithm\", SignedCertificateTimestamp.defaultValues(\"hashAlgorithm\"));\n\t\t/**\n\t\t * @type {string}\n\t\t * @desc signatureAlgorithm\n\t\t */\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", SignedCertificateTimestamp.defaultValues(\"signatureAlgorithm\"));\n\t\t/**\n\t\t * @type {Object}\n\t\t * @desc signature\n\t\t */\n\t\tthis.signature = getParametersValue(parameters, \"signature\", SignedCertificateTimestamp.defaultValues(\"signature\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"stream\"\n\t\tif(\"stream\" in parameters)\n\t\t\tthis.fromStream(parameters.stream);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"version\":\n\t\t\t\treturn 0;\n\t\t\tcase \"logID\":\n\t\t\tcase \"extensions\":\n\t\t\t\treturn new ArrayBuffer(0);\n\t\t\tcase \"timestamp\":\n\t\t\t\treturn new Date(0);\n\t\t\tcase \"hashAlgorithm\":\n\t\t\tcase \"signatureAlgorithm\":\n\t\t\t\treturn \"\";\n\t\t\tcase \"signature\":\n\t\t\t\treturn new asn1js.Any();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for SignedCertificateTimestamp class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\tif((schema instanceof asn1js.RawData) === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SignedCertificateTimestamp\");\n\t\t\n\t\tconst seqStream = new SeqStream({\n\t\t\tstream: new ByteStream({\n\t\t\t\tbuffer: schema.data\n\t\t\t})\n\t\t});\n\t\t\n\t\tthis.fromStream(seqStream);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert SeqStream data into current class\n\t * @param {!SeqStream} stream\n\t */\n\tfromStream(stream)\n\t{\n\t\tconst blockLength = stream.getUint16();\n\t\t\n\t\tthis.version = (stream.getBlock(1))[0];\n\t\t\n\t\tif(this.version === 0)\n\t\t{\n\t\t\tthis.logID = (new Uint8Array(stream.getBlock(32))).buffer.slice(0);\n\t\t\tthis.timestamp = new Date(utilFromBase(new Uint8Array(stream.getBlock(8)), 8));\n\t\t\t\n\t\t\t//region Extensions\n\t\t\tconst extensionsLength = stream.getUint16();\n\t\t\tthis.extensions = (new Uint8Array(stream.getBlock(extensionsLength))).buffer.slice(0);\n\t\t\t//endregion\n\t\t\t\n\t\t\t//region Hash algorithm\n\t\t\tswitch((stream.getBlock(1))[0])\n\t\t\t{\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.hashAlgorithm = \"none\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.hashAlgorithm = \"md5\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tthis.hashAlgorithm = \"sha1\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tthis.hashAlgorithm = \"sha224\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tthis.hashAlgorithm = \"sha256\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 5:\n\t\t\t\t\tthis.hashAlgorithm = \"sha384\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 6:\n\t\t\t\t\tthis.hashAlgorithm = \"sha512\";\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\n\t\t\t}\n\t\t\t//endregion\n\t\t\t\n\t\t\t//region Signature algorithm\n\t\t\tswitch((stream.getBlock(1))[0])\n\t\t\t{\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.signatureAlgorithm = \"anonymous\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.signatureAlgorithm = \"rsa\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tthis.signatureAlgorithm = \"dsa\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tthis.signatureAlgorithm = \"ecdsa\";\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\n\t\t\t}\n\t\t\t//endregion\n\t\t\t\n\t\t\t//region Signature\n\t\t\tconst signatureLength = stream.getUint16();\n\t\t\tconst signatureData = (new Uint8Array(stream.getBlock(signatureLength))).buffer.slice(0);\n\t\t\t\n\t\t\tconst asn1 = asn1js.fromBER(signatureData);\n\t\t\tif(asn1.offset === (-1))\n\t\t\t\tthrow new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\n\t\t\t\n\t\t\tthis.signature = asn1.result;\n\t\t\t//endregion\n\t\t\t\n\t\t\tif(blockLength !== (47 + extensionsLength + signatureLength))\n\t\t\t\tthrow new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\tconst stream = this.toStream();\n\t\t\n\t\treturn new asn1js.RawData({ data: stream.stream.buffer });\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to SeqStream data\n\t * @returns {SeqStream} SeqStream object\n\t */\n\ttoStream()\n\t{\n\t\tconst stream = new SeqStream();\n\t\t\n\t\tstream.appendUint16(47 + this.extensions.byteLength + this.signature.valueBeforeDecode.byteLength);\n\t\tstream.appendChar(this.version);\n\t\tstream.appendView(new Uint8Array(this.logID));\n\t\t\n\t\tconst timeBuffer = new ArrayBuffer(8);\n\t\tconst timeView = new Uint8Array(timeBuffer);\n\t\t\n\t\tconst baseArray = utilToBase(this.timestamp.valueOf(), 8);\n\t\ttimeView.set(new Uint8Array(baseArray), 8 - baseArray.byteLength);\n\t\t\n\t\tstream.appendView(timeView);\n\t\tstream.appendUint16(this.extensions.byteLength);\n\t\t\n\t\tif(this.extensions.byteLength)\n\t\t\tstream.appendView(new Uint8Array(this.extensions));\n\t\t\n\t\tlet _hashAlgorithm;\n\t\t\n\t\tswitch(this.hashAlgorithm.toLowerCase())\n\t\t{\n\t\t\tcase \"none\":\n\t\t\t\t_hashAlgorithm = 0;\n\t\t\t\tbreak;\n\t\t\tcase \"md5\":\n\t\t\t\t_hashAlgorithm = 1;\n\t\t\t\tbreak;\n\t\t\tcase \"sha1\":\n\t\t\t\t_hashAlgorithm = 2;\n\t\t\t\tbreak;\n\t\t\tcase \"sha224\":\n\t\t\t\t_hashAlgorithm = 3;\n\t\t\t\tbreak;\n\t\t\tcase \"sha256\":\n\t\t\t\t_hashAlgorithm = 4;\n\t\t\t\tbreak;\n\t\t\tcase \"sha384\":\n\t\t\t\t_hashAlgorithm = 5;\n\t\t\t\tbreak;\n\t\t\tcase \"sha512\":\n\t\t\t\t_hashAlgorithm = 6;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Incorrect data for hashAlgorithm: ${this.hashAlgorithm}`);\n\t\t}\n\t\t\n\t\tstream.appendChar(_hashAlgorithm);\n\t\t\n\t\tlet _signatureAlgorithm;\n\t\t\n\t\tswitch(this.signatureAlgorithm.toLowerCase())\n\t\t{\n\t\t\tcase \"anonymous\":\n\t\t\t\t_signatureAlgorithm = 0;\n\t\t\t\tbreak;\n\t\t\tcase \"rsa\":\n\t\t\t\t_signatureAlgorithm = 1;\n\t\t\t\tbreak;\n\t\t\tcase \"dsa\":\n\t\t\t\t_signatureAlgorithm = 2;\n\t\t\t\tbreak;\n\t\t\tcase \"ecdsa\":\n\t\t\t\t_signatureAlgorithm = 3;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Incorrect data for signatureAlgorithm: ${this.signatureAlgorithm}`);\n\t\t}\n\t\t\n\t\tstream.appendChar(_signatureAlgorithm);\n\t\t\n\t\tconst _signature = this.signature.toBER(false);\n\t\t\n\t\tstream.appendUint16(_signature.byteLength);\n\t\tstream.appendView(new Uint8Array(_signature));\n\t\t\n\t\treturn stream;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\treturn {\n\t\t\tversion: this.version,\n\t\t\tlogID: bufferToHexCodes(this.logID),\n\t\t\ttimestamp: this.timestamp,\n\t\t\textensions: bufferToHexCodes(this.extensions),\n\t\t\thashAlgorithm: this.hashAlgorithm,\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm,\n\t\t\tsignature: this.signature.toJSON()\n\t\t};\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Verify SignedCertificateTimestamp for specific input data\n\t * @param {Object[]} logs Array of objects with information about each CT Log (like here: https://ct.grahamedgecombe.com/logs.json)\n\t * @param {String} logs.log_id Identifier of the CT Log encoded in BASE-64 format\n\t * @param {String} logs.key Public key of the CT Log encoded in BASE-64 format\n\t * @param {ArrayBuffer} data Data to verify signature against. Could be encoded Certificate or encoded PreCert\n\t * @param {Number} [dataType=0] Type = 0 (data is encoded Certificate), type = 1 (data is encoded PreCert)\n\t * @return {Promise<void>}\n\t */\n\tasync verify(logs, data, dataType = 0)\n\t{\n\t\t//region Initial variables\n\t\tlet logId = toBase64(arrayBufferToString(this.logID));\n\t\t\n\t\tlet publicKeyBase64 = null;\n\t\tlet publicKeyInfo;\n\t\t\n\t\tlet stream = new SeqStream();\n\t\t//endregion\n\t\t\n\t\t//region Found and init public key\n\t\tfor(const log of logs)\n\t\t{\n\t\t\tif(log.log_id === logId)\n\t\t\t{\n\t\t\t\tpublicKeyBase64 = log.key;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(publicKeyBase64 === null)\n\t\t\tthrow new Error(`Public key not found for CT with logId: ${logId}`);\n\t\t\n\t\tconst asn1 = asn1js.fromBER(stringToArrayBuffer(fromBase64(publicKeyBase64)));\n\t\tif(asn1.offset === (-1))\n\t\t\tthrow new Error(`Incorrect key value for CT Log with logId: ${logId}`);\n\t\t\n\t\tpublicKeyInfo = new PublicKeyInfo({ schema: asn1.result });\n\t\t//endregion\n\t\t\n\t\t//region Initialize signed data block\n\t\tstream.appendChar(0x00); // sct_version\n\t\tstream.appendChar(0x00); // signature_type = certificate_timestamp\n\t\t\n\t\tconst timeBuffer = new ArrayBuffer(8);\n\t\tconst timeView = new Uint8Array(timeBuffer);\n\t\t\n\t\tconst baseArray = utilToBase(this.timestamp.valueOf(), 8);\n\t\ttimeView.set(new Uint8Array(baseArray), 8 - baseArray.byteLength);\n\t\t\n\t\tstream.appendView(timeView);\n\t\t\n\t\tstream.appendUint16(dataType);\n\t\t\n\t\tif(dataType === 0)\n\t\t\tstream.appendUint24(data.byteLength);\n\t\t\n\t\tstream.appendView(new Uint8Array(data));\n\t\t\n\t\tstream.appendUint16(this.extensions.byteLength);\n\t\t\n\t\tif(this.extensions.byteLength !== 0)\n\t\t\tstream.appendView(new Uint8Array(this.extensions));\n\t\t//endregion\n\t\t\n\t\t//region Perform verification\n\t\treturn getEngine().subtle.verifyWithPublicKey(\n\t\t\tstream._stream._buffer.slice(0, stream._length),\n\t\t\t{ valueBlock: { valueHex: this.signature.toBER(false) } },\n\t\t\tpublicKeyInfo,\n\t\t\t{ algorithmId: \"\" },\n\t\t\t\"SHA-256\"\n\t\t);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Class from RFC6962\n */\nexport default class SignedCertificateTimestampList\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for SignedCertificateTimestampList class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {Array.<SignedCertificateTimestamp>}\n\t\t * @desc timestamps\n\t\t */\n\t\tthis.timestamps = getParametersValue(parameters, \"timestamps\", SignedCertificateTimestampList.defaultValues(\"timestamps\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"timestamps\":\n\t\t\t\treturn [];\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for SignedCertificateTimestampList class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Compare values with default values for all class members\n\t * @param {string} memberName String name for a class member\n\t * @param {*} memberValue Value to compare with default value\n\t */\n\tstatic compareWithDefault(memberName, memberValue)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"timestamps\":\n\t\t\t\treturn (memberValue.length === 0);\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for SignedCertificateTimestampList class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * SignedCertificateTimestampList ::= OCTET STRING\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [optional]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\tif((\"optional\" in names) === false)\n\t\t\tnames.optional = false;\n\t\t\n\t\treturn (new asn1js.OctetString({\n\t\t\tname: (names.blockName || \"SignedCertificateTimestampList\"),\n\t\t\toptional: names.optional\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Check the schema is valid\n\t\tif((schema instanceof asn1js.OctetString) === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SignedCertificateTimestampList\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tconst seqStream = new SeqStream({\n\t\t\tstream: new ByteStream({\n\t\t\t\tbuffer: schema.valueBlock.valueHex\n\t\t\t})\n\t\t});\n\t\t\n\t\tlet dataLength = seqStream.getUint16();\n\t\tif(dataLength !== seqStream.length)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SignedCertificateTimestampList\");\n\t\t\n\t\twhile(seqStream.length)\n\t\t\tthis.timestamps.push(new SignedCertificateTimestamp({ stream: seqStream }));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\t//region Initial variables\n\t\tconst stream = new SeqStream();\n\t\t\n\t\tlet overallLength = 0;\n\t\t\n\t\tconst timestampsData = [];\n\t\t//endregion\n\t\t\n\t\t//region Get overall length\n\t\tfor(const timestamp of this.timestamps)\n\t\t{\n\t\t\tconst timestampStream = timestamp.toStream();\n\t\t\ttimestampsData.push(timestampStream);\n\t\t\toverallLength += timestampStream.stream.buffer.byteLength;\n\t\t}\n\t\t//endregion\n\t\t\n\t\tstream.appendUint16(overallLength);\n\t\t\n\t\t//region Set data from all timestamps\n\t\tfor(const timestamp of timestampsData)\n\t\t\tstream.appendView(timestamp.stream.view);\n\t\t//endregion\n\t\t\n\t\treturn new asn1js.OctetString({ valueHex: stream.stream.buffer.slice(0) });\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\treturn {\n\t\t\ttimestamps: Array.from(this.timestamps, element => element.toJSON())\n\t\t};\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Verify SignedCertificateTimestamp for specific certificate content\n * @param {Certificate} certificate Certificate for which verification would be performed\n * @param {Certificate} issuerCertificate Certificate of the issuer of target certificate\n * @param {Object[]} logs Array of objects with information about each CT Log (like here: https://ct.grahamedgecombe.com/logs.json)\n * @param {String} logs.log_id Identifier of the CT Log encoded in BASE-64 format\n * @param {String} logs.key Public key of the CT Log encoded in BASE-64 format\n * @param {Number} [index=-1] Index of SignedCertificateTimestamp inside SignedCertificateTimestampList (for -1 would verify all)\n * @return {Array} Array of verification results\n */\nexport async function verifySCTsForCertificate(certificate, issuerCertificate, logs, index = (-1))\n{\n\t//region Initial variables\n\tlet parsedValue = null;\n\tlet tbs;\n\tlet issuerId;\n\t\n\tconst stream = new SeqStream();\n\t\n\tlet preCert;\n\t//endregion\n\t\n\t//region Get a \"crypto\" extension\n\tconst crypto = getCrypto();\n\tif(typeof crypto === \"undefined\")\n\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\n\t//endregion\n\t\n\t//region Remove certificate extension\n\tfor(let i = 0; i < certificate.extensions.length; i++)\n\t{\n\t\tswitch(certificate.extensions[i].extnID)\n\t\t{\n\t\t\tcase \"1.3.6.1.4.1.11129.2.4.2\":\n\t\t\t\t{\n\t\t\t\t\tparsedValue = certificate.extensions[i].parsedValue;\n\t\t\t\t\t\n\t\t\t\t\tif(parsedValue.timestamps.length === 0)\n\t\t\t\t\t\tthrow new Error(\"Nothing to verify in the certificate\");\n\t\t\t\t\t\n\t\t\t\t\tcertificate.extensions.splice(i, 1);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\t}\n\t//endregion\n\t\n\t//region Check we do have what to verify\n\tif(parsedValue === null)\n\t\tthrow new Error(\"No SignedCertificateTimestampList extension in the specified certificate\");\n\t//endregion\n\t\n\t//region Prepare modifier TBS value\n\ttbs = certificate.encodeTBS().toBER(false);\n\t//endregion\n\t\n\t//region Initialize \"issuer_key_hash\" value\n\tissuerId = await crypto.digest({ name: \"SHA-256\" }, new Uint8Array(issuerCertificate.subjectPublicKeyInfo.toSchema().toBER(false)));\n\t//endregion\n\t\n\t//region Make final \"PreCert\" value\n\tstream.appendView(new Uint8Array(issuerId));\n\tstream.appendUint24(tbs.byteLength);\n\tstream.appendView(new Uint8Array(tbs));\n\t\n\tpreCert = stream._stream._buffer.slice(0, stream._length);\n\t//endregion\n\t\n\t//region Call verification function for specified index\n\tif(index === (-1))\n\t{\n\t\tconst verifyArray = [];\n\t\t\n\t\tfor(const timestamp of parsedValue.timestamps)\n\t\t{\n\t\t\tconst verifyResult = await timestamp.verify(logs, preCert, 1);\n\t\t\tverifyArray.push(verifyResult);\n\t\t}\n\t\t\n\t\treturn verifyArray;\n\t}\n\t\n\tif(index >= parsedValue.timestamps.length)\n\t\tindex = (parsedValue.timestamps.length - 1);\n\t\n\treturn [await parsedValue.timestamps[index].verify(logs, preCert, 1)];\n\t//endregion\n}\n//**********************************************************************************\n"],"file":"SignedCertificateTimestampList.js"}