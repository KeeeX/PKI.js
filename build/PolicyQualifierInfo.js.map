{"version":3,"sources":["../src/PolicyQualifierInfo.js"],"names":["PolicyQualifierInfo","constructor","parameters","policyQualifierId","defaultValues","qualifier","fromSchema","schema","memberName","asn1js","Any","Error","names","Sequence","name","blockName","value","ObjectIdentifier","asn1","compareSchema","verified","result","valueBlock","toString","toSchema","toJSON"],"mappings":"6FAAA,sDACA,gC,6ZACA;AACA;;GAGe,KAAMA,CAAAA,mBACrB,CACC;AACA;;;;IAKAC,WAAW,CAACC,UAAU,CAAG,EAAd,CACX,CACC;AACA;;;KAIA,KAAKC,iBAAL,CAAyB,gCAAmBD,UAAnB,CAA+B,mBAA/B,CAAoDF,mBAAmB,CAACI,aAApB,CAAkC,mBAAlC,CAApD,CAAzB,CACA;;;KAIA,KAAKC,SAAL,CAAiB,gCAAmBH,UAAnB,CAA+B,WAA/B,CAA4CF,mBAAmB,CAACI,aAApB,CAAkC,WAAlC,CAA5C,CAAjB,CACA;AAEA;AACA,GAAG,UAAYF,CAAAA,UAAf,CACC,KAAKI,UAAL,CAAgBJ,UAAU,CAACK,MAA3B,EACD;AACA,CACD;AACA;;;IAIA,MAAOH,CAAAA,aAAP,CAAqBI,UAArB,CACA,CACC,OAAOA,UAAP,EAEC,IAAK,mBAAL,CACC,MAAO,EAAP,CACD,IAAK,WAAL,CACC,MAAO,IAAIC,CAAAA,MAAM,CAACC,GAAX,EAAP,CACD,QACC,KAAM,IAAIC,CAAAA,KAAJ,CAAW,sDAAqDH,UAAW,EAA3E,CAAN,CAPF,CASA,CACD;AACA;;;;;;;;;;;;;;;;;;IAmBA,MAAOD,CAAAA,MAAP,CAAcL,UAAU,CAAG,EAA3B,CACA,CACC;;;;;KAMA,KAAMU,CAAAA,KAAK,CAAG,gCAAmBV,UAAnB,CAA+B,OAA/B,CAAwC,EAAxC,CAAd,CAEA,MAAQ,IAAIO,CAAAA,MAAM,CAACI,QAAX,CAAoB,CAC3BC,IAAI,CAAGF,KAAK,CAACG,SAAN,EAAmB,EADC,CAE3BC,KAAK,CAAE,CACN,GAAIP,CAAAA,MAAM,CAACQ,gBAAX,CAA4B,CAAEH,IAAI,CAAGF,KAAK,CAACT,iBAAN,EAA2B,EAApC,CAA5B,CADM,CAEN,GAAIM,CAAAA,MAAM,CAACC,GAAX,CAAe,CAAEI,IAAI,CAAGF,KAAK,CAACP,SAAN,EAAmB,EAA5B,CAAf,CAFM,CAFoB,CAApB,CAAR,CAOA,CACD;AACA;;;IAIAC,UAAU,CAACC,MAAD,CACV,CACC;AACA,wBAAWA,MAAX,CAAmB,CAClB,mBADkB,CAElB,WAFkB,CAAnB,EAIA;AAEA;AACA,KAAMW,CAAAA,IAAI,CAAGT,MAAM,CAACU,aAAP,CAAqBZ,MAArB,CACZA,MADY,CAEZP,mBAAmB,CAACO,MAApB,CAA2B,CAC1BK,KAAK,CAAE,CACNT,iBAAiB,CAAE,mBADb,CAENE,SAAS,CAAE,WAFL,CADmB,CAA3B,CAFY,CAAb,CAUA,GAAGa,IAAI,CAACE,QAAL,GAAkB,KAArB,CACC,KAAM,IAAIT,CAAAA,KAAJ,CAAU,6EAAV,CAAN,CACD;AAEA;AACA,KAAKR,iBAAL,CAAyBe,IAAI,CAACG,MAAL,CAAYlB,iBAAZ,CAA8BmB,UAA9B,CAAyCC,QAAzC,EAAzB,CACA,KAAKlB,SAAL,CAAiBa,IAAI,CAACG,MAAL,CAAYhB,SAA7B,CACA;AACA,CACD;AACA;;;IAIAmB,QAAQ,EACR,CACC;AACA,MAAQ,IAAIf,CAAAA,MAAM,CAACI,QAAX,CAAoB,CAC3BG,KAAK,CAAE,CACN,GAAIP,CAAAA,MAAM,CAACQ,gBAAX,CAA4B,CAAED,KAAK,CAAE,KAAKb,iBAAd,CAA5B,CADM,CAEN,KAAKE,SAFC,CADoB,CAApB,CAAR,CAMA;AACA,CACD;AACA;;;IAIAoB,MAAM,EACN,CACC,MAAO,CACNtB,iBAAiB,CAAE,KAAKA,iBADlB,CAENE,SAAS,CAAE,KAAKA,SAAL,CAAeoB,MAAf,EAFL,CAAP,CAIA,CACD;AAhJD,CAkJA","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class PolicyQualifierInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PolicyQualifierInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc policyQualifierId\r\n\t\t */\r\n\t\tthis.policyQualifierId = getParametersValue(parameters, \"policyQualifierId\", PolicyQualifierInfo.defaultValues(\"policyQualifierId\"));\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @desc qualifier\r\n\t\t */\r\n\t\tthis.qualifier = getParametersValue(parameters, \"qualifier\", PolicyQualifierInfo.defaultValues(\"qualifier\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"policyQualifierId\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"qualifier\":\r\n\t\t\t\treturn new asn1js.Any();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PolicyQualifierInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PolicyQualifierInfo ::= SEQUENCE {\r\n\t *    policyQualifierId  PolicyQualifierId,\r\n\t *    qualifier          ANY DEFINED BY policyQualifierId }\r\n\t *\r\n\t * id-qt          OBJECT IDENTIFIER ::=  { id-pkix 2 }\r\n\t * id-qt-cps      OBJECT IDENTIFIER ::=  { id-qt 1 }\r\n\t * id-qt-unotice  OBJECT IDENTIFIER ::=  { id-qt 2 }\r\n\t *\r\n\t * PolicyQualifierId ::= OBJECT IDENTIFIER ( id-qt-cps | id-qt-unotice )\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [policyQualifierId]\r\n\t\t * @property {string} [qualifier]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.policyQualifierId || \"\") }),\r\n\t\t\t\tnew asn1js.Any({ name: (names.qualifier || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"policyQualifierId\",\r\n\t\t\t\"qualifier\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPolicyQualifierInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tpolicyQualifierId: \"policyQualifierId\",\r\n\t\t\t\t\tqualifier: \"qualifier\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PolicyQualifierInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.policyQualifierId = asn1.result.policyQualifierId.valueBlock.toString();\r\n\t\tthis.qualifier = asn1.result.qualifier;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.policyQualifierId }),\r\n\t\t\t\tthis.qualifier\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tpolicyQualifierId: this.policyQualifierId,\r\n\t\t\tqualifier: this.qualifier.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"PolicyQualifierInfo.js"}