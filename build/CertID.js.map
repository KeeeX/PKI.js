{"version":3,"sources":["../src/CertID.js"],"names":["CertID","constructor","parameters","hashAlgorithm","defaultValues","issuerNameHash","issuerKeyHash","serialNumber","fromSchema","schema","memberName","AlgorithmIdentifier","asn1js","OctetString","Integer","Error","compareWithDefault","memberValue","algorithmId","isEqual","names","Sequence","name","blockName","value","hashAlgorithmObject","asn1","compareSchema","verified","result","toSchema","toJSON","certificateID","valueBlock","valueHex","createForCertificate","certificate","sequence","Promise","resolve","issuerCertificate","crypto","reject","hashOID","algorithmParams","Null","then","digest","subject","toBER","error","issuerKeyBuffer","subjectPublicKeyInfo","subjectPublicKey"],"mappings":"6FAAA,sDACA,gCACA,mCACA,qF,gfACA;AACA;;GAGe,KAAMA,CAAAA,MACrB,CACC;AACA;;;;IAKAC,WAAW,CAACC,UAAU,CAAG,EAAd,CACX,CACC;AACA;;;KAIA,KAAKC,aAAL,CAAqB,gCAAmBD,UAAnB,CAA+B,eAA/B,CAAgDF,MAAM,CAACI,aAAP,CAAqB,eAArB,CAAhD,CAArB,CACA;;;KAIA,KAAKC,cAAL,CAAsB,gCAAmBH,UAAnB,CAA+B,gBAA/B,CAAiDF,MAAM,CAACI,aAAP,CAAqB,gBAArB,CAAjD,CAAtB,CACA;;;KAIA,KAAKE,aAAL,CAAqB,gCAAmBJ,UAAnB,CAA+B,eAA/B,CAAgDF,MAAM,CAACI,aAAP,CAAqB,eAArB,CAAhD,CAArB,CACA;;;KAIA,KAAKG,YAAL,CAAoB,gCAAmBL,UAAnB,CAA+B,cAA/B,CAA+CF,MAAM,CAACI,aAAP,CAAqB,cAArB,CAA/C,CAApB,CACA;AAEA;AACA,GAAG,UAAYF,CAAAA,UAAf,CACC,KAAKM,UAAL,CAAgBN,UAAU,CAACO,MAA3B,EACD;AACA,CACD;AACA;;;IAIA,MAAOL,CAAAA,aAAP,CAAqBM,UAArB,CACA,CACC,OAAOA,UAAP,EAEC,IAAK,eAAL,CACC,MAAO,IAAIC,6BAAJ,EAAP,CACD,IAAK,gBAAL,CACA,IAAK,eAAL,CACC,MAAO,IAAIC,CAAAA,MAAM,CAACC,WAAX,EAAP,CACD,IAAK,cAAL,CACC,MAAO,IAAID,CAAAA,MAAM,CAACE,OAAX,EAAP,CACD,QACC,KAAM,IAAIC,CAAAA,KAAJ,CAAW,yCAAwCL,UAAW,EAA9D,CAAN,CAVF,CAYA,CACD;AACA;;;;IAKA,MAAOM,CAAAA,kBAAP,CAA0BN,UAA1B,CAAsCO,WAAtC,CACA,CACC,OAAOP,UAAP,EAEC,IAAK,eAAL,CACC,MAASO,CAAAA,WAAW,CAACC,WAAZ,GAA4B,EAA7B,EAAsC,mBAAqBD,CAAAA,WAAtB,GAAuC,KAApF,CACD,IAAK,gBAAL,CACA,IAAK,eAAL,CACA,IAAK,cAAL,CACC,MAAQA,CAAAA,WAAW,CAACE,OAAZ,CAAoBnB,MAAM,CAACI,aAAP,CAAqBM,UAArB,CAApB,CAAR,CACD,QACC,KAAM,IAAIK,CAAAA,KAAJ,CAAW,yCAAwCL,UAAW,EAA9D,CAAN,CATF,CAWA,CACD;AACA;;;;;;;;;;;;;;IAeA,MAAOD,CAAAA,MAAP,CAAcP,UAAU,CAAG,EAA3B,CACA,CACC;;;;;;;;KASA,KAAMkB,CAAAA,KAAK,CAAG,gCAAmBlB,UAAnB,CAA+B,OAA/B,CAAwC,EAAxC,CAAd,CAEA,MAAQ,IAAIU,CAAAA,MAAM,CAACS,QAAX,CAAoB,CAC3BC,IAAI,CAAGF,KAAK,CAACG,SAAN,EAAmB,EADC,CAE3BC,KAAK,CAAE,CACNb,6BAAoBF,MAApB,CAA2BW,KAAK,CAACK,mBAAN,EAA6B,CACvDL,KAAK,CAAE,CACNG,SAAS,CAAGH,KAAK,CAACjB,aAAN,EAAuB,EAD7B,CADgD,CAAxD,CADM,CAMN,GAAIS,CAAAA,MAAM,CAACC,WAAX,CAAuB,CAAES,IAAI,CAAGF,KAAK,CAACf,cAAN,EAAwB,EAAjC,CAAvB,CANM,CAON,GAAIO,CAAAA,MAAM,CAACC,WAAX,CAAuB,CAAES,IAAI,CAAGF,KAAK,CAACd,aAAN,EAAuB,EAAhC,CAAvB,CAPM,CAQN,GAAIM,CAAAA,MAAM,CAACE,OAAX,CAAmB,CAAEQ,IAAI,CAAGF,KAAK,CAACb,YAAN,EAAsB,EAA/B,CAAnB,CARM,CAFoB,CAApB,CAAR,CAaA,CACD;AACA;;;IAIAC,UAAU,CAACC,MAAD,CACV,CACC;AACA,wBAAWA,MAAX,CAAmB,CAClB,eADkB,CAElB,gBAFkB,CAGlB,eAHkB,CAIlB,cAJkB,CAAnB,EAMA;AAEA;AACA,KAAMiB,CAAAA,IAAI,CAAGd,MAAM,CAACe,aAAP,CAAqBlB,MAArB,CACZA,MADY,CAEZT,MAAM,CAACS,MAAP,CAAc,CACbW,KAAK,CAAE,CACNjB,aAAa,CAAE,eADT,CAENE,cAAc,CAAE,gBAFV,CAGNC,aAAa,CAAE,eAHT,CAINC,YAAY,CAAE,cAJR,CADM,CAAd,CAFY,CAAb,CAYA,GAAGmB,IAAI,CAACE,QAAL,GAAkB,KAArB,CACC,KAAM,IAAIb,CAAAA,KAAJ,CAAU,gEAAV,CAAN,CACD;AAEA;AACA,KAAKZ,aAAL,CAAqB,GAAIQ,6BAAJ,CAAwB,CAAEF,MAAM,CAAEiB,IAAI,CAACG,MAAL,CAAY1B,aAAtB,CAAxB,CAArB,CACA,KAAKE,cAAL,CAAsBqB,IAAI,CAACG,MAAL,CAAYxB,cAAlC,CACA,KAAKC,aAAL,CAAqBoB,IAAI,CAACG,MAAL,CAAYvB,aAAjC,CACA,KAAKC,YAAL,CAAoBmB,IAAI,CAACG,MAAL,CAAYtB,YAAhC,CACA;AACA,CACD;AACA;;;IAIAuB,QAAQ,EACR,CACC;AACA,MAAQ,IAAIlB,CAAAA,MAAM,CAACS,QAAX,CAAoB,CAC3BG,KAAK,CAAE,CACN,KAAKrB,aAAL,CAAmB2B,QAAnB,EADM,CAEN,KAAKzB,cAFC,CAGN,KAAKC,aAHC,CAIN,KAAKC,YAJC,CADoB,CAApB,CAAR,CAQA;AACA,CACD;AACA;;;IAIAwB,MAAM,EACN,CACC,MAAO,CACN5B,aAAa,CAAE,KAAKA,aAAL,CAAmB4B,MAAnB,EADT,CAEN1B,cAAc,CAAE,KAAKA,cAAL,CAAoB0B,MAApB,EAFV,CAGNzB,aAAa,CAAE,KAAKA,aAAL,CAAmByB,MAAnB,EAHT,CAINxB,YAAY,CAAE,KAAKA,YAAL,CAAkBwB,MAAlB,EAJR,CAAP,CAMA,CACD;AACA;;;;IAKAZ,OAAO,CAACa,aAAD,CACP,CACC;AACA,GAAG,CAAC,KAAK7B,aAAL,CAAmBe,WAApB,GAAoCc,aAAa,CAAC7B,aAAd,CAA4Be,WAAnE,CACC,MAAO,MAAP,CACD;AAEA;AACA,GAAG,2BAAc,KAAKb,cAAL,CAAoB4B,UAApB,CAA+BC,QAA7C,CAAuDF,aAAa,CAAC3B,cAAd,CAA6B4B,UAA7B,CAAwCC,QAA/F,IAA6G,KAAhH,CACC,MAAO,MAAP,CACD;AAEA;AACA,GAAG,2BAAc,KAAK5B,aAAL,CAAmB2B,UAAnB,CAA8BC,QAA5C,CAAsDF,aAAa,CAAC1B,aAAd,CAA4B2B,UAA5B,CAAuCC,QAA7F,IAA2G,KAA9G,CACC,MAAO,MAAP,CACD;AAEA;AACA,GAAG,CAAC,KAAK3B,YAAL,CAAkBY,OAAlB,CAA0Ba,aAAa,CAACzB,YAAxC,CAAJ,CACC,MAAO,MAAP,CACD;AAEA,MAAO,KAAP,CACA,CACD;AACA;;;;;IAMA4B,oBAAoB,CAACC,WAAD,CAAclC,UAAd,CACpB,CACC;AACA,GAAImC,CAAAA,QAAQ,CAAGC,OAAO,CAACC,OAAR,EAAf,CAEA,GAAIC,CAAAA,iBAAJ,CACA;AAEA;AACA,KAAMC,CAAAA,MAAM,CAAG,uBAAf,CACA,GAAG,MAAOA,CAAAA,MAAP,GAAkB,WAArB,CACC,MAAOH,CAAAA,OAAO,CAACI,MAAR,CAAe,mCAAf,CAAP,CACD;AAEA;AACA,GAAI,iBAAmBxC,CAAAA,UAApB,GAAoC,KAAvC,CACC,MAAOoC,CAAAA,OAAO,CAACI,MAAR,CAAe,oFAAf,CAAP,CAED,KAAMC,CAAAA,OAAO,CAAG,8BAAkB,CAAErB,IAAI,CAAEpB,UAAU,CAACC,aAAnB,CAAlB,CAAhB,CACA,GAAGwC,OAAO,GAAK,EAAf,CACC,MAAOL,CAAAA,OAAO,CAACI,MAAR,CAAgB,8BAA6B,KAAKvC,aAAc,EAAhE,CAAP,CAED,KAAKA,aAAL,CAAqB,GAAIQ,6BAAJ,CAAwB,CAC5CO,WAAW,CAAEyB,OAD+B,CAE5CC,eAAe,CAAE,GAAIhC,CAAAA,MAAM,CAACiC,IAAX,EAF2B,CAAxB,CAArB,CAKA,GAAG,qBAAuB3C,CAAAA,UAA1B,CACCsC,iBAAiB,CAAGtC,UAAU,CAACsC,iBAA/B,CADD,IAGC,OAAOF,CAAAA,OAAO,CAACI,MAAR,CAAe,wFAAf,CAAP,CACD;AAEA;AACA,KAAKnC,YAAL,CAAoB6B,WAAW,CAAC7B,YAAhC,CACA;AAEA;AACA8B,QAAQ,CAAGA,QAAQ,CAACS,IAAT,CAAc,IACxBL,MAAM,CAACM,MAAP,CAAc,CAAEzB,IAAI,CAAEpB,UAAU,CAACC,aAAnB,CAAd,CAAkDqC,iBAAiB,CAACQ,OAAlB,CAA0BlB,QAA1B,GAAqCmB,KAArC,CAA2C,KAA3C,CAAlD,CADU,CAEXC,KAAK,EACJZ,OAAO,CAACI,MAAR,CAAeQ,KAAf,CAHU,CAAX,CAKA;AAEA;AACAb,QAAQ,CAAGA,QAAQ,CAACS,IAAT,CAAcjB,MAAM,EAC/B,CACC,KAAKxB,cAAL,CAAsB,GAAIO,CAAAA,MAAM,CAACC,WAAX,CAAuB,CAAEqB,QAAQ,CAAEL,MAAZ,CAAvB,CAAtB,CAEA,KAAMsB,CAAAA,eAAe,CAAGX,iBAAiB,CAACY,oBAAlB,CAAuCC,gBAAvC,CAAwDpB,UAAxD,CAAmEC,QAA3F,CAEA,MAAOO,CAAAA,MAAM,CAACM,MAAP,CAAc,CAAEzB,IAAI,CAAEpB,UAAU,CAACC,aAAnB,CAAd,CAAkDgD,eAAlD,CAAP,CACA,CAPU,CAORD,KAAK,EACPZ,OAAO,CAACI,MAAR,CAAeQ,KAAf,CARU,EASTJ,IATS,CASJjB,MAAM,EACb,CACC,KAAKvB,aAAL,CAAqB,GAAIM,CAAAA,MAAM,CAACC,WAAX,CAAuB,CAAEqB,QAAQ,CAAEL,MAAZ,CAAvB,CAArB,CACA,CAZU,CAYRqB,KAAK,EACPZ,OAAO,CAACI,MAAR,CAAeQ,KAAf,CAbU,CAAX,CAeA;AAEA,MAAOb,CAAAA,QAAP,CACA,CACD;AAtSD,CAwSA","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, isEqualBuffer, clearProps } from \"pvutils\";\r\nimport { getCrypto, getOIDByAlgorithm } from \"./common.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class CertID \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CertID class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc hashAlgorithm\r\n\t\t */\r\n\t\tthis.hashAlgorithm = getParametersValue(parameters, \"hashAlgorithm\", CertID.defaultValues(\"hashAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc issuerNameHash\r\n\t\t */\r\n\t\tthis.issuerNameHash = getParametersValue(parameters, \"issuerNameHash\", CertID.defaultValues(\"issuerNameHash\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc issuerKeyHash\r\n\t\t */\r\n\t\tthis.issuerKeyHash = getParametersValue(parameters, \"issuerKeyHash\", CertID.defaultValues(\"issuerKeyHash\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc serialNumber\r\n\t\t */\r\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", CertID.defaultValues(\"serialNumber\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"hashAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"issuerNameHash\":\r\n\t\t\tcase \"issuerKeyHash\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertID class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"hashAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"issuerNameHash\":\r\n\t\t\tcase \"issuerKeyHash\":\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn (memberValue.isEqual(CertID.defaultValues(memberName)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertID class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * CertID          ::=     SEQUENCE {\r\n\t *    hashAlgorithm       AlgorithmIdentifier,\r\n\t *    issuerNameHash      OCTET STRING, -- Hash of issuer's DN\r\n\t *    issuerKeyHash       OCTET STRING, -- Hash of issuer's public key\r\n\t *    serialNumber        CertificateSerialNumber }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [hashAlgorithm]\r\n\t\t * @property {string} [hashAlgorithmObject]\r\n\t\t * @property {string} [issuerNameHash]\r\n\t\t * @property {string} [issuerKeyHash]\r\n\t\t * @property {string} [serialNumber]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.hashAlgorithmObject || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: (names.hashAlgorithm || \"\")\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.issuerNameHash || \"\") }),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.issuerKeyHash || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"hashAlgorithm\",\r\n\t\t\t\"issuerNameHash\",\r\n\t\t\t\"issuerKeyHash\",\r\n\t\t\t\"serialNumber\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertID.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\thashAlgorithm: \"hashAlgorithm\",\r\n\t\t\t\t\tissuerNameHash: \"issuerNameHash\",\r\n\t\t\t\t\tissuerKeyHash: \"issuerKeyHash\",\r\n\t\t\t\t\tserialNumber: \"serialNumber\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CertID\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.hashAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.hashAlgorithm });\r\n\t\tthis.issuerNameHash = asn1.result.issuerNameHash;\r\n\t\tthis.issuerKeyHash = asn1.result.issuerKeyHash;\r\n\t\tthis.serialNumber = asn1.result.serialNumber;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.hashAlgorithm.toSchema(),\r\n\t\t\t\tthis.issuerNameHash,\r\n\t\t\t\tthis.issuerKeyHash,\r\n\t\t\t\tthis.serialNumber\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\thashAlgorithm: this.hashAlgorithm.toJSON(),\r\n\t\t\tissuerNameHash: this.issuerNameHash.toJSON(),\r\n\t\t\tissuerKeyHash: this.issuerKeyHash.toJSON(),\r\n\t\t\tserialNumber: this.serialNumber.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Check that two \"CertIDs\" are equal\r\n\t * @param {CertID} certificateID Identifier of the certificate to be checked\r\n\t * @returns {boolean}\r\n\t */\r\n\tisEqual(certificateID)\r\n\t{\r\n\t\t//region Check \"hashAlgorithm\"\r\n\t\tif(!this.hashAlgorithm.algorithmId === certificateID.hashAlgorithm.algorithmId)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check \"issuerNameHash\"\r\n\t\tif(isEqualBuffer(this.issuerNameHash.valueBlock.valueHex, certificateID.issuerNameHash.valueBlock.valueHex) === false)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check \"issuerKeyHash\"\r\n\t\tif(isEqualBuffer(this.issuerKeyHash.valueBlock.valueHex, certificateID.issuerKeyHash.valueBlock.valueHex) === false)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check \"serialNumber\"\r\n\t\tif(!this.serialNumber.isEqual(certificateID.serialNumber))\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Making OCSP certificate identifier for specific certificate\r\n\t * @param {Certificate} certificate Certificate making OCSP Request for\r\n\t * @param {Object} parameters Additional parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tcreateForCertificate(certificate, parameters)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tlet issuerCertificate;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check input parameters\r\n\t\tif((\"hashAlgorithm\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Parameter \\\"hashAlgorithm\\\" is mandatory for \\\"OCSP_REQUEST.createForCertificate\\\"\");\r\n\t\t\r\n\t\tconst hashOID = getOIDByAlgorithm({ name: parameters.hashAlgorithm });\r\n\t\tif(hashOID === \"\")\r\n\t\t\treturn Promise.reject(`Incorrect \"hashAlgorithm\": ${this.hashAlgorithm}`);\r\n\t\t\r\n\t\tthis.hashAlgorithm = new AlgorithmIdentifier({\r\n\t\t\talgorithmId: hashOID,\r\n\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t});\r\n\t\t\r\n\t\tif(\"issuerCertificate\" in parameters)\r\n\t\t\tissuerCertificate = parameters.issuerCertificate;\r\n\t\telse\r\n\t\t\treturn Promise.reject(\"Parameter \\\"issuerCertificate\\\" is mandatory for \\\"OCSP_REQUEST.createForCertificate\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initialize \"serialNumber\" field\r\n\t\tthis.serialNumber = certificate.serialNumber;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create \"issuerNameHash\"\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tcrypto.digest({ name: parameters.hashAlgorithm }, issuerCertificate.subject.toSchema().toBER(false)),\r\n\t\terror =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create \"issuerKeyHash\"\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.issuerNameHash = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\r\n\t\t\tconst issuerKeyBuffer = issuerCertificate.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex;\r\n\t\t\t\r\n\t\t\treturn crypto.digest({ name: parameters.hashAlgorithm }, issuerKeyBuffer);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t).then(result =>\r\n\t\t{\r\n\t\t\tthis.issuerKeyHash = new asn1js.OctetString({ valueHex: result });\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"CertID.js"}