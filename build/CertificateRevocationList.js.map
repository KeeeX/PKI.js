{"version":3,"sources":["../src/CertificateRevocationList.js"],"names":["tbsCertList","parameters","names","asn1js","Sequence","name","blockName","value","Integer","optional","tbsCertListVersion","AlgorithmIdentifier","schema","signature","RelativeDistinguishedNames","issuer","Time","tbsCertListThisUpdate","utcTimeName","generalTimeName","tbsCertListNextUpdate","Repeated","tbsCertListRevokedCertificates","Extensions","Constructed","idBlock","tagClass","tagNumber","crlExtensions","CertificateRevocationList","constructor","tbs","defaultValues","version","thisUpdate","nextUpdate","revokedCertificates","signatureAlgorithm","signatureValue","fromSchema","memberName","ArrayBuffer","BitString","Error","asn1","compareSchema","verified","result","valueBeforeDecode","valueBlock","valueDec","Array","from","element","RevokedCertificate","encodeTBS","outputArray","push","toSchema","encodeFlag","tbsSchema","length","fromBER","toJSON","object","byteLength","isCertificateRevoked","certificate","isEqual","revokedCertificate","userCertificate","serialNumber","sign","privateKey","hashAlgorithm","Promise","reject","sequence","resolve","engine","then","subtle","getSignatureParameters","toBER","signWithPrivateKey","valueHex","verify","subjectPublicKeyInfo","issuerCertificate","subject","publicKeyInfo","extensions","extension","critical","verifyWithPublicKey"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, bufferToHexCodes, clearProps } from \"pvutils\";\r\nimport { getEngine } from \"./common.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\";\r\nimport Time from \"./Time.js\";\r\nimport RevokedCertificate from \"./RevokedCertificate.js\";\r\nimport Extensions from \"./Extensions.js\";\r\n//**************************************************************************************\r\nfunction tbsCertList(parameters = {})\r\n{\r\n\t//TBSCertList  ::=  SEQUENCE  {\r\n\t//    version                 Version OPTIONAL,\r\n\t//                                 -- if present, MUST be v2\r\n\t//    signature               AlgorithmIdentifier,\r\n\t//    issuer                  Name,\r\n\t//    thisUpdate              Time,\r\n\t//    nextUpdate              Time OPTIONAL,\r\n\t//    revokedCertificates     SEQUENCE OF SEQUENCE  {\r\n\t//        userCertificate         CertificateSerialNumber,\r\n\t//        revocationDate          Time,\r\n\t//        crlEntryExtensions      Extensions OPTIONAL\r\n\t//        -- if present, version MUST be v2\r\n\t//    }  OPTIONAL,\r\n\t//    crlExtensions           [0]  EXPLICIT Extensions OPTIONAL\r\n\t//    -- if present, version MUST be v2\r\n\t//}\r\n\t\r\n\t/**\r\n\t * @type {Object}\r\n\t * @property {string} [blockName]\r\n\t * @property {string} [tbsCertListVersion]\r\n\t * @property {string} [signature]\r\n\t * @property {string} [issuer]\r\n\t * @property {string} [tbsCertListThisUpdate]\r\n\t * @property {string} [tbsCertListNextUpdate]\r\n\t * @property {string} [tbsCertListRevokedCertificates]\r\n\t * @property {string} [crlExtensions]\r\n\t */\r\n\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\r\n\treturn (new asn1js.Sequence({\r\n\t\tname: (names.blockName || \"tbsCertList\"),\r\n\t\tvalue: [\r\n\t\t\tnew asn1js.Integer({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tname: (names.tbsCertListVersion || \"tbsCertList.version\"),\r\n\t\t\t\tvalue: 2\r\n\t\t\t}), // EXPLICIT integer value (v2)\r\n\t\t\tAlgorithmIdentifier.schema(names.signature || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"tbsCertList.signature\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tRelativeDistinguishedNames.schema(names.issuer || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"tbsCertList.issuer\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tTime.schema(names.tbsCertListThisUpdate || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tutcTimeName: \"tbsCertList.thisUpdate\",\r\n\t\t\t\t\tgeneralTimeName: \"tbsCertList.thisUpdate\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tTime.schema(names.tbsCertListNextUpdate || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tutcTimeName: \"tbsCertList.nextUpdate\",\r\n\t\t\t\t\tgeneralTimeName: \"tbsCertList.nextUpdate\"\r\n\t\t\t\t}\r\n\t\t\t}, true),\r\n\t\t\tnew asn1js.Sequence({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\tname: (names.tbsCertListRevokedCertificates || \"tbsCertList.revokedCertificates\"),\r\n\t\t\t\t\t\tvalue: new asn1js.Sequence({\r\n\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\tnew asn1js.Integer(),\r\n\t\t\t\t\t\t\t\tTime.schema(),\r\n\t\t\t\t\t\t\t\tExtensions.schema({}, true)\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t}),\r\n\t\t\tnew asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [Extensions.schema(names.crlExtensions || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"tbsCertList.extensions\"\r\n\t\t\t\t\t}\r\n\t\t\t\t})]\r\n\t\t\t}) // EXPLICIT SEQUENCE value\r\n\t\t]\r\n\t}));\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class CertificateRevocationList {\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Attribute class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc tbs\r\n\t\t */\r\n\t\tthis.tbs = getParametersValue(parameters, \"tbs\", CertificateRevocationList.defaultValues(\"tbs\"));\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", CertificateRevocationList.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc signature\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", CertificateRevocationList.defaultValues(\"signature\"));\r\n\t\t/**\r\n\t\t * @type {RelativeDistinguishedNames}\r\n\t\t * @desc issuer\r\n\t\t */\r\n\t\tthis.issuer = getParametersValue(parameters, \"issuer\", CertificateRevocationList.defaultValues(\"issuer\"));\r\n\t\t/**\r\n\t\t * @type {Time}\r\n\t\t * @desc thisUpdate\r\n\t\t */\r\n\t\tthis.thisUpdate = getParametersValue(parameters, \"thisUpdate\", CertificateRevocationList.defaultValues(\"thisUpdate\"));\r\n\t\t\r\n\t\tif(\"nextUpdate\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Time}\r\n\t\t\t * @desc nextUpdate\r\n\t\t\t */\r\n\t\t\tthis.nextUpdate = getParametersValue(parameters, \"nextUpdate\", CertificateRevocationList.defaultValues(\"nextUpdate\"));\r\n\t\t\r\n\t\tif(\"revokedCertificates\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<RevokedCertificate>}\r\n\t\t\t * @desc revokedCertificates\r\n\t\t\t */\r\n\t\t\tthis.revokedCertificates = getParametersValue(parameters, \"revokedCertificates\", CertificateRevocationList.defaultValues(\"revokedCertificates\"));\r\n\t\t\r\n\t\tif(\"crlExtensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Extensions}\r\n\t\t\t * @desc crlExtensions\r\n\t\t\t */\r\n\t\t\tthis.crlExtensions = getParametersValue(parameters, \"crlExtensions\", CertificateRevocationList.defaultValues(\"crlExtensions\"));\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", CertificateRevocationList.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @desc signatureValue\r\n\t\t */\r\n\t\tthis.signatureValue = getParametersValue(parameters, \"signatureValue\", CertificateRevocationList.defaultValues(\"signatureValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbs\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 1;\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"issuer\":\r\n\t\t\t\treturn new RelativeDistinguishedNames();\r\n\t\t\tcase \"thisUpdate\":\r\n\t\t\t\treturn new Time();\r\n\t\t\tcase \"nextUpdate\":\r\n\t\t\t\treturn new Time();\r\n\t\t\tcase \"revokedCertificates\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"crlExtensions\":\r\n\t\t\t\treturn new Extensions();\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signatureValue\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertificateRevocationList class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * CertificateList  ::=  SEQUENCE  {\r\n\t *    tbsCertList          TBSCertList,\r\n\t *    signatureAlgorithm   AlgorithmIdentifier,\r\n\t *    signatureValue       BIT STRING  }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [signatureAlgorithm]\r\n\t\t * @property {string} [signatureValue]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"CertificateList\"),\r\n\t\t\tvalue: [\r\n\t\t\t\ttbsCertList(parameters),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"signatureAlgorithm\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.signatureValue || \"signatureValue\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"tbsCertList\",\r\n\t\t\t\"tbsCertList.version\",\r\n\t\t\t\"tbsCertList.signature\",\r\n\t\t\t\"tbsCertList.issuer\",\r\n\t\t\t\"tbsCertList.thisUpdate\",\r\n\t\t\t\"tbsCertList.nextUpdate\",\r\n\t\t\t\"tbsCertList.revokedCertificates\",\r\n\t\t\t\"tbsCertList.extensions\",\r\n\t\t\t\"signatureAlgorithm\",\r\n\t\t\t\"signatureValue\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertificateRevocationList.schema()\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CertificateRevocationList\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\t// noinspection JSUnresolvedVariable\r\n\t\tthis.tbs = asn1.result.tbsCertList.valueBeforeDecode;\r\n\t\t\r\n\t\tif(\"tbsCertList.version\" in asn1.result)\r\n\t\t\tthis.version = asn1.result[\"tbsCertList.version\"].valueBlock.valueDec;\r\n\t\tthis.signature = new AlgorithmIdentifier({ schema: asn1.result[\"tbsCertList.signature\"] });\r\n\t\tthis.issuer = new RelativeDistinguishedNames({ schema: asn1.result[\"tbsCertList.issuer\"] });\r\n\t\tthis.thisUpdate = new Time({ schema: asn1.result[\"tbsCertList.thisUpdate\"] });\r\n\t\tif(\"tbsCertList.nextUpdate\" in asn1.result)\r\n\t\t\tthis.nextUpdate = new Time({ schema: asn1.result[\"tbsCertList.nextUpdate\"] });\r\n\t\tif(\"tbsCertList.revokedCertificates\" in asn1.result)\r\n\t\t\tthis.revokedCertificates = Array.from(asn1.result[\"tbsCertList.revokedCertificates\"], element => new RevokedCertificate({ schema: element }));\r\n\t\tif(\"tbsCertList.extensions\" in asn1.result)\r\n\t\t\tthis.crlExtensions = new Extensions({ schema: asn1.result[\"tbsCertList.extensions\"] });\r\n\t\t\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\r\n\t\tthis.signatureValue = asn1.result.signatureValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\tencodeTBS()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif(this.version !== CertificateRevocationList.defaultValues(\"version\"))\r\n\t\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\t\r\n\t\toutputArray.push(this.signature.toSchema());\r\n\t\toutputArray.push(this.issuer.toSchema());\r\n\t\toutputArray.push(this.thisUpdate.toSchema());\r\n\t\t\r\n\t\tif(\"nextUpdate\" in this)\r\n\t\t\toutputArray.push(this.nextUpdate.toSchema());\r\n\t\t\r\n\t\tif(\"revokedCertificates\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\t\tvalue: Array.from(this.revokedCertificates, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"crlExtensions\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tthis.crlExtensions.toSchema()\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\t//region Decode stored TBS value\r\n\t\tlet tbsSchema;\r\n\t\t\r\n\t\tif(encodeFlag === false)\r\n\t\t{\r\n\t\t\tif(this.tbs.length === 0) // No stored TBS part\r\n\t\t\t\treturn CertificateRevocationList.schema();\r\n\t\t\t\r\n\t\t\ttbsSchema = asn1js.fromBER(this.tbs).result;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Create TBS schema via assembling from TBS parts\r\n\t\telse\r\n\t\t\ttbsSchema = this.encodeTBS();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\ttbsSchema,\r\n\t\t\t\tthis.signatureAlgorithm.toSchema(),\r\n\t\t\t\tthis.signatureValue\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\ttbs: bufferToHexCodes(this.tbs, 0, this.tbs.byteLength),\r\n\t\t\tsignature: this.signature.toJSON(),\r\n\t\t\tissuer: this.issuer.toJSON(),\r\n\t\t\tthisUpdate: this.thisUpdate.toJSON(),\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n\t\t\tsignatureValue: this.signatureValue.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(this.version !== CertificateRevocationList.defaultValues(\"version\"))\r\n\t\t\tobject.version = this.version;\r\n\t\t\r\n\t\tif(\"nextUpdate\" in this)\r\n\t\t\tobject.nextUpdate = this.nextUpdate.toJSON();\r\n\t\t\r\n\t\tif(\"revokedCertificates\" in this)\r\n\t\t\tobject.revokedCertificates = Array.from(this.revokedCertificates, element => element.toJSON());\r\n\t\t\r\n\t\tif(\"crlExtensions\" in this)\r\n\t\t\tobject.crlExtensions = this.crlExtensions.toJSON();\r\n\t\t\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n\tisCertificateRevoked(certificate)\r\n\t{\r\n\t\t//region Check that issuer of the input certificate is the same with issuer of this CRL\r\n\t\tif(this.issuer.isEqual(certificate.issuer) === false)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check that there are revoked certificates in this CRL\r\n\t\tif((\"revokedCertificates\" in this) === false)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Search for input certificate in revoked certificates array\r\n\t\tfor(const revokedCertificate of this.revokedCertificates)\r\n\t\t{\r\n\t\t\tif(revokedCertificate.userCertificate.isEqual(certificate.serialNumber))\r\n\t\t\t\treturn true;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn false;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Make a signature for existing CRL data\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1\r\n\t */\r\n\tsign(privateKey, hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Initial checking\r\n\t\t//region Get a private key from function parameter\r\n\t\tif(typeof privateKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide a private key for signing\");\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tlet parameters;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"default parameters\" for current algorithm and set correct signature algorithm\r\n\t\tsequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tparameters = result.parameters;\r\n\t\t\tthis.signature = result.signatureAlgorithm;\r\n\t\t\tthis.signatureAlgorithm = result.signatureAlgorithm;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create TBS data for signing\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tthis.tbs = this.encodeTBS().toBER(false);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Signing TBS data on provided private key\r\n\t\tsequence = sequence.then(() => engine.subtle.signWithPrivateKey(this.tbs, privateKey, parameters));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.signatureValue = new asn1js.BitString({ valueHex: result });\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify existing signature\r\n\t * @param {{[issuerCertificate]: Object, [publicKeyInfo]: Object}} parameters\r\n\t * @returns {*}\r\n\t */\r\n\tverify(parameters = {})\r\n\t{\r\n\t\t//region Global variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tlet subjectPublicKeyInfo = -1;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get information about CRL issuer certificate\r\n\t\tif(\"issuerCertificate\" in parameters) // \"issuerCertificate\" must be of type \"Certificate\"\r\n\t\t{\r\n\t\t\tsubjectPublicKeyInfo = parameters.issuerCertificate.subjectPublicKeyInfo;\r\n\t\t\t\r\n\t\t\t// The CRL issuer name and \"issuerCertificate\" subject name are not equal\r\n\t\t\tif(this.issuer.isEqual(parameters.issuerCertificate.subject) === false)\r\n\t\t\t\treturn Promise.resolve(false);\r\n\t\t}\r\n\t\t\r\n\t\t//region In case if there is only public key during verification\r\n\t\tif(\"publicKeyInfo\" in parameters)\r\n\t\t\tsubjectPublicKeyInfo = parameters.publicKeyInfo; // Must be of type \"PublicKeyInfo\"\r\n\t\t//endregion\r\n\t\t\r\n\t\tif((\"subjectPublicKey\" in subjectPublicKeyInfo) === false)\r\n\t\t\treturn Promise.reject(\"Issuer's certificate must be provided as an input parameter\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the CRL for unknown critical extensions\r\n\t\tif(\"crlExtensions\" in this)\r\n\t\t{\r\n\t\t\tfor(const extension of this.crlExtensions.extensions)\r\n\t\t\t{\r\n\t\t\t\tif(extension.critical)\r\n\t\t\t\t{\r\n\t\t\t\t\t// We can not be sure that unknown extension has no value for CRL signature\r\n\t\t\t\t\tif((\"parsedValue\" in extension) === false)\r\n\t\t\t\t\t\treturn Promise.resolve(false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\tsequence = sequence.then(() => engine.subtle.verifyWithPublicKey(this.tbs, this.signatureValue, subjectPublicKeyInfo, this.signatureAlgorithm));\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"CertificateRevocationList.js"}