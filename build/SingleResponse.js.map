{"version":3,"sources":["../src/SingleResponse.js"],"names":["SingleResponse","constructor","parameters","certID","defaultValues","certStatus","thisUpdate","nextUpdate","singleExtensions","fromSchema","schema","memberName","CertID","Date","Error","compareWithDefault","memberValue","hashAlgorithm","issuerNameHash","issuerKeyHash","serialNumber","Object","keys","length","names","asn1js","Sequence","name","blockName","value","Choice","Primitive","idBlock","tagClass","tagNumber","lenBlockLength","Constructed","GeneralizedTime","optional","Enumerated","lenBlock","Extensions","asn1","compareSchema","verified","result","toDate","Array","from","valueBlock","element","Extension","toSchema","outputArray","push","valueDate","toJSON","_object"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport CertID from \"./CertID.js\";\r\nimport Extension from \"./Extension.js\";\r\nimport Extensions from \"./Extensions.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class SingleResponse\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SingleResponse class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {CertID}\r\n\t\t * @desc certID\r\n\t\t */\r\n\t\tthis.certID = getParametersValue(parameters, \"certID\", SingleResponse.defaultValues(\"certID\"));\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @desc certStatus\r\n\t\t */\r\n\t\tthis.certStatus = getParametersValue(parameters, \"certStatus\", SingleResponse.defaultValues(\"certStatus\"));\r\n\t\t/**\r\n\t\t * @type {Date}\r\n\t\t * @desc thisUpdate\r\n\t\t */\r\n\t\tthis.thisUpdate = getParametersValue(parameters, \"thisUpdate\", SingleResponse.defaultValues(\"thisUpdate\"));\r\n\r\n\t\tif(\"nextUpdate\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Date}\r\n\t\t\t * @desc nextUpdate\r\n\t\t\t */\r\n\t\t\tthis.nextUpdate = getParametersValue(parameters, \"nextUpdate\", SingleResponse.defaultValues(\"nextUpdate\"));\r\n\r\n\t\tif(\"singleExtensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Extension>}\r\n\t\t\t * @desc singleExtensions\r\n\t\t\t */\r\n\t\t\tthis.singleExtensions = getParametersValue(parameters, \"singleExtensions\", SingleResponse.defaultValues(\"singleExtensions\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certID\":\r\n\t\t\t\treturn new CertID();\r\n\t\t\tcase \"certStatus\":\r\n\t\t\t\treturn {};\r\n\t\t\tcase \"thisUpdate\":\r\n\t\t\tcase \"nextUpdate\":\r\n\t\t\t\treturn new Date(0, 0, 0);\r\n\t\t\tcase \"singleExtensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SingleResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certID\":\r\n\t\t\t\t// noinspection OverlyComplexBooleanExpressionJS\r\n\t\t\t\treturn ((CertID.compareWithDefault(\"hashAlgorithm\", memberValue.hashAlgorithm)) &&\r\n\t\t\t\t\t\t(CertID.compareWithDefault(\"issuerNameHash\", memberValue.issuerNameHash)) &&\r\n\t\t\t\t\t\t(CertID.compareWithDefault(\"issuerKeyHash\", memberValue.issuerKeyHash)) &&\r\n\t\t\t\t\t\t(CertID.compareWithDefault(\"serialNumber\", memberValue.serialNumber)));\r\n\t\t\tcase \"certStatus\":\r\n\t\t\t\treturn (Object.keys(memberValue).length === 0);\r\n\t\t\tcase \"thisUpdate\":\r\n\t\t\tcase \"nextUpdate\":\r\n\t\t\t\treturn (memberValue === SingleResponse.defaultValues(memberName));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SingleResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * SingleResponse ::= SEQUENCE {\r\n\t *    certID                       CertID,\r\n\t *    certStatus                   CertStatus,\r\n\t *    thisUpdate                   GeneralizedTime,\r\n\t *    nextUpdate         [0]       EXPLICIT GeneralizedTime OPTIONAL,\r\n\t *    singleExtensions   [1]       EXPLICIT Extensions OPTIONAL }\r\n\t *\r\n\t * CertStatus ::= CHOICE {\r\n\t *    good        [0]     IMPLICIT NULL,\r\n\t *    revoked     [1]     IMPLICIT RevokedInfo,\r\n\t *    unknown     [2]     IMPLICIT UnknownInfo }\r\n\t *\r\n\t * RevokedInfo ::= SEQUENCE {\r\n\t *    revocationTime              GeneralizedTime,\r\n\t *    revocationReason    [0]     EXPLICIT CRLReason OPTIONAL }\r\n\t *\r\n\t * UnknownInfo ::= NULL\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [certID]\r\n\t\t * @property {string} [certStatus]\r\n\t\t * @property {string} [thisUpdate]\r\n\t\t * @property {string} [nextUpdate]\r\n\t\t * @property {string} [singleExtensions]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tCertID.schema(names.certID || {}),\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\t\t\tname: (names.certStatus || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tlenBlockLength: 1 // The length contains one byte 0x00\r\n\t\t\t\t\t\t}), // IMPLICIT NULL (no \"valueBlock\")\r\n\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\tname: (names.certStatus || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\tnew asn1js.GeneralizedTime(),\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\toptional: true,\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: [new asn1js.Enumerated()]\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\t\t\tname: (names.certStatus || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tlenBlock: { length: 1 }\r\n\t\t\t\t\t\t}) // IMPLICIT NULL (no \"valueBlock\")\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.GeneralizedTime({ name: (names.thisUpdate || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.GeneralizedTime({ name: (names.nextUpdate || \"\") })]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [Extensions.schema(names.singleExtensions || {})]\r\n\t\t\t\t}) // EXPLICIT SEQUENCE value\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"certID\",\r\n\t\t\t\"certStatus\",\r\n\t\t\t\"thisUpdate\",\r\n\t\t\t\"nextUpdate\",\r\n\t\t\t\"singleExtensions\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSingleResponse.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcertID: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"certID\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tcertStatus: \"certStatus\",\r\n\t\t\t\t\tthisUpdate: \"thisUpdate\",\r\n\t\t\t\t\tnextUpdate: \"nextUpdate\",\r\n\t\t\t\t\tsingleExtensions: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName:\r\n\t\t\t\t\t\t\t\t\"singleExtensions\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SingleResponse\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.certID = new CertID({ schema: asn1.result.certID });\r\n\t\tthis.certStatus = asn1.result.certStatus;\r\n\t\tthis.thisUpdate = asn1.result.thisUpdate.toDate();\r\n\t\tif(\"nextUpdate\" in asn1.result)\r\n\t\t\tthis.nextUpdate = asn1.result.nextUpdate.toDate();\r\n\r\n\t\tif(\"singleExtensions\" in asn1.result)\r\n\t\t\tthis.singleExtensions = Array.from(asn1.result.singleExtensions.valueBlock.value, element => new Extension({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create value array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(this.certID.toSchema());\r\n\t\toutputArray.push(this.certStatus);\r\n\t\toutputArray.push(new asn1js.GeneralizedTime({ valueDate: this.thisUpdate }));\r\n\t\tif(\"nextUpdate\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [new asn1js.GeneralizedTime({ valueDate: this.nextUpdate })]\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\tif(\"singleExtensions\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\t\tvalue: Array.from(this.singleExtensions, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tcertID: this.certID.toJSON(),\r\n\t\t\tcertStatus: this.certStatus.toJSON(),\r\n\t\t\tthisUpdate: this.thisUpdate\r\n\t\t};\r\n\r\n\t\tif(\"nextUpdate\" in this)\r\n\t\t\t_object.nextUpdate = this.nextUpdate;\r\n\r\n\t\tif(\"singleExtensions\" in this)\r\n\t\t\t_object.singleExtensions = Array.from(this.singleExtensions, element => element.toJSON());\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"SingleResponse.js"}