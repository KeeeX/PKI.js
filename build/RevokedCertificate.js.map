{"version":3,"sources":["../src/RevokedCertificate.js"],"names":["RevokedCertificate","constructor","parameters","userCertificate","defaultValues","revocationDate","crlEntryExtensions","fromSchema","schema","memberName","asn1js","Integer","Time","Extensions","Error","names","Sequence","name","blockName","value","utcTimeName","generalTimeName","asn1","compareSchema","verified","result","toSchema","outputArray","push","toJSON","object"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport Time from \"./Time.js\";\r\nimport Extensions from \"./Extensions.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class RevokedCertificate\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for RevokedCertificate class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc userCertificate\r\n\t\t */\r\n\t\tthis.userCertificate = getParametersValue(parameters, \"userCertificate\", RevokedCertificate.defaultValues(\"userCertificate\"));\r\n\t\t/**\r\n\t\t * @type {Time}\r\n\t\t * @desc revocationDate\r\n\t\t */\r\n\t\tthis.revocationDate = getParametersValue(parameters, \"revocationDate\", RevokedCertificate.defaultValues(\"revocationDate\"));\r\n\r\n\t\tif(\"crlEntryExtensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Extensions}\r\n\t\t\t * @desc crlEntryExtensions\r\n\t\t\t */\r\n\t\t\tthis.crlEntryExtensions = getParametersValue(parameters, \"crlEntryExtensions\", RevokedCertificate.defaultValues(\"crlEntryExtensions\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"userCertificate\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"revocationDate\":\r\n\t\t\t\treturn new Time();\r\n\t\t\tcase \"crlEntryExtensions\":\r\n\t\t\t\treturn new Extensions();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RevokedCertificate class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * revokedCertificates     SEQUENCE OF SEQUENCE  {\r\n     *        userCertificate         CertificateSerialNumber,\r\n     *        revocationDate          Time,\r\n     *        crlEntryExtensions      Extensions OPTIONAL\r\n     *                                 -- if present, version MUST be v2\r\n     *                             }  OPTIONAL,\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [userCertificate]\r\n\t\t * @property {string} [revocationDate]\r\n\t\t * @property {string} [crlEntryExtensions]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.userCertificate || \"userCertificate\") }),\r\n\t\t\t\tTime.schema({\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tutcTimeName: (names.revocationDate || \"revocationDate\"),\r\n\t\t\t\t\t\tgeneralTimeName: (names.revocationDate || \"revocationDate\")\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tExtensions.schema({\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: (names.crlEntryExtensions || \"crlEntryExtensions\")\r\n\t\t\t\t\t}\r\n\t\t\t\t}, true)\r\n\t\t\t]\r\n\t\t});\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"userCertificate\",\r\n\t\t\t\"revocationDate\",\r\n\t\t\t\"crlEntryExtensions\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRevokedCertificate.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for RevokedCertificate\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.userCertificate = asn1.result.userCertificate;\r\n\t\tthis.revocationDate = new Time({ schema: asn1.result.revocationDate });\r\n\r\n\t\tif(\"crlEntryExtensions\" in asn1.result)\r\n\t\t\tthis.crlEntryExtensions = new Extensions({ schema: asn1.result.crlEntryExtensions });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [\r\n\t\t\tthis.userCertificate,\r\n\t\t\tthis.revocationDate.toSchema()\r\n\t\t];\r\n\r\n\t\tif(\"crlEntryExtensions\" in this)\r\n\t\t\toutputArray.push(this.crlEntryExtensions.toSchema());\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\tuserCertificate: this.userCertificate.toJSON(),\r\n\t\t\trevocationDate: this.revocationDate.toJSON\r\n\t\t};\r\n\r\n\t\tif(\"crlEntryExtensions\" in this)\r\n\t\t\tobject.crlEntryExtensions = this.crlEntryExtensions.toJSON();\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"RevokedCertificate.js"}