{"version":3,"sources":["../src/NameConstraints.js"],"names":["NameConstraints","constructor","parameters","permittedSubtrees","defaultValues","excludedSubtrees","fromSchema","schema","memberName","Error","names","asn1js","Sequence","name","blockName","value","Constructed","optional","idBlock","tagClass","tagNumber","Repeated","GeneralSubtree","asn1","compareSchema","verified","result","Array","from","element","toSchema","outputArray","push","toJSON","object"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport GeneralSubtree from \"./GeneralSubtree.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class NameConstraints\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for NameConstraints class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\tif(\"permittedSubtrees\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<GeneralSubtree>}\r\n\t\t\t * @desc permittedSubtrees\r\n\t\t\t */\r\n\t\t\tthis.permittedSubtrees = getParametersValue(parameters, \"permittedSubtrees\", NameConstraints.defaultValues(\"permittedSubtrees\"));\r\n\r\n\t\tif(\"excludedSubtrees\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<GeneralSubtree>}\r\n\t\t\t * @desc excludedSubtrees\r\n\t\t\t */\r\n\t\t\tthis.excludedSubtrees = getParametersValue(parameters, \"excludedSubtrees\", NameConstraints.defaultValues(\"excludedSubtrees\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"permittedSubtrees\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"excludedSubtrees\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for NameConstraints class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * NameConstraints ::= SEQUENCE {\r\n\t *    permittedSubtrees       [0]     GeneralSubtrees OPTIONAL,\r\n\t *    excludedSubtrees        [1]     GeneralSubtrees OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [permittedSubtrees]\r\n\t\t * @property {string} [excludedSubtrees]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.permittedSubtrees || \"\"),\r\n\t\t\t\t\t\t\tvalue: GeneralSubtree.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.excludedSubtrees || \"\"),\r\n\t\t\t\t\t\t\tvalue: GeneralSubtree.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"permittedSubtrees\",\r\n\t\t\t\"excludedSubtrees\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tNameConstraints.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tpermittedSubtrees: \"permittedSubtrees\",\r\n\t\t\t\t\texcludedSubtrees: \"excludedSubtrees\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for NameConstraints\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"permittedSubtrees\" in asn1.result)\r\n\t\t\tthis.permittedSubtrees = Array.from(asn1.result.permittedSubtrees, element => new GeneralSubtree({ schema: element }));\r\n\r\n\t\tif(\"excludedSubtrees\" in asn1.result)\r\n\t\t\tthis.excludedSubtrees = Array.from(asn1.result.excludedSubtrees, element => new GeneralSubtree({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif(\"permittedSubtrees\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [new asn1js.Sequence({\r\n\t\t\t\t\tvalue: Array.from(this.permittedSubtrees, element => element.toSchema())\r\n\t\t\t\t})]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"excludedSubtrees\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [new asn1js.Sequence({\r\n\t\t\t\t\tvalue: Array.from(this.excludedSubtrees, element => element.toSchema())\r\n\t\t\t\t})]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {};\r\n\t\t\r\n\t\tif(\"permittedSubtrees\" in this)\r\n\t\t\tobject.permittedSubtrees = Array.from(this.permittedSubtrees, element => element.toJSON());\r\n\r\n\t\tif(\"excludedSubtrees\" in this)\r\n\t\t\tobject.excludedSubtrees = Array.from(this.excludedSubtrees, element => element.toJSON());\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"NameConstraints.js"}