{"version":3,"sources":["../src/EncryptedData.js"],"names":["EncryptedData","constructor","parameters","version","defaultValues","encryptedContentInfo","unprotectedAttrs","fromSchema","schema","memberName","EncryptedContentInfo","Error","compareWithDefault","memberValue","contentType","contentEncryptionAlgorithm","encryptedContent","length","names","asn1js","Sequence","name","blockName","value","Integer","Constructed","optional","idBlock","tagClass","tagNumber","Repeated","Attribute","asn1","compareSchema","verified","result","valueBlock","valueDec","Array","from","element","toSchema","outputArray","push","toJSON","_object","encrypt","Object","Promise","reject","engine","subtle","encryptEncryptedContentInfo","then","decrypt","decryptEncryptedContentInfo"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport { getEngine } from \"./common.js\";\r\nimport EncryptedContentInfo from \"./EncryptedContentInfo.js\";\r\nimport Attribute from \"./Attribute.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class EncryptedData\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for EncryptedData class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", EncryptedData.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {EncryptedContentInfo}\r\n\t\t * @desc encryptedContentInfo\r\n\t\t */\r\n\t\tthis.encryptedContentInfo = getParametersValue(parameters, \"encryptedContentInfo\", EncryptedData.defaultValues(\"encryptedContentInfo\"));\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Attribute>}\r\n\t\t\t * @desc unprotectedAttrs\r\n\t\t\t */\r\n\t\t\tthis.unprotectedAttrs = getParametersValue(parameters, \"unprotectedAttrs\", EncryptedData.defaultValues(\"unprotectedAttrs\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"encryptedContentInfo\":\r\n\t\t\t\treturn new EncryptedContentInfo();\r\n\t\t\tcase \"unprotectedAttrs\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EncryptedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === 0);\r\n\t\t\tcase \"encryptedContentInfo\":\r\n\t\t\t\treturn ((EncryptedContentInfo.compareWithDefault(\"contentType\", memberValue.contentType)) &&\r\n\t\t\t\t(EncryptedContentInfo.compareWithDefault(\"contentEncryptionAlgorithm\", memberValue.contentEncryptionAlgorithm)) &&\r\n\t\t\t\t(EncryptedContentInfo.compareWithDefault(\"encryptedContent\", memberValue.encryptedContent)));\r\n\t\t\tcase \"unprotectedAttrs\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EncryptedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * EncryptedData ::= SEQUENCE {\r\n\t *    version CMSVersion,\r\n\t *    encryptedContentInfo EncryptedContentInfo,\r\n\t *    unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [encryptedContentInfo]\r\n\t\t * @property {string} [unprotectedAttrs]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tEncryptedContentInfo.schema(names.encryptedContentInfo || {}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.unprotectedAttrs || \"\"),\r\n\t\t\t\t\t\t\tvalue: Attribute.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"encryptedContentInfo\",\r\n\t\t\t\"unprotectedAttrs\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tEncryptedData.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tencryptedContentInfo: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"encryptedContentInfo\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tunprotectedAttrs: \"unprotectedAttrs\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for EncryptedData\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.encryptedContentInfo = new EncryptedContentInfo({ schema: asn1.result.encryptedContentInfo });\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in asn1.result)\r\n\t\t\tthis.unprotectedAttrs = Array.from(asn1.result.unprotectedAttrs, element => new Attribute({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\toutputArray.push(this.encryptedContentInfo.toSchema());\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.unprotectedAttrs, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version,\r\n\t\t\tencryptedContentInfo: this.encryptedContentInfo.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in this)\r\n\t\t\t_object.unprotectedAttrs = Array.from(this.unprotectedAttrs, element => element.toJSON());\r\n\t\t\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Create a new CMS Encrypted Data content\r\n\t * @param {Object} parameters Parameters neccessary for encryption\r\n\t * @returns {Promise}\r\n\t */\r\n\tencrypt(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get cryptographic engine\r\n\t\tconst engine = getEngine();\r\n\t\tif(typeof engine === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to initialize cryptographic engine\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Set \"contentType\" parameter\r\n\t\tparameters.contentType = \"1.2.840.113549.1.7.1\"; // \"data\"\r\n\t\t//endregion\r\n\t\t\r\n\t\tif(\"encryptEncryptedContentInfo\" in engine.subtle)\r\n\t\t{\r\n\t\t\treturn engine.subtle.encryptEncryptedContentInfo(parameters).then(result =>\r\n\t\t\t{\r\n\t\t\t\tthis.encryptedContentInfo = result;\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\treturn Promise.reject(`No support for \"encryptEncryptedContentInfo\" in current crypto engine ${engine.name}`);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Create a new CMS Encrypted Data content\r\n\t * @param {Object} parameters Parameters neccessary for encryption\r\n\t */\r\n\tdecrypt(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get cryptographic engine\r\n\t\tconst engine = getEngine();\r\n\t\tif(typeof engine === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to initialize cryptographic engine\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Set \"encryptedContentInfo\" value\r\n\t\tparameters.encryptedContentInfo = this.encryptedContentInfo;\r\n\t\t//endregion\r\n\t\t\r\n\t\tif(\"decryptEncryptedContentInfo\" in engine.subtle)\r\n\t\t\treturn engine.subtle.decryptEncryptedContentInfo(parameters);\r\n\t\t\r\n\t\treturn Promise.reject(`No support for \"decryptEncryptedContentInfo\" in current crypto engine ${engine.name}`);\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"EncryptedData.js"}