{"version":3,"sources":["../src/PolicyInformation.js"],"names":["PolicyInformation","constructor","parameters","policyIdentifier","defaultValues","policyQualifiers","fromSchema","schema","memberName","Error","names","asn1js","Sequence","name","blockName","value","ObjectIdentifier","optional","Repeated","PolicyQualifierInfo","asn1","compareSchema","verified","result","valueBlock","toString","Array","from","element","toSchema","outputArray","push","toJSON","object"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport PolicyQualifierInfo from \"./PolicyQualifierInfo.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class PolicyInformation\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PolicyInformation class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc policyIdentifier\r\n\t\t */\r\n\t\tthis.policyIdentifier = getParametersValue(parameters, \"policyIdentifier\", PolicyInformation.defaultValues(\"policyIdentifier\"));\r\n\r\n\t\tif(\"policyQualifiers\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<PolicyQualifierInfo>}\r\n\t\t\t * @desc Value of the TIME class\r\n\t\t\t */\r\n\t\t\tthis.policyQualifiers = getParametersValue(parameters, \"policyQualifiers\", PolicyInformation.defaultValues(\"policyQualifiers\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"policyIdentifier\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"policyQualifiers\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PolicyInformation class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PolicyInformation ::= SEQUENCE {\r\n\t *    policyIdentifier   CertPolicyId,\r\n\t *    policyQualifiers   SEQUENCE SIZE (1..MAX) OF\r\n\t *    PolicyQualifierInfo OPTIONAL }\r\n\t *\r\n\t * CertPolicyId ::= OBJECT IDENTIFIER\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [policyIdentifier]\r\n\t\t * @property {string} [policyQualifiers]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.policyIdentifier || \"\") }),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.policyQualifiers || \"\"),\r\n\t\t\t\t\t\t\tvalue: PolicyQualifierInfo.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"policyIdentifier\",\r\n\t\t\t\"policyQualifiers\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPolicyInformation.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tpolicyIdentifier: \"policyIdentifier\",\r\n\t\t\t\t\tpolicyQualifiers: \"policyQualifiers\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PolicyInformation\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.policyIdentifier = asn1.result.policyIdentifier.valueBlock.toString();\r\n\r\n\t\tif(\"policyQualifiers\" in asn1.result)\r\n\t\t\tthis.policyQualifiers = Array.from(asn1.result.policyQualifiers, element => new PolicyQualifierInfo({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.policyIdentifier }));\r\n\t\t\r\n\t\tif(\"policyQualifiers\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\t\tvalue: Array.from(this.policyQualifiers, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\tpolicyIdentifier: this.policyIdentifier\r\n\t\t};\r\n\r\n\t\tif(\"policyQualifiers\" in this)\r\n\t\t\tobject.policyQualifiers = Array.from(this.policyQualifiers, element => element.toJSON());\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"PolicyInformation.js"}