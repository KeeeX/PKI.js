{"version":3,"sources":["../src/CertificateSet.js"],"names":["CertificateSet","constructor","parameters","certificates","defaultValues","fromSchema","schema","memberName","Error","names","asn1js","Set","name","blockName","value","Repeated","Choice","Certificate","Constructed","idBlock","tagClass","tagNumber","Any","AttributeCertificateV1","valueBlock","AttributeCertificateV2","OtherCertificateFormat","asn1","compareSchema","verified","Array","from","result","element","initialTagNumber","elementSequence","Sequence","toSchema","toJSON"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport Certificate from \"./Certificate.js\";\r\nimport AttributeCertificateV1 from \"./AttributeCertificateV1.js\";\r\nimport AttributeCertificateV2 from \"./AttributeCertificateV2.js\";\r\nimport OtherCertificateFormat from \"./OtherCertificateFormat.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class CertificateSet\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CertificateSet class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array}\r\n\t\t * @desc certificates\r\n\t\t */\r\n\t\tthis.certificates = getParametersValue(parameters, \"certificates\", CertificateSet.defaultValues(\"certificates\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certificates\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Attribute class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * CertificateSet ::= SET OF CertificateChoices\r\n\t *\r\n\t * CertificateChoices ::= CHOICE {\r\n\t *    certificate Certificate,\r\n\t *    extendedCertificate [0] IMPLICIT ExtendedCertificate,  -- Obsolete\r\n\t *    v1AttrCert [1] IMPLICIT AttributeCertificateV1,        -- Obsolete\r\n\t *    v2AttrCert [2] IMPLICIT AttributeCertificateV2,\r\n\t *    other [3] IMPLICIT OtherCertificateFormat }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (\r\n\t\t\tnew asn1js.Set({\r\n\t\t\t\tname: (names.blockName || \"\"),\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\tname: (names.certificates || \"certificates\"),\r\n\t\t\t\t\t\tvalue: new asn1js.Choice({\r\n\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\tCertificate.schema(),\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\t\t\tnew asn1js.Any()\r\n\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t}), // JUST A STUB\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: AttributeCertificateV1.schema().valueBlock.value\r\n\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: AttributeCertificateV2.schema().valueBlock.value\r\n\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 3 // [3]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: OtherCertificateFormat.schema().valueBlock.value\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"certificates\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertificateSet.schema()\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CertificateSet\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.certificates = Array.from(asn1.result.certificates, element =>\r\n\t\t{\r\n\t\t\tconst initialTagNumber = element.idBlock.tagNumber;\r\n\r\n\t\t\tif(element.idBlock.tagClass === 1)\r\n\t\t\t\treturn new Certificate({ schema: element });\r\n\t\t\t\r\n\t\t\t//region Making \"Sequence\" from \"Constructed\" value\r\n\t\t\tconst elementSequence = new asn1js.Sequence({\r\n\t\t\t\tvalue: element.valueBlock.value\r\n\t\t\t});\r\n\t\t\t//endregion\r\n\r\n\t\t\tswitch(initialTagNumber)\r\n\t\t\t{\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\treturn new AttributeCertificateV1({ schema: elementSequence });\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\treturn new AttributeCertificateV2({ schema: elementSequence });\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\treturn new OtherCertificateFormat({ schema: elementSequence });\r\n\t\t\t\tcase 0:\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn element;\r\n\t\t});\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Set({\r\n\t\t\tvalue: Array.from(this.certificates, element =>\r\n\t\t\t{\r\n\t\t\t\tswitch(true)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase (element instanceof Certificate):\r\n\t\t\t\t\t\treturn element.toSchema();\r\n\t\t\t\t\tcase (element instanceof AttributeCertificateV1):\r\n\t\t\t\t\t\treturn new asn1js.Constructed({\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: element.toSchema().valueBlock.value\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\tcase (element instanceof AttributeCertificateV2):\r\n\t\t\t\t\t\treturn new asn1js.Constructed({\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: element.toSchema().valueBlock.value\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\tcase (element instanceof OtherCertificateFormat):\r\n\t\t\t\t\t\treturn new asn1js.Constructed({\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\t\t\t\ttagNumber: 3 // [3]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: element.toSchema().valueBlock.value\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn element;\r\n\t\t\t})\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tcertificates: Array.from(this.certificates, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"CertificateSet.js"}