{"version":3,"sources":["../src/BasicOCSPResponse.js"],"names":["BasicOCSPResponse","constructor","parameters","tbsResponseData","defaultValues","signatureAlgorithm","signature","certs","fromSchema","schema","memberName","ResponseData","AlgorithmIdentifier","asn1js","BitString","Error","compareWithDefault","memberValue","comparisonResult","tbs","responderID","producedAt","responses","responseExtensions","algorithmId","isEqual","length","names","Sequence","name","blockName","value","Constructed","optional","idBlock","tagClass","tagNumber","Repeated","Certificate","asn1","compareSchema","verified","result","Array","from","element","toSchema","outputArray","push","toJSON","_object","getCertificateStatus","certificate","issuerCertificate","sequence","Promise","resolve","isForCertificate","status","hashesObject","certIDs","certIDPromises","response","hashAlgorithm","certID","reject","CertID","createForCertificate","then","all","id","certStatus","isConstructed","ex","sign","privateKey","engine","subtle","getSignatureParameters","toBER","signWithPrivateKey","valueHex","verify","signerCert","certIndex","trustedCerts","_this","checkCA","cert","issuer","serialNumber","isCA","extensions","extension","extnID","parsedValue","cA","crypto","RelativeDistinguishedNames","entries","index","subject","OctetString","digest","Uint8Array","subjectPublicKeyInfo","subjectPublicKey","valueBlock","results","promiseResults","additionalCerts","promiseResult","certChain","CertificateChainValidationEngine","verificationResult","error","Object","resultMessage","promiseError","verifyWithPublicKey"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, isEqualBuffer, clearProps } from \"pvutils\";\r\nimport { getAlgorithmByOID, getCrypto, getEngine } from \"./common.js\";\r\nimport ResponseData from \"./ResponseData.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport Certificate from \"./Certificate.js\";\r\nimport CertID from \"./CertID.js\";\r\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\";\r\nimport CertificateChainValidationEngine from \"./CertificateChainValidationEngine.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class BasicOCSPResponse\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for BasicOCSPResponse class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ResponseData}\r\n\t\t * @desc tbsResponseData\r\n\t\t */\r\n\t\tthis.tbsResponseData = getParametersValue(parameters, \"tbsResponseData\", BasicOCSPResponse.defaultValues(\"tbsResponseData\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", BasicOCSPResponse.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @desc signature\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", BasicOCSPResponse.defaultValues(\"signature\"));\r\n\t\t\r\n\t\tif(\"certs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Certificate>}\r\n\t\t\t * @desc certs\r\n\t\t\t */\r\n\t\t\tthis.certs = getParametersValue(parameters, \"certs\", BasicOCSPResponse.defaultValues(\"certs\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbsResponseData\":\r\n\t\t\t\treturn new ResponseData();\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for BasicOCSPResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"type\":\r\n\t\t\t\t{\r\n\t\t\t\t\t// noinspection OverlyComplexBooleanExpressionJS\r\n\t\t\t\t\tlet comparisonResult = ((ResponseData.compareWithDefault(\"tbs\", memberValue.tbs)) &&\r\n\t\t\t\t\t(ResponseData.compareWithDefault(\"responderID\", memberValue.responderID)) &&\r\n\t\t\t\t\t(ResponseData.compareWithDefault(\"producedAt\", memberValue.producedAt)) &&\r\n\t\t\t\t\t(ResponseData.compareWithDefault(\"responses\", memberValue.responses)));\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(\"responseExtensions\" in memberValue)\r\n\t\t\t\t\t\tcomparisonResult = comparisonResult && (ResponseData.compareWithDefault(\"responseExtensions\", memberValue.responseExtensions));\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn comparisonResult;\r\n\t\t\t\t}\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn (memberValue.isEqual(BasicOCSPResponse.defaultValues(memberName)));\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for BasicOCSPResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * BasicOCSPResponse       ::= SEQUENCE {\r\n\t *    tbsResponseData      ResponseData,\r\n\t *    signatureAlgorithm   AlgorithmIdentifier,\r\n\t *    signature            BIT STRING,\r\n\t *    certs            [0] EXPLICIT SEQUENCE OF Certificate OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [tbsResponseData]\r\n\t\t * @property {string} [signatureAlgorithm]\r\n\t\t * @property {string} [signature]\r\n\t\t * @property {string} [certs]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"BasicOCSPResponse\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tResponseData.schema(names.tbsResponseData || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"BasicOCSPResponse.tbsResponseData\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"BasicOCSPResponse.signatureAlgorithm\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.signature || \"BasicOCSPResponse.signature\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\t\tvalue: [new asn1js.Repeated({\r\n\t\t\t\t\t\t\t\tname: \"BasicOCSPResponse.certs\",\r\n\t\t\t\t\t\t\t\tvalue: Certificate.schema(names.certs || {})\r\n\t\t\t\t\t\t\t})]\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"BasicOCSPResponse.tbsResponseData\",\r\n\t\t\t\"BasicOCSPResponse.signatureAlgorithm\",\r\n\t\t\t\"BasicOCSPResponse.signature\",\r\n\t\t\t\"BasicOCSPResponse.certs\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tBasicOCSPResponse.schema()\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for BasicOCSPResponse\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.tbsResponseData = new ResponseData({ schema: asn1.result[\"BasicOCSPResponse.tbsResponseData\"] });\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result[\"BasicOCSPResponse.signatureAlgorithm\"] });\r\n\t\tthis.signature = asn1.result[\"BasicOCSPResponse.signature\"];\r\n\t\t\r\n\t\tif(\"BasicOCSPResponse.certs\" in asn1.result)\r\n\t\t\tthis.certs = Array.from(asn1.result[\"BasicOCSPResponse.certs\"], element => new Certificate({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(this.tbsResponseData.toSchema());\r\n\t\toutputArray.push(this.signatureAlgorithm.toSchema());\r\n\t\toutputArray.push(this.signature);\r\n\t\t\r\n\t\t//region Create array of certificates\r\n\t\tif(\"certs\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\tvalue: Array.from(this.certs, element => element.toSchema())\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\ttbsResponseData: this.tbsResponseData.toJSON(),\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n\t\t\tsignature: this.signature.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"certs\" in this)\r\n\t\t\t_object.certs = Array.from(this.certs, element => element.toJSON());\r\n\t\t\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get OCSP response status for specific certificate\r\n\t * @param {Certificate} certificate Certificate to be checked\r\n\t * @param {Certificate} issuerCertificate Certificate of issuer for certificate to be checked\r\n\t * @returns {Promise}\r\n\t */\r\n\tgetCertificateStatus(certificate, issuerCertificate)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst result = {\r\n\t\t\tisForCertificate: false,\r\n\t\t\tstatus: 2 // 0 = good, 1 = revoked, 2 = unknown\r\n\t\t};\r\n\t\t\r\n\t\tconst hashesObject = {};\r\n\t\t\r\n\t\tconst certIDs = [];\r\n\t\tconst certIDPromises = [];\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create all \"certIDs\" for input certificates\r\n\t\tfor(const response of this.tbsResponseData.responses)\r\n\t\t{\r\n\t\t\tconst hashAlgorithm = getAlgorithmByOID(response.certID.hashAlgorithm.algorithmId);\r\n\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\treturn Promise.reject(`Wrong CertID hashing algorithm: ${response.certID.hashAlgorithm.algorithmId}`);\r\n\t\t\t\r\n\t\t\tif((hashAlgorithm.name in hashesObject) === false)\r\n\t\t\t{\r\n\t\t\t\thashesObject[hashAlgorithm.name] = 1;\r\n\t\t\t\t\r\n\t\t\t\tconst certID = new CertID();\r\n\t\t\t\t\r\n\t\t\t\tcertIDs.push(certID);\r\n\t\t\t\tcertIDPromises.push(certID.createForCertificate(certificate, {\r\n\t\t\t\t\thashAlgorithm: hashAlgorithm.name,\r\n\t\t\t\t\tissuerCertificate\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tPromise.all(certIDPromises)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Compare all response's \"certIDs\" with identifiers for input certificate\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tfor(const response of this.tbsResponseData.responses)\r\n\t\t\t{\r\n\t\t\t\tfor(const id of certIDs)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(response.certID.isEqual(id))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresult.isForCertificate = true;\r\n\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tswitch(response.certStatus.idBlock.isConstructed)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcase true:\r\n\t\t\t\t\t\t\t\t\tif(response.certStatus.idBlock.tagNumber === 1)\r\n\t\t\t\t\t\t\t\t\t\tresult.status = 1; // revoked\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\tcase false:\r\n\t\t\t\t\t\t\t\t\tswitch(response.certStatus.idBlock.tagNumber)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase 0: // good\r\n\t\t\t\t\t\t\t\t\t\t\tresult.status = 0;\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase 2: // unknown\r\n\t\t\t\t\t\t\t\t\t\t\tresult.status = 2;\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn result;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Make signature for current OCSP Basic Response\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm=\"SHA-1\"] Hashing algorithm. Default SHA-1\r\n\t * @returns {Promise}\r\n\t */\r\n\tsign(privateKey, hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Initial checking\r\n\t\t//region Get a private key from function parameter\r\n\t\tif(typeof privateKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide a private key for signing\");\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tlet parameters;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"default parameters\" for current algorithm and set correct signature algorithm\r\n\t\tsequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tparameters = result.parameters;\r\n\t\t\tthis.signatureAlgorithm = result.signatureAlgorithm;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create TBS data for signing\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tthis.tbsResponseData.tbs = this.tbsResponseData.toSchema(true).toBER(false);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Signing TBS data on provided private key\r\n\t\tsequence = sequence.then(() => engine.subtle.signWithPrivateKey(this.tbsResponseData.tbs, privateKey, parameters));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.signature = new asn1js.BitString({ valueHex: result });\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify existing OCSP Basic Response\r\n\t * @param {Object} parameters Additional parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tverify(parameters = {})\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet signerCert = null;\r\n\t\t\r\n\t\tlet certIndex = -1;\r\n\t\t\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tlet trustedCerts = [];\r\n\t\t\r\n\t\tconst _this = this;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check amount of certificates\r\n\t\tif((\"certs\" in this) === false)\r\n\t\t\treturn Promise.reject(\"No certificates attached to the BasicOCSPResponce\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get input values\r\n\t\tif(\"trustedCerts\" in parameters)\r\n\t\t\ttrustedCerts = parameters.trustedCerts;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Aux functions\r\n\t\t/**\r\n\t\t * Check CA flag for the certificate\r\n\t\t * @param {Certificate} cert Certificate to find CA flag for\r\n\t\t * @returns {*}\r\n\t\t */\r\n\t\tfunction checkCA(cert)\r\n\t\t{\r\n\t\t\t//region Do not include signer's certificate\r\n\t\t\tif((cert.issuer.isEqual(signerCert.issuer) === true) && (cert.serialNumber.isEqual(signerCert.serialNumber) === true))\r\n\t\t\t\treturn null;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tlet isCA = false;\r\n\t\t\t\r\n\t\t\tfor(const extension of cert.extensions)\r\n\t\t\t{\r\n\t\t\t\tif(extension.extnID === \"2.5.29.19\") // BasicConstraints\r\n\t\t\t\t{\r\n\t\t\t\t\tif(\"cA\" in extension.parsedValue)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(extension.parsedValue.cA === true)\r\n\t\t\t\t\t\t\tisCA = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(isCA)\r\n\t\t\t\treturn cert;\r\n\t\t\t\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find correct value for \"responderID\"\r\n\t\tswitch(true)\r\n\t\t{\r\n\t\t\tcase (this.tbsResponseData.responderID instanceof RelativeDistinguishedNames): // [1] Name\r\n\t\t\t\tsequence = sequence.then(() =>\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(const [index, certificate] of _this.certs.entries())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(certificate.subject.isEqual(_this.tbsResponseData.responderID))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcertIndex = index;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\tcase (this.tbsResponseData.responderID instanceof asn1js.OctetString): // [2] KeyHash\r\n\t\t\t\tsequence = sequence.then(() => Promise.all(Array.from(_this.certs, element =>\r\n\t\t\t\t\tcrypto.digest({ name: \"sha-1\" }, new Uint8Array(element.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex)))).then(results =>\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(const [index, ] of _this.certs.entries())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(isEqualBuffer(results[index], _this.tbsResponseData.responderID.valueBlock.valueHex))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcertIndex = index;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}));\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(\"Wrong value for responderID\");\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Make additional verification for signer's certificate\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tif(certIndex === (-1))\r\n\t\t\t\treturn Promise.reject(\"Correct certificate was not found in OCSP response\");\r\n\t\t\t\r\n\t\t\tsignerCert = this.certs[certIndex];\r\n\t\t\t\r\n\t\t\treturn Promise.all(Array.from(_this.certs, element => checkCA(element))).then(promiseResults =>\r\n\t\t\t{\r\n\t\t\t\tconst additionalCerts = [];\r\n\t\t\t\tadditionalCerts.push(signerCert);\r\n\t\t\t\t\r\n\t\t\t\tfor(const promiseResult of promiseResults)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(promiseResult !== null)\r\n\t\t\t\t\t\tadditionalCerts.push(promiseResult);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tconst certChain = new CertificateChainValidationEngine({\r\n\t\t\t\t\tcerts: additionalCerts,\r\n\t\t\t\t\ttrustedCerts\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\treturn certChain.verify().then(verificationResult =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(verificationResult.result === true)\r\n\t\t\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Validation of signer's certificate failed\");\r\n\t\t\t\t}, error =>\r\n\t\t\t\t\tPromise.reject(`Validation of signer's certificate failed with error: ${((error instanceof Object) ? error.resultMessage : error)}`)\r\n\t\t\t\t);\r\n\t\t\t}, promiseError =>\r\n\t\t\t\tPromise.reject(`Error during checking certificates for CA flag: ${promiseError}`)\r\n\t\t\t);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\tsequence = sequence.then(() => engine.subtle.verifyWithPublicKey(this.tbsResponseData.tbs, this.signature, this.certs[certIndex].subjectPublicKeyInfo, this.signatureAlgorithm));\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"BasicOCSPResponse.js"}