{"version":3,"sources":["../src/SignerInfo.js"],"names":["SignerInfo","constructor","parameters","version","defaultValues","sid","digestAlgorithm","signedAttrs","signatureAlgorithm","signature","unsignedAttrs","fromSchema","schema","memberName","asn1js","Any","AlgorithmIdentifier","SignedAndUnsignedAttributes","type","OctetString","Error","compareWithDefault","memberValue","isEqual","attributes","encodedValue","names","Sequence","name","value","Integer","Choice","IssuerAndSerialNumber","blockName","Constructed","optional","idBlock","tagClass","tagNumber","asn1","compareSchema","verified","result","valueBlock","valueDec","currentSid","toSchema","outputArray","push","toJSON","_object"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport SignedAndUnsignedAttributes from \"./SignedAndUnsignedAttributes.js\";\r\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class SignerInfo \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SignerInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", SignerInfo.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @desc sid\r\n\t\t */\r\n\t\tthis.sid = getParametersValue(parameters, \"sid\", SignerInfo.defaultValues(\"sid\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc digestAlgorithm\r\n\t\t */\r\n\t\tthis.digestAlgorithm = getParametersValue(parameters, \"digestAlgorithm\", SignerInfo.defaultValues(\"digestAlgorithm\"));\r\n\t\t\r\n\t\tif(\"signedAttrs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {SignedAndUnsignedAttributes}\r\n\t\t\t * @desc signedAttrs\r\n\t\t\t */\r\n\t\t\tthis.signedAttrs = getParametersValue(parameters, \"signedAttrs\", SignerInfo.defaultValues(\"signedAttrs\"));\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc digestAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", SignerInfo.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc signature\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", SignerInfo.defaultValues(\"signature\"));\r\n\t\t\r\n\t\tif(\"unsignedAttrs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {SignedAndUnsignedAttributes}\r\n\t\t\t * @desc unsignedAttrs\r\n\t\t\t */\r\n\t\t\tthis.unsignedAttrs = getParametersValue(parameters, \"unsignedAttrs\", SignerInfo.defaultValues(\"unsignedAttrs\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"sid\":\r\n\t\t\t\treturn new asn1js.Any();\r\n\t\t\tcase \"digestAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signedAttrs\":\r\n\t\t\t\treturn new SignedAndUnsignedAttributes({ type: 0 });\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"unsignedAttrs\":\r\n\t\t\t\treturn new SignedAndUnsignedAttributes({ type: 1 });\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignerInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (SignerInfo.defaultValues(\"version\") === memberValue);\r\n\t\t\tcase \"sid\":\r\n\t\t\t\treturn (memberValue instanceof asn1js.Any);\r\n\t\t\tcase \"digestAlgorithm\":\r\n\t\t\t\tif((memberValue instanceof AlgorithmIdentifier) === false)\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\treturn memberValue.isEqual(SignerInfo.defaultValues(\"digestAlgorithm\"));\r\n\t\t\tcase \"signedAttrs\":\r\n\t\t\t\treturn ((SignedAndUnsignedAttributes.compareWithDefault(\"type\", memberValue.type))\r\n\t\t\t\t&& (SignedAndUnsignedAttributes.compareWithDefault(\"attributes\", memberValue.attributes))\r\n\t\t\t\t&& (SignedAndUnsignedAttributes.compareWithDefault(\"encodedValue\", memberValue.encodedValue)));\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\tif((memberValue instanceof AlgorithmIdentifier) === false)\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\treturn memberValue.isEqual(SignerInfo.defaultValues(\"signatureAlgorithm\"));\r\n\t\t\tcase \"signature\":\r\n\t\t\tcase \"unsignedAttrs\":\r\n\t\t\t\treturn ((SignedAndUnsignedAttributes.compareWithDefault(\"type\", memberValue.type))\r\n\t\t\t\t&& (SignedAndUnsignedAttributes.compareWithDefault(\"attributes\", memberValue.attributes))\r\n\t\t\t\t&& (SignedAndUnsignedAttributes.compareWithDefault(\"encodedValue\", memberValue.encodedValue)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignerInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * SignerInfo ::= SEQUENCE {\r\n\t *    version CMSVersion,\r\n\t *    sid SignerIdentifier,\r\n\t *    digestAlgorithm DigestAlgorithmIdentifier,\r\n\t *    signedAttrs [0] IMPLICIT SignedAttributes OPTIONAL,\r\n\t *    signatureAlgorithm SignatureAlgorithmIdentifier,\r\n\t *    signature SignatureValue,\r\n\t *    unsignedAttrs [1] IMPLICIT UnsignedAttributes OPTIONAL }\r\n\t *\r\n\t * SignerIdentifier ::= CHOICE {\r\n\t *    issuerAndSerialNumber IssuerAndSerialNumber,\r\n\t *    subjectKeyIdentifier [0] SubjectKeyIdentifier }\r\n\t *\r\n\t * SubjectKeyIdentifier ::= OCTET STRING\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [sid]\r\n\t\t * @property {string} [digestAlgorithm]\r\n\t\t * @property {string} [signedAttrs]\r\n\t\t * @property {string} [signatureAlgorithm]\r\n\t\t * @property {string} [signature]\r\n\t\t * @property {string} [unsignedAttrs]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (\r\n\t\t\tnew asn1js.Sequence({\r\n\t\t\t\tname: \"SignerInfo\",\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Integer({ name: (names.version || \"SignerInfo.version\") }),\r\n\t\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\tIssuerAndSerialNumber.schema(names.sid || {\r\n\t\t\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\t\t\tblockName: \"SignerInfo.sid\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\toptional: true,\r\n\t\t\t\t\t\t\t\tname: (names.sid || \"SignerInfo.sid\"),\r\n\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tvalue: [new asn1js.OctetString()]\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tAlgorithmIdentifier.schema(names.digestAlgorithm || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"SignerInfo.digestAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tSignedAndUnsignedAttributes.schema(names.signedAttrs || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"SignerInfo.signedAttrs\",\r\n\t\t\t\t\t\t\ttagNumber: 0\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"SignerInfo.signatureAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tnew asn1js.OctetString({ name: (names.signature || \"SignerInfo.signature\") }),\r\n\t\t\t\t\tSignedAndUnsignedAttributes.schema(names.unsignedAttrs || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"SignerInfo.unsignedAttrs\",\r\n\t\t\t\t\t\t\ttagNumber: 1\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"SignerInfo.version\",\r\n\t\t\t\"SignerInfo.sid\",\r\n\t\t\t\"SignerInfo.digestAlgorithm\",\r\n\t\t\t\"SignerInfo.signedAttrs\",\r\n\t\t\t\"SignerInfo.signatureAlgorithm\",\r\n\t\t\t\"SignerInfo.signature\",\r\n\t\t\t\"SignerInfo.unsignedAttrs\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSignerInfo.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SignerInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result[\"SignerInfo.version\"].valueBlock.valueDec;\r\n\r\n\t\tconst currentSid = asn1.result[\"SignerInfo.sid\"];\r\n\t\tif(currentSid.idBlock.tagClass === 1)\r\n\t\t\tthis.sid = new IssuerAndSerialNumber({ schema: currentSid });\r\n\t\telse\r\n\t\t\tthis.sid = currentSid;\r\n\r\n\t\tthis.digestAlgorithm = new AlgorithmIdentifier({ schema: asn1.result[\"SignerInfo.digestAlgorithm\"] });\r\n\t\tif(\"SignerInfo.signedAttrs\" in asn1.result)\r\n\t\t\tthis.signedAttrs = new SignedAndUnsignedAttributes({ type: 0, schema: asn1.result[\"SignerInfo.signedAttrs\"] });\r\n\t\t\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result[\"SignerInfo.signatureAlgorithm\"] });\r\n\t\tthis.signature = asn1.result[\"SignerInfo.signature\"];\r\n\t\tif(\"SignerInfo.unsignedAttrs\" in asn1.result)\r\n\t\t\tthis.unsignedAttrs = new SignedAndUnsignedAttributes({ type: 1, schema: asn1.result[\"SignerInfo.unsignedAttrs\"] });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tif(SignerInfo.compareWithDefault(\"sid\", this.sid))\r\n\t\t\tthrow new Error(\"Incorrectly initialized \\\"SignerInfo\\\" class\");\r\n\t\t\r\n\t\t//region Create array for output sequence \r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\t\r\n\t\tif(this.sid instanceof IssuerAndSerialNumber)\r\n\t\t\toutputArray.push(this.sid.toSchema());\r\n\t\telse\r\n\t\t\toutputArray.push(this.sid);\r\n\t\t\r\n\t\toutputArray.push(this.digestAlgorithm.toSchema());\r\n\t\t\r\n\t\tif(\"signedAttrs\" in this)\r\n\t\t{\r\n\t\t\tif(SignerInfo.compareWithDefault(\"signedAttrs\", this.signedAttrs) === false)\r\n\t\t\t\toutputArray.push(this.signedAttrs.toSchema());\r\n\t\t}\r\n\t\t\r\n\t\toutputArray.push(this.signatureAlgorithm.toSchema());\r\n\t\toutputArray.push(this.signature);\r\n\t\t\r\n\t\tif(\"unsignedAttrs\" in this)\r\n\t\t{\r\n\t\t\tif(SignerInfo.compareWithDefault(\"unsignedAttrs\", this.unsignedAttrs) === false)\r\n\t\t\t\toutputArray.push(this.unsignedAttrs.toSchema());\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object \r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion \r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tif(SignerInfo.compareWithDefault(\"sid\", this.sid))\r\n\t\t\tthrow new Error(\"Incorrectly initialized \\\"SignerInfo\\\" class\");\r\n\t\t\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version\r\n\t\t};\r\n\r\n\t\tif(!(this.sid instanceof asn1js.Any))\r\n\t\t\t_object.sid = this.sid.toJSON();\r\n\r\n\t\t_object.digestAlgorithm = this.digestAlgorithm.toJSON();\r\n\r\n\t\tif(SignerInfo.compareWithDefault(\"signedAttrs\", this.signedAttrs) === false)\r\n\t\t\t_object.signedAttrs = this.signedAttrs.toJSON();\r\n\r\n\t\t_object.signatureAlgorithm = this.signatureAlgorithm.toJSON();\r\n\t\t_object.signature = this.signature.toJSON();\r\n\r\n\t\tif(SignerInfo.compareWithDefault(\"unsignedAttrs\", this.unsignedAttrs) === false)\r\n\t\t\t_object.unsignedAttrs = this.unsignedAttrs.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"SignerInfo.js"}