{"version":3,"sources":["../src/OtherCertificateFormat.js"],"names":["OtherCertificateFormat","constructor","parameters","otherCertFormat","defaultValues","otherCert","fromSchema","schema","memberName","asn1js","Any","Error","names","Sequence","name","blockName","value","ObjectIdentifier","asn1","compareSchema","verified","result","valueBlock","toString","toSchema","toJSON","object"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class OtherCertificateFormat\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OtherCertificateFormat class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc otherCertFormat\r\n\t\t */\r\n\t\tthis.otherCertFormat = getParametersValue(parameters, \"otherCertFormat\", OtherCertificateFormat.defaultValues(\"otherCertFormat\"));\r\n\t\t/**\r\n\t\t * @type {Any}\r\n\t\t * @desc otherCert\r\n\t\t */\r\n\t\tthis.otherCert = getParametersValue(parameters, \"otherCert\", OtherCertificateFormat.defaultValues(\"otherCert\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"otherCertFormat\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"otherCert\":\r\n\t\t\t\treturn new asn1js.Any();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OtherCertificateFormat class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * OtherCertificateFormat ::= SEQUENCE {\r\n\t *    otherCertFormat OBJECT IDENTIFIER,\r\n\t *    otherCert ANY DEFINED BY otherCertFormat }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [otherCertFormat]\r\n\t\t * @property {string} [otherCert]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.otherCertFormat || \"otherCertFormat\") }),\r\n\t\t\t\tnew asn1js.Any({ name: (names.otherCert || \"otherCert\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"otherCertFormat\",\r\n\t\t\t\"otherCert\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOtherCertificateFormat.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OtherCertificateFormat\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.otherCertFormat = asn1.result.otherCertFormat.valueBlock.toString();\r\n\t\tthis.otherCert = asn1.result.otherCert;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.otherCertFormat }),\r\n\t\t\t\tthis.otherCert\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\totherCertFormat: this.otherCertFormat\r\n\t\t};\r\n\r\n\t\tif(!(this.otherCert instanceof asn1js.Any))\r\n\t\t\tobject.otherCert = this.otherCert.toJSON();\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"OtherCertificateFormat.js"}